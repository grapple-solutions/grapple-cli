#!/bin/bash
set -e

. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"

# --------------------------------- Functions ------------------------------------------

# Print help menu for grpl cluster install and exit
cli_help() {
  grpl_k3d_install_cli_help
  exit 0
}

# --------------------------------- CODE ------------------------------------------

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help


NS=grpl-system
awsregistry="p7h7z5g3"
SSL_ENABLE="false"
SSL_ISSUER="letsencrypt-grapple-demo"
cli_log "cluster install BEGIN"

# valid arguments array
valid_args=(
    "CLUSTER_NAME"
    "GRAPPLE_VERSION"
    "AUTO_CONFIRM"
    "GRAPPLE_DNS"
    "ORGANIZATION"
    "EMAIL"
    "INSTALL_KUBEBLOCKS"
    "wait"
  )
# check if values are already passed form terminal
# if yes? then store then in the respective vars
help_menu_cmd="grpl k3d install help"
extract_input_params_from_cli $valid_args "${help_menu_cmd}" "$@"

status_log $TYPE_INFO "Installation of grpl is in progress"

#-------------Functions-------------------



patch_coredns() {


  # Check if coredns deployment is ready
  if ! kubectl rollout status -n kube-system deploy coredns >/dev/null 2>&1; then
    status_log $TYPE_INFO "Waiting for the coredns deployment to be ready..."
    while true; do 
      output=$(kubectl rollout status -n kube-system deploy coredns 2>&1)
      echo "$output" | grep -q "successfully rolled out" && echo "Deployment \"$deployment\" in namespace \"$namespace\" successfully rolled out." && break || echo "..."
      sleep 5
    done
    status_log $TYPE_SUCCESS "coredns deployment is ready"
  fi

  # Variables
  NAMESPACE="kube-system"
  CONFIGMAP_NAME="coredns"
  NEW_FORWARD="        forward . 8.8.8.8 8.8.4.4" # Properly indented for YAML

  # Backup the current ConfigMap
  echo "Backing up the current ConfigMap..."
  kubectl -n $NAMESPACE get configmap $CONFIGMAP_NAME -o yaml > coredns-backup.yaml
  if [ $? -ne 0 ]; then
    status_log $TYPE_ERROR "Failed to backup the ConfigMap. Exiting."
    exit 1
  fi
  echo "Backup saved as coredns-backup.yaml."

  # Check if the forward directive is already updated
  if ! grep -q "forward . 8.8.8.8 8.8.4.4" coredns-backup.yaml; then
    # Update the ConfigMap using awk
    echo "Updating the forward directive in the CoreDNS ConfigMap..."
    kubectl -n $NAMESPACE get configmap $CONFIGMAP_NAME -o yaml | \
      awk -v new_forward="$NEW_FORWARD" '
      BEGIN { updated = 0 }
      {
        if ($0 ~ /forward \. \/etc\/resolv\.conf/) {
          print new_forward
          updated = 1
        } else {
          print
        }
      }
      END {
        if (!updated) {
          print "Error: forward . /etc/resolv.conf not found in the ConfigMap" > "/dev/stderr"
          exit 1
        }
      }' > coredns-updated.yaml

    if [ $? -ne 0 ]; then
      echo "Failed to update the ConfigMap YAML. Exiting."
      exit 1
    fi

    # Replace the updated ConfigMap
    kubectl replace -f coredns-updated.yaml
    if [ $? -ne 0 ]; then
      echo "Failed to replace the ConfigMap. Exiting."
      exit 1
    fi
    echo "CoreDNS ConfigMap updated successfully."

      # Restart the CoreDNS pods to apply changes
    echo "Restarting CoreDNS pods..."
    if [ $? -ne 0 ]; then
      echo "Failed to restart CoreDNS. Exiting."
      exit 1
    fi
    echo "CoreDNS pods restarted successfully. Update complete."


  fi

  default_error="Failed to patch CoreDNS ConfigMap because: "
  

  DOCKER_API_GATEWAY=$CLUSTER_IP

  # Check if the modification was successful
  if [[ -z "$DOCKER_API_GATEWAY" ]]; then
    status_log $TYPE_ERROR "$default_error Failed to get Docker gateway IP."
    exit 1
  fi
  export DOCKER_API_GATEWAY=$DOCKER_API_GATEWAY

  # Step 4: Move template file to /tmp and substitute environment variables

  template_file_src="$GRPL_WORKDIR/files/coredns-custom.yaml"
  template_file_dest="/tmp/coredns-custom.yaml"
  tmp_file_dest="/tmp/tmp_coredns_custom.yaml"


  # Move the file and substitute environment variables using envsubst
  cp "$template_file_src" "$template_file_dest"
  if [ $? -ne 0 ]; then
    status_log $TYPE_ERROR "$default_error Failed to copy template file."
    exit 1
  fi

  # Substitute environment variables and overwrite the destination file
  check_and_install_gettext
  envsubst < "$template_file_dest" > "$tmp_file_dest" && mv "$tmp_file_dest" "$template_file_dest"
  if [ $? -ne 0 ]; then
    status_log $TYPE_ERROR "$default_error Failed to substitute environment variables in the template file."
    exit 1
  fi

  # Step 5: Check if the coredns-patch ConfigMap exists, if not, create it
  if ! kubectl apply -f $template_file_dest > /dev/null 2>&1; then
    status_log $TYPE_ERROR "$default_error Failed to create coredns-patch ConfigMap."
    exit 1
  fi

  if ! kubectl rollout restart deployment coredns -n kube-system > /dev/null 2>&1; then
    status_log $TYPE_ERROR "$default_error Failed to rollout restart deployment coredns."
    exit 1
  fi


  status_log $TYPE_SUCCESS "Successfully created ConfigMap coredns-custom"

}




kubeblocks_installation() {
  if ! kbcli; then
      echo "installing kbcli"
      check_and_install_kbcli
  fi

  if ! kubectl get deployment kubeblocks -n kb-system; then
    echo "checking kubeblocks"
    check_and_install_kubeblocks

    echo "waiting for configs to apply"
    for i in $(kubectl get clusterversion -o name); do 
      kubectl get $i -o yaml | sed "s,infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com,docker.io,g" | kubectl apply -f - >/dev/null 2>&1; 
    done
  else 
    echo "kubeblocks is already installed"
  fi
}

#------------ CLUSTER_NAME Input-----------

check_if_param_avaiable_in_non_interactive_mode "CLUSTER_NAME" "${CLUSTER_NAME}" "${help_menu_cmd}"
CLUSTER_NAME=$(if [ "${CLUSTER_NAME}" != "" ]; then echo ${CLUSTER_NAME}; else prompt_for_input_with_validation "Enter cluster name: " "Provide a name for the cluster" "$non_empty_regex" "Input can not be empty"; fi) || exit $?
echo "CLUSTER_NAME: ${CLUSTER_NAME}"  
check_k3d_cluster_exists "${CLUSTER_NAME}"


#----------- GRAPPLE_DNS Input -----------

if [ "${GRAPPLE_DNS}" == "" ]; then 
    GRAPPLE_DNS="grpl-k3d.dev"
fi



#---------- KUBE_CONTEXT Input ------------

KUBERNETES_CLUSTER_NAME=""
if [ -n "$KUBERNETES_SERVICE_HOST" ] && [ -n "$KUBERNETES_SERVICE_PORT" ]; then
    echo "Running inside a Kubernetes cluster"
    KUBERNETES_CLUSTER_NAME=$(kubectl get nodes -o name | awk -F'/' '{print $2}' | head -n 1)
else
    echo "Not running inside a Kubernetes cluster"
    if [ "${KUBE_CONTEXT}" == $CURRENT_CONTEXT ] || [ "${KUBE_CONTEXT}" == "" ]; then
        if kubectl config current-context >/dev/null 2>&1; then
        KUBE_CONTEXT=$(kubectl config current-context)
        fi
    fi
    
    # Run the command and store the output in a variable
    contexts=$(kubectl config get-contexts -o name)
    # Check if the output is empty
    if [ -z "$contexts" ]; then
        status_log $TYPE_ERROR "Error: No contexts found"
        exit 1
    else
        #check if input from params is valid or not
        is_correct_kubectl_context_provided $KUBE_CONTEXT
        contexts=$(kubectl config get-contexts -o name)
        KUBE_CONTEXT=$(if [ "${KUBE_CONTEXT}" != "" ]; then echo ${KUBE_CONTEXT}; else gum choose  --header "Please select kubectl context you want to use" $contexts ; fi) || exit $?
        kubectl config use-context $KUBE_CONTEXT
        status_log $TYPE_INFO "KUBE_CONTEXT: ${KUBE_CONTEXT}"
    fi

    KUBERNETES_CLUSTER_NAME=$KUBE_CONTEXT
fi

#----------- creating complete domain --------

complete_domain="" 
complete_domain=${GRAPPLE_DNS}

#----------- GRAPPLE_VERSION Input --------

if [ "${GRAPPLE_VERSION}" == "latest" ] || [ "${GRAPPLE_VERSION}" == "" ]; then
  GRAPPLE_VERSION=$(head -n 1 "$GRPL_WORKDIR/grapple-versions")
  status_log $TYPE_INFO "Installing grapple version: ${GRAPPLE_VERSION}"
fi


if [ "${GRAPPLE_VERSION}" != "" ]; then 
  is_correct_grapple_version_provided $GRAPPLE_VERSION 
fi


#----------- ORGANIZATION default value --------
if [ "${ORGANIZATION}" == "" ]; then 
  ORGANIZATION="grapple solutions AG"
fi


#----------- Email validation and default value --------
if [ "${EMAIL}" != "" ]; then 
  is_value_correct_wrt_regex $EMAIL $email_regex "Invalid email address format. Please try again"
else 
  EMAIL="info@grapple-solutions.com"
fi


license=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.LIC}" 2>/dev/null | base64 --decode 2>/dev/null)

if [[ $? -ne 0 ]]; then
    GRAPPLE_LICENSE="free"
elif [[ -z $license ]]; then
    GRAPPLE_LICENSE="free"
else
    GRAPPLE_LICENSE=$license
fi

CLUSTER_NAME=${CLUSTER_NAME:-${KUBERNETES_CLUSTER_NAME}}


cat <<EOF > /tmp/values-override.yaml
# Default values for grsf-init.

clusterdomain: ${complete_domain}

# Configuration
config:
  email: "${EMAIL}"
  organization: ${ORGANIZATION}
  clusterdomain: ${complete_domain}
  grapiversion: "0.0.1"
  gruimversion: "0.0.1"
  dev: "false"
  ssl: "$SSL_ENABLE"
  sslissuer: "$SSL_ISSUER"
  GRAPPLE_DNS: ${complete_domain}
  GRAPPLE_VERSION: ${GRAPPLE_VERSION}
  GRAPPLE_LICENSE: ${GRAPPLE_LICENSE}
  CLUSTER_NAME: ${CLUSTER_NAME}
  CLUSTER_IP: ${CLUSTER_IP}
  PROVIDER_CLUSTER_TYPE: "k3d"
# Additional configurations omitted for brevity
EOF

cat /tmp/values-override.yaml


# Use gum to confirm before proceeding
if [ "${AUTO_CONFIRM}" != "true" ]  && [ "$TTY" == "enabled" ]; then

  status_log $TYPE_DEFAULT "Going to deploy grpl on ${TARGET_PLATFORM} with following configurations"  
  status_log $TYPE_DEFAULT "GRAPPLE_VERSION: ${GRAPPLE_VERSION}"
  status_log $TYPE_DEFAULT "GRAPPLE_DNS: ${complete_domain}"
  status_log $TYPE_DEFAULT "GRAPPLE_LICENSE: ${GRAPPLE_LICENSE}"
  status_log $TYPE_DEFAULT "ORGANIZATION: ${ORGANIZATION}"
  status_log $TYPE_DEFAULT "EMAIL: ${EMAIL}"
  status_log $TYPE_DEFAULT "CLUSTER_NAME: ${CLUSTER_NAME}"
  status_log $TYPE_DEFAULT "PROVIDER_CLUSTER_TYPE: k3d"

  gum confirm "Proceed with deployment using the values above?" || (status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
fi


# Define helm_deploy function 
if [ "$values_yaml_file_names" != "" ]; then
  values_yaml_file_names=$(echo "$values_yaml_file_names" | awk -v grpl_workdir="$GRPL_WORKDIR" '{gsub("values-templates", "\"" grpl_workdir "/values-templates\"")}1')
  values_yaml_file_names=$(echo "$values_yaml_file_names" | sed 's/"//g')
fi
retries=0
helm_deploy() {

  i=$1
  v=${2:-$GRAPPLE_VERSION}
  if [ "$v" != "" ]; then 
    version="--version ${v}"
  else
    version=""
  fi
    

  k3d_values=" -f ${GRPL_WORKDIR}/template-files/values-k3d.yaml "


  echo "Deploying $i with version $version"


  if ! eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $k3d_values" >/dev/null; then
    ((retries+=1))
    status_log $TYPE_INFO "Retry ${retries} - ${i} Failed to Install"
    if [[ $retries == 3 ]]; then
        status_log $TYPE_INFO "We tried retrying 3 times and tried logging out of public.ecr.aws registry but it failed, please run 'helm registry logout public.ecr.aws/<repo>' and try again"
        echo "${i} Failed to Installed"
        status_log $TYPE_ERROR "${i} Failed to Installed due to following error"
        eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $k3d_values"  >&2  
        exit 1
    else 
      if helm registry logout public.ecr.aws >/dev/null 2>&1; then
        status_log $TYPE_INFO "logged out of public.ecr.aws registry"
        status_log $TYPE_INFO "trying again"
      fi
      helm_deploy $i
    fi

  fi

}

if [ "${INSTALL_KUBEBLOCKS}" == "true" ] || [ "${INSTALL_KUBEBLOCKS}" == "" ]; then
  INSTALL_KUBEBLOCKS="true"
  status_log $TYPE_INFO "Installing kubeblocks in background"
  kubeblocks_installation >/dev/null 2>&1 &
fi


#----------- CLUSTER_IP Input -----------
get_cluster_external_ip "kube-system"
CLUSTER_IP=$EXTERNAL_IP
export CLUSTER_IP=$CLUSTER_IP
grpl k3d patch_dns

patch_coredns


status_log $TYPE_INFO "Checking if cert-manager is installed"
if ! kubectl get namespace cert-manager >/dev/null 2>&1; then
  status_log $TYPE_INFO "Downloading and installing cert-manager"
  if ! eval "$(getGumSpinnerOrLogger "Downloading cert-manager helm chart") helm repo add jetstack https://charts.jetstack.io" ; then
    status_log $TYPE_ERROR "Failed to add jetstack helm repo"
    exit 1
  fi
  if ! eval "$(getGumSpinnerOrLogger "Updating helm repos") helm repo update"; then 
    status_log $TYPE_ERROR "Failed to update helm repos"
    exit 1
  fi
  if ! eval "$(getGumSpinnerOrLogger "Installing cert-manager") helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set installCRDs=true >/dev/null 2>&1"; then
  status_log $TYPE_ERROR "Failed to install cert-manager"
  exit 1
  fi
else
  status_log $TYPE_INFO "cert-manager is already installed"
fi

echo 
echo ----

helm_deploy grsf-init 
status_log $TYPE_INFO "waiting for grsf-init to be ready"

echo "wait for cert-manager to be ready"
if helm get -n kube-system notes traefik >/dev/null 2>&1; then 
    CRD=Middleware && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi
if kubectl get deploy -n grpl-system grsf-init-cert-manager >/dev/null 2>&1; then 
    kubectl wait deployment -n ${NS} grsf-init-cert-manager --for condition=Available=True --timeout=300s
    CRD=ClusterIssuer && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

# remove the DNS job again
# if ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null; then
#   kubectl delete po -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} 
# fi

echo "wait for crossplane to be ready"
if kubectl get deploy -n grpl-system crossplane >/dev/null 2>&1; then 
    CRD=Provider && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

echo "wait for external-secrets to be ready"
if kubectl get deploy -n grpl-system grsf-init-external-secrets-webhook >/dev/null 2>&1; then 
    CRD=ExternalSecrets && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
    echo "wait for external-secrets to be ready"
    kubectl wait deployment -n ${NS} grsf-init-external-secrets-webhook --for condition=Available=True --timeout=300s
fi 


status_log $TYPE_SUCCESS "grsf-init is Installed"

echo 
echo ----
echo "Ready for grsf deployment"

helm_deploy grsf
status_log $TYPE_INFO "waiting for grsf to be ready"

echo "wait for providerconfigs to be ready"
sleep 10
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-civo) >/dev/null 2>&1; then 
    kubectl wait -n ${NS} provider.pkg.crossplane.io/provider-civo --for condition=Healthy=True --timeout=300s
    echo "wait for provider-civo to be ready"
    CRD=providerconfigs.civo.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 

for i in $(kubectl get pkg -n ${NS} -o name); do 
    kubectl wait -n ${NS} $i --for condition=Healthy=True --timeout=300s;
done
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-helm) >/dev/null 2>&1; then 
    CRD=providerconfigs.helm.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-kubernetes) >/dev/null 2>&1; then 
    CRD=providerconfigs.kubernetes.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 


status_log $TYPE_SUCCESS "grsf is Installed"

echo 
echo ----

helm_deploy grsf-config 
status_log $TYPE_INFO "waiting for grsf-config to be applied"

CRD=compositemanagedapis.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageduimodules.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageddatasources.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
for i in $(kubectl get xrd -o name); do 
  kubectl wait --for=condition=Offered $i;
done

status_log $TYPE_SUCCESS "grsf-config is Installed"

helm_deploy grsf-integration
status_log $TYPE_INFO "waiting for grsf-config to be ready"

echo 
echo ----
echo "enable ssl"
kubectl apply -f $GRPL_WORKDIR/files/clusterissuer.yaml
sleep 5
echo "check all crossplane packages are ready"
for i in $(kubectl get pkg -o name); do kubectl wait --for=condition=Healthy $i --timeout=300s; done

status_log $TYPE_SUCCESS "grsf-integration is Installed"

cli_log "cluster install END"


rm /tmp/values-override.yaml

status_log $TYPE_SUCCESS "Successfuly Installed grpl"


if [ "${INSTALL_KUBEBLOCKS}" == "true" ]; then
  status_log $TYPE_INFO "Waiting for kubeblocks to be installed it might take a while"
  wait
  status_log $TYPE_SUCCESS "kubeblocks is installed"
fi


if [ "${wait}" == "true" ]; then
  status_log $TYPE_INFO "Waiting for grpl to be ready"
  while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done && \
    sleep 5 && \
    kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s

  status_log $TYPE_SUCCESS "grpl is ready"
fi


kubectl apply -f $GRPL_WORKDIR/files/all-resource-clusterrole.yaml
kubectl apply -f $GRPL_WORKDIR/files/all-resource-clusterrolebinding.yaml


grpl c p
