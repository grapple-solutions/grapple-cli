#!/bin/bash
set -e
. "$GRPL_WORKDIR/utils/help_menus"
. "$GRPL_WORKDIR/utils/checks"

cli_help() {
  grpl_application_init_cli_help
  exit 0
}

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help

install_prerequisite

cli_log "application init BEGIN"
status_log $TYPE_INFO "application initialization is in progress"

# -------------------- first check for input params -----------------------

# valid arguments array
valid_args=(
    "PROJECT_NAME"
    "CREATE_REPO"
  )

# check if values are already passed form terminal
# if yes? then store then in the respective vars
extract_input_params_from_cli $valid_args "grpl a i h" $(echo "$@")

#check if input from params is valid or not
if [ "${PROJECT_NAME}" != "" ]; then 
  is_value_correct_wrt_regex $PROJECT_NAME $alphaNum_plus_hyphen_and_underscope_regex "Project name can only contain alpha numaric characters, '-'and '_' as special characters"
fi
PROJECT_NAME=$(if [ "${PROJECT_NAME}" != "" ]; then echo ${PROJECT_NAME}; else prompt_for_input_with_validation "Enter PROJECT_NAME: " "Provide project name" "$alphaNum_plus_hyphen_and_underscope_regex" "Project name can only contain alpha numaric characters, '-' and '_' as special characters"; fi) || exit $?
echo "project name: ${PROJECT_NAME}"

#check if input from params is valid or not
CREATE_REPO=$(if [ "${CREATE_REPO}" != "" ]; then echo ${CREATE_REPO}; else [ $TTY == "enabled" ] && gum choose "clone the repo" "create and clone the repo"; fi) || exit $?
if [ "${CREATE_REPO}" == "create and clone the repo" ] || [ "${CREATE_REPO}" == "true" ]; then CREATE_REPO="true"; fi

echo "create repo: ${CREATE_REPO}"

# ----------------------- params code ended ---------------------------

if ! ls $GRPL_WORKDIR | grep "$PROJECT_NAME" >/dev/null 2>&1; then

  # Check if the repo already exists in the GitHub account
  cli_log "checking if the repository already exists in your GitHub account"
  if gh repo view "$PROJECT_NAME" >/dev/null 2>&1; then
    # Repo exists, clone it
    status_log $TYPE_INFO "Repository already exists. Cloning the repository."
    check_and_install_git
    if ! eval "$(getGumSpinnerOrLogger "cloning repository" ) git clone \"https://github.com/${GITHUB_USERNAME}/${PROJECT_NAME}.git\" $PROJECT_NAME >/dev/null 2>&1"; then
      status_log $TYPE_ERROR "failed to clone the repository due to the following error"
      errMsg=$(git clone "https://github.com/${GITHUB_USERNAME}/${PROJECT_NAME}.git" $PROJECT_NAME)
      status_log $TYPE_ERROR "$errMsg"
      exit 1
    fi
  else
    # Repo does not exist, prompt to create it
    status_log $TYPE_WARNING "Repository does not exist in your GitHub account."
    if gum confirm "This repo does not exist in your GitHub account. Shall it be created?"; then
      # Create and clone the repository
      status_log $TYPE_INFO "Creating the repository on GitHub."
      check_and_install_gh
      if ! eval "$(getGumSpinnerOrLogger "creating repository" ) gh repo create $PROJECT_NAME --template grapple-solutions/grapple-template --clone --public >/dev/null 2>&1"; then
        status_log $TYPE_ERROR "failed to create the repository due to the following error"
        errMsg=$(gh repo create $PROJECT_NAME --template grapple-solutions/grapple-template --clone --public)
        status_log $TYPE_ERROR "$errMsg"
        exit 1
      fi
    else
      status_log $TYPE_ERROR "Repository creation canceled by the user."
      exit 1
    fi
  fi
  # Check if the repo already exists in the GitHub account
  cli_log "checking if the repository already exists in your GitHub account"
  if gh repo view "$PROJECT_NAME" >/dev/null 2>&1; then
    # Repo exists, clone it
    status_log $TYPE_INFO "Repository already exists. Cloning the repository."
    check_and_install_git
    if ! eval "$(getGumSpinnerOrLogger "cloning repository" ) git clone \"https://github.com/${GITHUB_USERNAME}/${PROJECT_NAME}.git\" $PROJECT_NAME >/dev/null 2>&1"; then
      status_log $TYPE_ERROR "failed to clone the repository due to the following error"
      errMsg=$(git clone "https://github.com/${GITHUB_USERNAME}/${PROJECT_NAME}.git" $PROJECT_NAME)
      status_log $TYPE_ERROR "$errMsg"
      exit 1
    fi
  else
    # Repo does not exist, prompt to create it
    status_log $TYPE_WARNING "Repository does not exist in your GitHub account."
    if gum confirm "This repo does not exist in your GitHub account. Shall it be created?"; then
      # Create and clone the repository
      status_log $TYPE_INFO "Creating the repository on GitHub."
      check_and_install_gh
      if ! eval "$(getGumSpinnerOrLogger "creating repository" ) gh repo create $PROJECT_NAME --template grapple-solutions/grapple-template --clone --public >/dev/null 2>&1"; then
        status_log $TYPE_ERROR "failed to create the repository due to the following error"
        errMsg=$(gh repo create $PROJECT_NAME --template grapple-solutions/grapple-template --clone --public)
        status_log $TYPE_ERROR "$errMsg"
        exit 1
      fi
    else
      status_log $TYPE_ERROR "Repository creation canceled by the user."
      exit 1
    fi
  fi

  
else
  status_log $TYPE_ERROR "failed to clone grapple template because a folder with this name already exist in the current directory"
  exit 1
fi




if ! awk -v repl="$PROJECT_NAME" '{gsub("grapple-template", repl)}1' "$PROJECT_NAME/README.md" > temp && mv temp "$PROJECT_NAME/README.md" >/dev/null 2>&1; then
  status_log $TYPE_ERROR "failed to replace $PROJECT_NAME with 'grapple-template' in README.md file of the  project '$PROJECT_NAME' due to following error"
  errMsg=$(awk -v repl="$PROJECT_NAME" '{gsub("grapple-template", repl)}1' "$PROJECT_NAME/README.md")
  status_log $TYPE_ERROR "$errMsg"
  exit 1
fi

cli_log "application init COMPLETED"
status_log $TYPE_SUCCESS "application initialization is complete"

