#!/bin/bash
set -e

. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"

# --------------------------------- Functions ------------------------------------------

cli_help() {
  grpl_cluster_install_cli_help
  exit 0
}

# --------------------------------- CODE ------------------------------------------

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help


NS=grpl-system
awsregistry="p7h7z5g3"

cli_log "cluster install BEGIN"
status_log $TYPE_INFO "Installation of grpl is in progress"


# valid arguments array
valid_args=(
    "TARGET_PLATFORM"
    "GRAPPLE_VERSION"
    "AUTO_CONFIRM"
    "KUBE_CONTEXT"
    "CIVO_REGION"
    "CIVO_CLUSTER"
    "CIVO_CLUSTER_ID"
    "CIVO_EMAIL_ADDRESS"
    "CIVO_API_KEY"
    "CLUSTER_IP"
    "GRAPPLE_DNS"
    "ORGANIZATION"
    "EMAIL"
  )
# check if values are already passed form terminal
# if yes? then store then in the respective vars
extract_input_params_from_cli $valid_args "grpl c i h" $(echo "$@")


# verify install target platform
# if TARGET_PLATFORM is provided using CLI then we need to check if valid TARGET_PLATFORM was provided or not
if [ "${TARGET_PLATFORM}" != "" ]; then 
  is_correct_target_platform_provided $TARGET_PLATFORM 
fi
TARGET_PLATFORM=$(if [ "${TARGET_PLATFORM}" != "" ]; then echo ${TARGET_PLATFORM}; else gum choose $Minikube $CIVO $Kubernetes $Kubefirst; fi)
echo "selected target platform: ${TARGET_PLATFORM}"

if [ "${ORGANIZATION}" == "" ]; then 
  ORGANIZATION="grapple solutions AG"
fi

if [ "${EMAIL}" != "" ]; then 
  is_value_correct_wrt_regex $EMAIL $email_regex "Invalid email address format. Please try again"
else 
  EMAIL="info@grapple-solutions.com"
fi



# if CIVO, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $CIVO ]; then

  # first check if civo is installed or not, if not? then install it
  check_and_install_civo

  if [ "${CIVO_API_KEY}" == "" ] && grep '"apikeys":{}' ~/.civo.json && [ $TTY == "enabled" ]; then
    CIVO_API_KEY=$(prompt_for_input_with_validation "Enter CIVO API KEY: " "Provide the civo api key to be used - valide api key is required" "$non_empty_regex" "Invalid api key format. Please try again." || exit $?)
  fi

  if [ "${CIVO_API_KEY}" != "" ]; then
    civo apikey add grapple $CIVO_API_KEY
    civo apikey current grapple
  fi

  if [ "${CIVO_REGION}" != "" ]; then 
    is_correct_civo_region_provided $CIVO_REGION 
  fi

  CIVO_REGION=$(if [ "${CIVO_REGION}" != "" ]; then echo ${CIVO_REGION}; else [ $TTY == "enabled" ] &&  gum spin --title "fetching civo regions" --show-output -- civo region ls -o custom -f code | gum choose; fi)
  civo region use ${CIVO_REGION} | true

  if [ "${CIVO_CLUSTER}" != "" ]; then 
    is_correct_civo_cluster_provided $CIVO_CLUSTER 
  fi
  CIVO_CLUSTER=$(if [ "${CIVO_CLUSTER}" != "" ]; then echo ${CIVO_CLUSTER}; else if [ $TTY == "enabled" ] && gum spin --title "fetching civo clusters" -- civo k8s ls -o custom -f name > /dev/null; then civo k8s ls -o custom -f name | gum choose; else echo ""; fi; fi)
  echo "selected civo cluster: ${CIVO_CLUSTER}"

  if ! eval "$(getGumSpinnerOrLogger "switching to ${CIVO_CLUSTER}") civo k8s config ${CIVO_CLUSTER} --save --switch"; then
    if ! eval "$(getGumSpinnerOrLogger "checking if cluster is accessible") kubectl get ns"; then
      status_log $TYPE_ERROR "Failed to switch to ${CIVO_CLUSTER} due to following reason"
      # following is to show the reason for failure
      reason=$(civo k8s config ${CIVO_CLUSTER} --save --switch)
      status_log $TYPE_ERROR "${reason}"
      exit 1
    fi
  fi

  extract_kubectl_cli_version

  # if a CIVO cluster was selected, pre-set the configuration
  CIVO_CLUSTER_ID=$(eval "$(getGumSpinnerOrLogger "fetching cluster id of ${CIVO_CLUSTER} cluster") civo k8s show ${CIVO_CLUSTER} -o custom -f ID")

  # check if a full domain-name was passed in GRAPPLE_DNS
  if [[ $GRAPPLE_DNS != "" ]] && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null ;then
      status_log $TYPE_INFO "DNS name ${GRAPPLE_DNS} is not a FQDN"
      GRAPPLE_DOMAIN=".grapple-demo.com"
  fi

  if [ "${GRAPPLE_DNS}" == "" ]; then 
      GRAPPLE_DNS=${CIVO_CLUSTER}
      GRAPPLE_DOMAIN=".grapple-demo.com"
  fi
  

  CIVO_CLUSTER_NAME=${CIVO_CLUSTER}

  CIVO_CLUSTER_ID=$(if [ "${CIVO_CLUSTER_ID}" != "" ]; then echo ${CIVO_CLUSTER_ID}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter CIVO_CLUSTER_ID: " "Provide an ID for the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
  echo "selected civo cluster ID: ${CIVO_CLUSTER_ID}"

  CIVO_CLUSTER_NAME=$(if [ "${CIVO_CLUSTER_NAME}" != "" ]; then echo ${CIVO_CLUSTER_NAME}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter CIVO_CLUSTER_NAME: " "Provide an name for the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
  echo "selected civo cluster name: ${CIVO_CLUSTER_NAME}"

  CLUSTER_IP=$(if [ "${CLUSTER_IP}" != "" ]; then echo ${CLUSTER_IP}; else civo k8s show ${CIVO_CLUSTER} -o custom -f "MasterIP"; fi) || exit $?
  echo "selected civo master ip: ${CLUSTER_IP}"

  #check if input from params is valid or not
  if [ "${CIVO_EMAIL_ADDRESS}" != "" ]; then 
    is_value_correct_wrt_regex $CIVO_EMAIL_ADDRESS $email_regex "Invalid email address format. Please try again"
  fi
  CIVO_EMAIL_ADDRESS=$(if [ "${CIVO_EMAIL_ADDRESS}" != "" ]; then echo ${CIVO_EMAIL_ADDRESS}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter CIVO_EMAIL_ADDRESS: " "Provide the email address to be used - valide email address is required" "$email_regex" "Invalid email address format. Please try again."; fi) || exit $?
  echo "selected civo email address: ${CIVO_EMAIL_ADDRESS}"
  EMAIL=$CIVO_EMAIL_ADDRESS
  if [[ $ORGANIZATION == "" ]]; then
    ORGANIZATION=$(echo "${CIVO_EMAIL_ADDRESS}" | cut -d'@' -f2)
  fi

fi

# if Kubernetes, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $Kubernetes ]; then
  # check if a full domain-name was passed in GRAPPLE_DNS
  if [[ $GRAPPLE_DNS != "" ]] && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null ;then
      status_log $TYPE_INFO "DNS name ${GRAPPLE_DNS} is not a FQDN"
      GRAPPLE_DOMAIN=".grapple-demo.com"
  fi
  if [ "${KUBE_CONTEXT}" == $CURRENT_CONTEXT ] || [ "${KUBE_CONTEXT}" == "" ]; then
    KUBE_CONTEXT=$(kubectl config current-context)
  fi
  KUBE_CONTEXT=$(if [ "${KUBE_CONTEXT}" != "" ]; then echo ${KUBE_CONTEXT}; else kubectl config get-contexts -o name | gum choose; fi)

  CLUSTER_IP=$(if [ "${CLUSTER_IP}" != "" ]; then echo ${CLUSTER_IP}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter CLUSTER_IP: " "Provide the IP of the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
  echo "kuberenetes cluster ip: ${CLUSTER_IP}"

fi

if [ "${TARGET_PLATFORM}" = $Minikube ]; then

  status_log $TYPE_INFO "going to install and run minikube"
  # first check if minikube is installed or not, if not? then install it
  check_and_install_minikube

  # check if minikube cluster is running or not, if not? then start it
  if ! minikube status | grep "host: Running"; then
      echo "Minikube is not running. Starting Minikube..."
      if ! eval "$(getGumSpinnerOrLogger "minikube is not running, now starting minikube") minikube start"; then
        status_log $TYPE_ERROR "Error: minikube failed to start becasue docker or any driver service is not running. Details are listed below"
        minikube start >&2
      fi
  fi

  # switch to minikube
  kubectl config use-context minikube
  extract_kubectl_cli_version

  if ! minikube addons list | grep enabled | grep ingress >/dev/null 2>&1; then
    if [ "${AUTO_CONFIRM}" != "true" ]; then
      gum confirm "Configure dns for your minikube?" || (echo "grapple cannot be installed without dns / ingress configuration" &&  status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
    fi
    echo "enabling ingress addons for minikube"
    status_log $TYPE_INFO "enabling ingress addons for minikube"
    minikube addons enable ingress
    minikube addons enable ingress-dns
  fi 

  status_log $TYPE_INFO "testing domain, this may take upto 5mins"
  if ! grep -r $(minikube ip) /etc/resolver/ >/dev/null 2>&1; then
    echo "domain test
    nameserver $(minikube ip)
    search_order 1
    timeout 5" > /tmp/minikube-test

    if [ "${AUTO_CONFIRM}" != "true" ]; then
      status_log $TYPE_INFO "please run the following commands before clicking on 'confirm':"
    else
      status_log $TYPE_INFO "going to run following command"
    fi
  
    gum style \
      --foreground 212 --border-foreground 212 --border double \
      --align center --width 100 --margin "1 2" --padding "2 4" \
      'sudo cp /tmp/minikube-test /etc/resolver/minikube-test' >&2

    if [ "${AUTO_CONFIRM}" != "true" ]; then
      gum confirm "Proceed with ingress configuration?" || (echo "grapple cannot be installed without dns / ingress configuration"  &&  status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
    else
      sudo cp /tmp/minikube-test /etc/resolver/minikube-test
    fi
  fi 

  GRAPPLE_DNS=test
  GRAPPLE_DOMAIN=""
  

fi

# if Kubefirst, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $Kubefirst ]; then

### disable all checks if TARGET_PLATFORM = Kubefirst, as DNS managed by Kubefirst
#  # check if a full domain-name was passed in GRAPPLE_DNS
#  if [[ $GRAPPLE_DNS != "" ]] && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null ;then
#      status_log $TYPE_INFO "DNS name ${GRAPPLE_DNS} is not a FQDN"
#      GRAPPLE_DOMAIN=".grapple-demo.com"
#  fi
#
#  CLUSTER_IP=$(if [ "${CLUSTER_IP}" != "" ]; then echo ${CLUSTER_IP}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter CLUSTER_IP: " "Provide the IP of the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
#  echo "kuberenetes cluster ip: ${CLUSTER_IP}"

  echo "DNS: $GRAPPLE_DNS"

fi

# Prompt for GRAPPLE_DNS, CIVO_CLUSTER_ID, etc. using gum
if [ "${TARGET_PLATFORM}" != $Minikube ]; then
  GRAPPLE_DNS=$(if [ "${GRAPPLE_DNS}" != "" ]; then echo ${GRAPPLE_DNS}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter GRAPPLE_DNS: " "Valid DNS name is required" "$grpl_dns_regex" "Invalid DNS name format. Please try again."; fi) || exit $?
  echo "installing dns: ${GRAPPLE_DNS}"
fi

if [ "${GRAPPLE_VERSION}" != "" ]; then 
  is_correct_grapple_version_provided $GRAPPLE_VERSION 
fi 
GRAPPLE_VERSION=$(if [ "${GRAPPLE_VERSION}" != "" ]; then echo ${GRAPPLE_VERSION}; else [ $TTY == "enabled" ] && gum choose "${GRAPPLE_AVAILABLE_VERSIONS[@]}"; fi) || exit $? # not sure if both GRAPPLE_VERSION & VERSION are needed
echo "installing grapple version: ${GRAPPLE_VERSION}"

# VERSION=$(prompt_for_input_with_validation "Enter version of the grapple solution framework: " "Semver version is expected. Default value if empty: 0.2.0" "$non_empty_regex" "Version cannot be empty." "0.2.0") || exit $?

# The script then proceeds to dynamically generate values-override.yaml with user inputs

complete_domain="" 
if host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null;then
  complete_domain=$GRAPPLE_DNS
else 
  complete_domain=${GRAPPLE_DNS}${GRAPPLE_DOMAIN}
fi
cat <<EOF > /tmp/values-override.yaml
# Default values for grsf-init.

clusterdomain: ${complete_domain}

# Configuration
config:
  email: "${EMAIL}"
  organization: ${ORGANIZATION}
  clusterdomain: ${complete_domain}
  grapiversion: "0.0.1"
  gruimversion: "0.0.1"
  dev: "false"
  ssl: "false"
  sslissuer: "letsencrypt-grapple-demo"
  CIVO_CLUSTER_ID: ${CIVO_CLUSTER_ID}
  CIVO_CLUSTER_NAME: ${CIVO_CLUSTER_NAME}
  CIVO_REGION: ${CIVO_REGION}
  CIVO_EMAIL_ADDRESS: ${CIVO_EMAIL_ADDRESS}
  CIVO_MASTER_IP: ${CLUSTER_IP}
  GRAPPLE_DNS: ${complete_domain}
  GRAPPLE_VERSION: ${GRAPPLE_VERSION}
  GRAPPLE_LICENSE: "free"
# Additional configurations omitted for brevity
EOF

cat /tmp/values-override.yaml

# Use gum to confirm before proceeding
if [ "${AUTO_CONFIRM}" != "true" ]; then

  status_log $TYPE_DEFAULT "Going to deploy grpl on ${TARGET_PLATFORM} with following configurations"  
  if [ "${TARGET_PLATFORM}" == $CIVO ]; then 
    
    status_log $TYPE_DEFAULT "CIVO_CLUSTER_ID: ${CIVO_CLUSTER_ID}"
    status_log $TYPE_DEFAULT "CIVO_CLUSTER_NAME: ${CIVO_CLUSTER_NAME}"
    status_log $TYPE_DEFAULT "CIVO_REGION: ${CIVO_REGION}"
    status_log $TYPE_DEFAULT "CIVO_EMAIL_ADDRESS: ${CIVO_EMAIL_ADDRESS}"
    status_log $TYPE_DEFAULT "CLUSTER_IP: ${CLUSTER_IP}"
  fi

  status_log $TYPE_DEFAULT "GRAPPLE_VERSION: ${GRAPPLE_VERSION}"
  status_log $TYPE_DEFAULT "GRAPPLE_DNS: ${complete_domain}"
  status_log $TYPE_DEFAULT "ORGANIZATION: ${ORGANIZATION}"
  status_log $TYPE_DEFAULT "EMAIL: ${EMAIL}"

  gum confirm "Proceed with deployment using the values above?" || (status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
fi


# Define helm_deploy function 
if [ "$values_yaml_file_names" != "" ]; then
  values_yaml_file_names=$(echo "$values_yaml_file_names" | awk -v grpl_workdir="$GRPL_WORKDIR" '{gsub("values-templates", "\"" grpl_workdir "/values-templates\"")}1')
  values_yaml_file_names=$(echo "$values_yaml_file_names" | sed 's/"//g')
fi
loggedOut="false"
helm_deploy() {

  i=$1
  v=${2:-$GRAPPLE_VERSION}
  if [ "$v" != "" ]; then 
    version="--version ${v}"
  else
    version=""
  fi
    

  echo "Deploying $i with version $version"

  if [ "${TARGET_PLATFORM}" = $Kubefirst ]; then
    Kubefirst_values=" -f ${GRPL_WORKDIR}/template-files/values-kubefirst.yaml "
  else
    Kubefirst_values=""
  fi

  if ! eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $Kubefirst_values" >/dev/null; then
    
    if [ "$loggedOut" = "true" ]; then
      exit 1
    fi

    if helm registry logout public.ecr.aws/${awsregistry} >/dev/null 2>&1; then
      loggedOut="true"
      status_log $TYPE_INFO "logged out of public.ecr.aws/${awsregistry} registry"
      helm_deploy $i
    else 
      echo "${i} Failed to Installed"
      status_log $TYPE_ERROR "${i} Failed to Installed due to following error"
      eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $Kubefirst_values"  >&2  
      exit 1
    fi
  fi

}

if ([ "${TARGET_PLATFORM}" = $CIVO ] || [ "${TARGET_PLATFORM}" = $Kubernetes ]) && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null; then
  status_log $TYPE_INFO "Deploying grpl-dns-aws-route53-upsert"
  kubectl delete po -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} >/dev/null 2>&1 | true
  kubectl run -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} --image=grpl/dns-aws-route53-upsert --env="GRAPPLE_DNS=${complete_domain}" --env="CIVO_MASTER_IP=${CLUSTER_IP}" --restart=Never
fi

echo 
echo ----

helm_deploy grsf-init 
status_log $TYPE_INFO "waiting for grsf-init to be ready"

echo "wait for cert-manager to be ready"
if helm get -n kube-system notes traefik >/dev/null 2>&1; then 
    CRD=Middleware && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi
if kubectl get deploy -n grpl-system grsf-init-cert-manager >/dev/null 2>&1; then 
    kubectl wait deployment -n ${NS} grsf-init-cert-manager --for condition=Available=True --timeout=300s
    CRD=ClusterIssuer && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

# remove the DNS job again
if [ "${TARGET_PLATFORM}" = $CIVO ]  && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null; then
  kubectl delete po -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} 
fi

echo "wait for crossplane to be ready"
if kubectl get deploy -n grpl-system crossplane >/dev/null 2>&1; then 
    CRD=Provider && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

echo "wait for external-secrets to be ready"
if kubectl get deploy -n grpl-system grsf-init-external-secrets-webhook >/dev/null 2>&1; then 
    CRD=ExternalSecrets && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
    echo "wait for external-secrets to be ready"
    kubectl wait deployment -n ${NS} grsf-init-external-secrets-webhook --for condition=Available=True --timeout=300s
fi 


status_log $TYPE_SUCCESS "grsf-init is Installed"

echo 
echo ----
echo "Ready for grsf deployment"

helm_deploy grsf
status_log $TYPE_INFO "waiting for grsf to be ready"

echo "wait for providerconfigs to be ready"
sleep 10
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-civo) >/dev/null 2>&1; then 
    kubectl wait -n ${NS} provider.pkg.crossplane.io/provider-civo --for condition=Healthy=True --timeout=300s
    echo "wait for provider-civo to be ready"
    CRD=providerconfigs.civo.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 

for i in $(kubectl get pkg -n ${NS} -o name); do 
    kubectl wait -n ${NS} $i --for condition=Healthy=True --timeout=300s;
done
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-helm) >/dev/null 2>&1; then 
    CRD=providerconfigs.helm.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-kubernetes) >/dev/null 2>&1; then 
    CRD=providerconfigs.kubernetes.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 


status_log $TYPE_SUCCESS "grsf is Installed"

echo 
echo ----

helm_deploy grsf-config 
status_log $TYPE_INFO "waiting for grsf-config to be applied"

CRD=compositemanagedapis.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageduimodules.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageddatasources.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
for i in $(kubectl get xrd -o name); do 
  kubectl wait --for=condition=Offered $i;
done

status_log $TYPE_SUCCESS "grsf-config is Installed"

helm_deploy grsf-integration
status_log $TYPE_INFO "waiting for grsf-config to be ready"

echo 
echo ----
echo "enable ssl"
kubectl apply -f $GRPL_WORKDIR/files/clusterissuer.yaml

echo "check all crossplane packages are ready"
for i in $(kubectl get pkg -o name); do kubectl wait --for=condition=Healthy $i; done

status_log $TYPE_SUCCESS "grsf-integration is Installed"

cli_log "cluster install END"


rm /tmp/values-override.yaml

status_log $TYPE_SUCCESS "Successfuly Installed grpl"
