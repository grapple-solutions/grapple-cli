#!/bin/bash
set -e

. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"

# --------------------------------- Functions ------------------------------------------

# Print help menu for grpl cluster install and exit
cli_help() {
  grpl_cluster_install_cli_help
  exit 0
}

# --------------------------------- CODE ------------------------------------------

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help


NS=grpl-system
awsregistry="p7h7z5g3"
SSL_ENABLE="false"
SSL_ISSUER="letsencrypt-grapple-demo"
cli_log "cluster install BEGIN"

# valid arguments array
valid_args=(
    "TARGET_PLATFORM"
    "GRAPPLE_VERSION"
    "AUTO_CONFIRM"
    "KUBE_CONTEXT"
    "CIVO_REGION"
    "CIVO_CLUSTER"
    "CIVO_CLUSTER_ID"
    "CIVO_EMAIL_ADDRESS"
    "CIVO_API_KEY"
    "CLUSTER_IP"
    "GRAPPLE_DNS"
    "ORGANIZATION"
    "EMAIL"
    "GITHUB_USERNAME"
    "GITLAB_USERNAME"
    "KUBEFIRST_CLOUD_PROVIDER"
    "KUBEFIRST_CLOUD_REGION"
    "KUBEFIRST_CLUSTER_ID"
    "KUBEFIRST_CLUSTER_NAME"
    "INSTALL_KUBEBLOCKS"
    "wait"
  )
# check if values are already passed form terminal
# if yes? then store then in the respective vars
help_menu_cmd="grpl cluster install help"
extract_input_params_from_cli $valid_args "${help_menu_cmd}" "$@"

status_log $TYPE_INFO "Installation of grpl is in progress"

#-------------Functions-------------------

patch_coredns() {
  default_error="Failed to patch CoreDNS ConfigMap or NodeHosts because: "
  
  # Step 1: Extract the control-plane ip from NodeHosts
  first_ip=$(kubectl get cm -n kube-system coredns -o jsonpath='{.data.NodeHosts}' | awk '/-server-0/ {print $1}')
  # Check if kubectl command succeeded
  if [ $? -ne 0 ]; then
    status_log $TYPE_ERROR "$default_error Failed to retrieve CoreDNS ConfigMap or NodeHosts."
    exit 1
  fi

  # Check if the first IP was extracted successfully
  if [[ -z "$first_ip" ]]; then
    status_log $TYPE_ERROR  "$default_error No IP address found in NodeHosts."
    exit 1
  fi

  # Step 2: Use Bash string manipulation to replace the last octet with 1
  DOCKER_API_GATEWAY="${first_ip%.*}.1"

  # Check if the modification was successful
  if [[ -z "$DOCKER_API_GATEWAY" ]]; then
    status_log $TYPE_ERROR "$default_error Failed to get Docker gateway IP."
    exit 1
  fi
  export DOCKER_API_GATEWAY=$DOCKER_API_GATEWAY

  # Step 4: Move template file to /tmp and substitute environment variables

  template_file_src="$GRPL_WORKDIR/files/coredns-custom.yaml"
  template_file_dest="/tmp/coredns-custom.yaml"
  tmp_file_dest="/tmp/tmp_coredns_custom.yaml"


  # Move the file and substitute environment variables using envsubst
  cp "$template_file_src" "$template_file_dest"
  if [ $? -ne 0 ]; then
    status_log $TYPE_ERROR "$default_error Failed to copy template file."
    exit 1
  fi

  # Substitute environment variables and overwrite the destination file
  check_and_install_gettext
  envsubst < "$template_file_dest" > "$tmp_file_dest" && mv "$tmp_file_dest" "$template_file_dest"
  if [ $? -ne 0 ]; then
    status_log $TYPE_ERROR "$default_error Failed to substitute environment variables in the template file."
    exit 1
  fi

  # Step 5: Check if the coredns-patch ConfigMap exists, if not, create it
  if ! kubectl apply -f $template_file_dest > /dev/null 2>&1; then
    status_log $TYPE_ERROR "$default_error Failed to create coredns-patch ConfigMap."
    exit 1
  fi

  if ! kubectl rollout restart deployment coredns -n kube-system > /dev/null 2>&1; then
    status_log $TYPE_ERROR "$default_error Failed to rollout restart deployment coredns."
    exit 1
  fi


  status_log $TYPE_SUCCESS "Successfully created ConfigMap coredns-custom"

}



extract_email_from_github_username() {
  check_and_install_jq

  # Fetch the GitHub user's details (name) using the GitHub username
  if [[ "$GITHUB_TOKEN" != "" ]]; then
    user_details=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/users/$GITHUB_USERNAME")
  else
    user_details=$(curl -s "https://api.github.com/users/$GITHUB_USERNAME")
  fi
  USER_NAME=$(echo "$user_details" | jq -r '.name')
  USER_ID=$(echo "$user_details" | jq -r '.id')

  # Fetch 100 events per page
  per_page=100
  page=1

  # Fetch events
  if [[ -n "$GITHUB_TOKEN" ]]; then
    response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
      "https://api.github.com/users/$GITHUB_USERNAME/events/public?per_page=$per_page&page=$page")
  else
    response=$(curl -s "https://api.github.com/users/$GITHUB_USERNAME/events/public?per_page=$per_page&page=$page")
  fi

  # Validate the response
  if ! echo "$response" | jq empty > /dev/null 2>&1; then
    echo -e "\nError: Invalid JSON response from GitHub"
    return
  fi

  # Check if the response is not an array and then check for the "message" key
  is_array=$(echo "$response" | jq 'if type == "array" then true else false end')

  if [ "$is_array" == "false" ]; then
    # If it's not an array, check for the "message" key
    error_message=$(echo "$response" | jq -r '.message // empty')
    if [ -n "$error_message" ]; then
      echo -e "\nError: $error_message"
      return
    fi
  fi

  # Check if response is empty
  if [ "$(echo "$response" | jq length)" -eq 0 ]; then
    echo -e "\nNo events found."
    return
  fi

  response=$(echo "$response" | tr -d '[:space:]')


  # Loop through each event to find PushEvent commits
  for row in $(echo "$response" | jq -c '.[] | select(.type == "PushEvent")'); do
    for commit in $(echo "$row" | jq -c '.payload.commits[]'); do
      commit_name=$(echo "$commit" | jq -r '.author.name')
      commit_email=$(echo "$commit" | jq -r '.author.email')
      if { [ "$commit_name" == "$GITHUB_USERNAME" ] || [ "$commit_name" == "$USER_NAME" ]; } && [[ "$commit_email" != *"noreply"* ]]; then
        EMAIL=$commit_email
        break 2
      fi
    done
  done

  # Output the result
  if [ -n "$EMAIL" ]; then
    echo "Email found: $EMAIL"
  else
    status_log $TYPE_INFO "Unable to find user email for $GITHUB_USERNAME"
    EMAIL="$USER_ID+$GITHUB_USERNAME@users.noreply.github.com"
    status_log $TYPE_INFO "Using backup email: $EMAIL"
  fi
}



extract_email_from_gitlab_username() {
  check_and_install_jq

  # Fetch the GitLab user ID and name by username
  if [[ "$GITLAB_TOKEN" != "" ]]; then
    user_details=$(curl -s -H "PRIVATE-TOKEN: $GITLAB_TOKEN" "https://gitlab.com/api/v4/users?username=$GITLAB_USERNAME")
  else 
    user_details=$(curl -s "https://gitlab.com/api/v4/users?username=$GITLAB_USERNAME")
  fi

  USER_ID=$(echo "$user_details" | jq -r '.[0].id')
  USER_NAME=$(echo "$user_details" | jq -r '.[0].name')

  if [ -z "$USER_ID" ]; then
    echo "Error: No Email found for $GITLAB_USERNAME"
    return
  fi

  # Fetch up to 100 events in a single request
  per_page=100
  page=1

  # Fetch events
  if [[ "$GITLAB_TOKEN" != "" ]]; then
    response=$(curl -s -H "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "https://gitlab.com/api/v4/users/$USER_ID/events?per_page=$per_page&page=$page")
  else
    response=$(curl -s "https://gitlab.com/api/v4/users/$USER_ID/events?per_page=$per_page&page=$page")
  fi

  # Check if response is empty or contains an error
  if [ -z "$response" ]; then
    echo "Error: Empty response from GitLab API"
    return
  fi

  # Validate if response is JSON
  if ! echo "$response" | jq empty > /dev/null 2>&1; then
    echo "Error: Invalid JSON response from GitLab"
    return
  fi

  # Check if the response is not an array and then check for the "message" key
  is_array=$(echo "$response" | jq 'if type == "array" then true else false end')

  if [ "$is_array" == "false" ]; then
    # If it's not an array, check for the "error" key
    error_message=$(echo "$response" | jq -r '.error // empty')
    if [ -n "$error_message" ]; then
      echo "Error: $error_message"
      return
    fi
  fi

  # Check if no events are available
  if [ "$(echo "$response" | jq length)" -eq 0 ]; then
    echo "No events found for user."
    return
  fi


  response=$(echo "$response" | tr -d '[:space:]')


  # Loop through each event in the response to filter "pushednew" action_name
  for row in $(echo "$response" | jq -c '.[] | select(.action_name == "pushednew")'); do
    project_id=$(echo "$row" | jq -r '.project_id')
    commit_sha=$(echo "$row" | jq -r '.push_data.commit_to')

    # Fetch commit info
    commit_info=$(curl -s -H "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "https://gitlab.com/api/v4/projects/$project_id/repository/commits/$commit_sha")

    # Check if commit info contains an error
    commit_error=$(echo "$commit_info" | jq -r '.error // empty')
    if [ -n "$commit_error" ]; then
      echo "Error fetching commit info: $commit_error"
      continue
    fi

    commit_name=$(echo "$commit_info" | jq -r '.author_name')
    commit_email=$(echo "$commit_info" | jq -r '.author_email')

    if { [ "$commit_name" == "$GITLAB_USERNAME" ] || [ "$commit_name" == "$USER_NAME" ]; } && [[ "$commit_email" != *"noreply"* ]]; then
      EMAIL=$commit_email
      break
    fi
  done

  # Output the result
  if [ -n "$EMAIL" ]; then
    echo "Email found: $EMAIL"
  else
    status_log $TYPE_INFO "Unable to find user email for $GITLAB_USERNAME"
    EMAIL="$USER_ID+$GITLAB_USERNAME@users.noreply.gitlab.com"
    status_log $TYPE_INFO "Using backup email: $EMAIL"
  fi
}


kubeblocks_installation() {
  if ! kbcli; then
      echo "installing kbcli"
      check_and_install_kbcli
  fi

  if ! kubectl get deployment kubeblocks -n kb-system; then
    echo "checking kubeblocks"
    check_and_install_kubeblocks

    echo "waiting for configs to apply"
    for i in $(kubectl get clusterversion -o name); do 
      kubectl get $i -o yaml | sed "s,infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com,docker.io,g" | kubectl apply -f - >/dev/null 2>&1; 
    done
  else 
    echo "kubeblocks is already installed"
  fi
}


#------------ TARGET_PLATFORM Input-----------

# if TARGET_PLATFORM is provided using CLI then we need to check if valid TARGET_PLATFORM was provided or not
check_if_param_avaiable_in_non_interactive_mode "TARGET_PLATFORM" "${TARGET_PLATFORM}" "${help_menu_cmd}"
if [ "${TARGET_PLATFORM}" != "" ]; then 
  is_correct_target_platform_provided $TARGET_PLATFORM 
fi
TARGET_PLATFORM=$(if [ "${TARGET_PLATFORM}" != "" ]; then echo ${TARGET_PLATFORM}; else gum choose $Minikube $CIVO $Kubernetes $Kubefirst; fi)
echo "selected target platform: ${TARGET_PLATFORM}"


# if CIVO, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $CIVO ]; then

  # first check if civo is installed or not, if not? then install it
  check_and_install_civo
  

#------------ CIVO_API_KEY Input-----------
  
  if [ "${CIVO_CLUSTER_ID}" != "" ]; then
    echo "Running inside a CIVO Kubernetes cluster"
    INSIDE_CIVO_CLUSTER=true
  else 
    INSIDE_CIVO_CLUSTER=false
  fi

  if [ $INSIDE_CIVO_CLUSTER == "false" ] && [ "${CIVO_API_KEY}" == "" ] && grep '"apikeys":{}' ~/.civo.json >/dev/null 2>&1 && [[ $TTY == "enabled" ]]; then
    CIVO_API_KEY=$(prompt_for_input_with_validation "Enter CIVO API KEY: " "Provide the civo api key to be used - valide api key is required" "$non_empty_regex" "Invalid api key format. Please try again." || exit $?)
  fi

  if [ "${CIVO_API_KEY}" != "" ]; then
    civo apikey add grapple $CIVO_API_KEY
    civo apikey current grapple
  fi

#------------ CIVO_REGION Input-----------

  check_if_param_avaiable_in_non_interactive_mode "CIVO_REGION" "${CIVO_REGION}" "${help_menu_cmd}"
  if [ $INSIDE_CIVO_CLUSTER == "false" ] && [ "${CIVO_REGION}" != "" ] && [ $TTY == "enabled" ]; then 
    is_correct_civo_region_provided $CIVO_REGION 
  fi
  CIVO_REGION=$(if [ "${CIVO_REGION}" != "" ]; then echo ${CIVO_REGION}; else gum spin --title "fetching civo regions" --show-output -- civo region ls -o custom -f code | gum choose; fi)
  civo region use ${CIVO_REGION} | true

#------------ CIVO_CLUSTER Input-----------

  check_if_param_avaiable_in_non_interactive_mode "CIVO_CLUSTER" "${CIVO_CLUSTER}" "${help_menu_cmd}"
  if [ $INSIDE_CIVO_CLUSTER == "false" ] && [ "${CIVO_CLUSTER}" != "" ] && [ $TTY == "enabled" ]; then 
    is_correct_civo_cluster_provided $CIVO_CLUSTER 
  fi
  CIVO_CLUSTER=$(if [ "${CIVO_CLUSTER}" != "" ]; then echo ${CIVO_CLUSTER}; else if gum spin --title "fetching civo clusters" -- civo k8s ls -o custom -f name > /dev/null; then civo k8s ls -o custom -f name | gum choose; else echo ""; fi; fi)
  echo "selected civo cluster: ${CIVO_CLUSTER}"

  if [ $INSIDE_CIVO_CLUSTER == "false" ] && [ $TTY == "enabled" ] && ! eval "$(getGumSpinnerOrLogger "switching to ${CIVO_CLUSTER}") civo k8s config ${CIVO_CLUSTER} --save --switch"; then
    if ! eval "$(getGumSpinnerOrLogger "checking if cluster is accessible") kubectl get ns"; then
      status_log $TYPE_ERROR "Failed to switch to ${CIVO_CLUSTER} due to following reason"
      # following is to show the reason for failure
      reason=$(civo k8s config ${CIVO_CLUSTER} --save --switch)
      status_log $TYPE_ERROR "${reason}"
      exit 1
    fi
  fi

  extract_kubectl_cli_version

#------------ CIVO_CLUSTER_ID Input-----------

  # if a CIVO cluster was selected, pre-set the configuration
  check_if_param_avaiable_in_non_interactive_mode "CIVO_CLUSTER_ID" "${CIVO_CLUSTER_ID}" "${help_menu_cmd}"
  CIVO_CLUSTER_ID=$(if [ "${CIVO_CLUSTER_ID}" != "" ]; then echo ${CIVO_CLUSTER_ID}; else eval "$(getGumSpinnerOrLogger "fetching cluster id of ${CIVO_CLUSTER} cluster") civo k8s show ${CIVO_CLUSTER} -o custom -f ID"; fi)

#------------ CLUSTER_IP Input-----------

  if [ "${CLUSTER_IP}" == "" ] && [ $INSIDE_CIVO_CLUSTER == "true" ]; then 
      status_log $TYPE_INFO "Retrieving cluster IP from kubectl cluster-info"
      status_log $TYPE_INFO "Waiting for cluster IP to be ready (30 seconds max)"
      
      TIMEOUT=30
      ELAPSED=0

      while [ "${CLUSTER_IP}" == "" ] && [ $ELAPSED -lt $TIMEOUT ]; do
          # Loop through all nodes and check for ExternalIP
          for node in $(kubectl get nodes -o jsonpath='{.items[*].metadata.name}'); do
              CLUSTER_IP=$(kubectl get node $node -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}')
              if [ "${CLUSTER_IP}" != "" ]; then
                  break  # Exit the loop as soon as an ExternalIP is found
              fi
          done

          if [ "${CLUSTER_IP}" == "" ]; then
              echo -n "." >&2
              sleep 10  # Wait for 10 seconds before retrying
              ((ELAPSED+=10))
          fi
      done

      if [ "${CLUSTER_IP}" == "" ]; then
          status_log $TYPE_INFO ""
          status_log $TYPE_INFO "Unable to retrieve cluster IP within ${TIMEOUT} seconds"
      fi

      sleep 2  # Pause briefly before proceeding
  else
      CLUSTER_IP=$(if [ "${CLUSTER_IP}" != "" ]; then echo ${CLUSTER_IP}; else civo k8s show ${CIVO_CLUSTER} -o custom -f "MasterIP"; fi) || exit $?
      echo "selected civo master ip: ${CLUSTER_IP}"
  fi

#------------ GRAPPLE_DNS Input-----------

  # check if a full domain-name was passed in GRAPPLE_DNS
  if [[ $GRAPPLE_DNS != "" ]] && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null ;then
      status_log $TYPE_INFO "DNS name ${GRAPPLE_DNS} is not a FQDN"
      GRAPPLE_DOMAIN=".grapple-demo.com"
  fi

  if [ "${GRAPPLE_DNS}" == "" ]; then 
      GRAPPLE_DNS=${CIVO_CLUSTER}
      GRAPPLE_DOMAIN=".grapple-demo.com"
  fi



#------------ CIVO_EMAIL_ADDRESS Input-----------

  #check if input from params is valid or not
  check_if_param_avaiable_in_non_interactive_mode "CIVO_EMAIL_ADDRESS" "${CIVO_EMAIL_ADDRESS}" "${help_menu_cmd}"
  if [ "${CIVO_EMAIL_ADDRESS}" != "" ]; then 
    is_value_correct_wrt_regex $CIVO_EMAIL_ADDRESS $email_regex "Invalid email address format. Please try again"
  fi
  CIVO_EMAIL_ADDRESS=$(if [ "${CIVO_EMAIL_ADDRESS}" != "" ]; then echo ${CIVO_EMAIL_ADDRESS}; else prompt_for_input_with_validation "Enter CIVO_EMAIL_ADDRESS: " "Provide the email address to be used - valide email address is required" "$email_regex" "Invalid email address format. Please try again."; fi) || exit $?
  echo "selected civo email address: ${CIVO_EMAIL_ADDRESS}"
  EMAIL=$CIVO_EMAIL_ADDRESS
  if [[ $ORGANIZATION == "" ]]; then
    ORGANIZATION=$(echo "${CIVO_EMAIL_ADDRESS}" | cut -d'@' -f2)
  fi

fi


# if Kubernetes, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $Kubernetes ]; then

#------------ GRAPPLE_DNS Input-----------
  check_if_param_avaiable_in_non_interactive_mode "GRAPPLE_DNS" "${GRAPPLE_DNS}" "${help_menu_cmd}"
  # check if a full domain-name was passed in GRAPPLE_DNS
  if [[ $GRAPPLE_DNS != "" ]] && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null ;then
      status_log $TYPE_INFO "DNS name ${GRAPPLE_DNS} is not a FQDN"
      GRAPPLE_DOMAIN=".grapple-demo.com"
  fi

#---------- KUBE_CONTEXT Input ------------

KUBERNETES_CLUSTER_NAME=""
if [ -n "$KUBERNETES_SERVICE_HOST" ] && [ -n "$KUBERNETES_SERVICE_PORT" ]; then
    echo "Running inside a Kubernetes cluster"
    KUBERNETES_CLUSTER_NAME=$(kubectl get nodes -o name | awk -F'/' '{print $2}' | head -n 1)
else
    echo "Not running inside a Kubernetes cluster"
    if [ "${KUBE_CONTEXT}" == $CURRENT_CONTEXT ] || [ "${KUBE_CONTEXT}" == "" ]; then
        if kubectl config current-context >/dev/null 2>&1; then
        KUBE_CONTEXT=$(kubectl config current-context)
        fi
    fi
    
    # Run the command and store the output in a variable
    contexts=$(kubectl config get-contexts -o name)
    # Check if the output is empty
    if [ -z "$contexts" ]; then
        status_log $TYPE_ERROR "Error: No contexts found"
        exit 1
    else
        #check if input from params is valid or not
        is_correct_kubectl_context_provided $KUBE_CONTEXT
        contexts=$(kubectl config get-contexts -o name)
        KUBE_CONTEXT=$(if [ "${KUBE_CONTEXT}" != "" ]; then echo ${KUBE_CONTEXT}; else gum choose  --header "Please select kubectl context you want to use" $contexts ; fi) || exit $?
        kubectl config use-context $KUBE_CONTEXT
        status_log $TYPE_DEFAULT "KUBE_CONTEXT: ${KUBE_CONTEXT}"
    fi

    KUBERNETES_CLUSTER_NAME=$KUBE_CONTEXT
fi


  check_if_param_avaiable_in_non_interactive_mode "CLUSTER_IP" "${CLUSTER_IP}" "${help_menu_cmd}"
  CLUSTER_IP=$(if [ "${CLUSTER_IP}" != "" ]; then echo ${CLUSTER_IP}; else prompt_for_input_with_validation "Enter CLUSTER_IP: " "Provide the IP of the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
  echo "kuberenetes cluster ip: ${CLUSTER_IP}"

fi

if [ "${TARGET_PLATFORM}" = $Minikube ]; then

  status_log $TYPE_INFO "going to install and run minikube"
  # first check if minikube is installed or not, if not? then install it
  check_and_install_minikube

  # check if minikube cluster is running or not, if not? then start it
  if ! minikube status | grep "host: Running"; then
      echo "Minikube is not running. Starting Minikube..."
      if ! eval "$(getGumSpinnerOrLogger "minikube is not running, now starting minikube") minikube start"; then
        status_log $TYPE_ERROR "Error: minikube failed to start becasue docker or any driver service is not running. Details are listed below"
        minikube start >&2
      fi
  fi

  # switch to minikube
  kubectl config use-context minikube
  extract_kubectl_cli_version

  if ! minikube addons list | grep enabled | grep ingress >/dev/null 2>&1; then
    if [ "${AUTO_CONFIRM}" != "true" ] && [ "$TTY" == "enabled" ]; then
      gum confirm "Configure dns for your minikube?" || (echo "grapple cannot be installed without dns / ingress configuration" &&  status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
    fi
    echo "enabling ingress addons for minikube"
    status_log $TYPE_INFO "enabling ingress addons for minikube"
    minikube addons enable ingress
    minikube addons enable ingress-dns
    if [[ "$(uname)" == "Darwin" ]]; then
      brew install chipmk/tap/docker-mac-net-connect
      sudo brew services start chipmk/tap/docker-mac-net-connect
    fi
  fi 

  status_log $TYPE_INFO "testing domain, this may take upto 5mins"
  if ! grep -r $(minikube ip) /etc/resolver/ >/dev/null 2>&1; then
    echo "domain test
nameserver $(minikube ip)
search_order 1
timeout 5" > /tmp/minikube-test

    if [ "${AUTO_CONFIRM}" != "true" ]  && [ "$TTY" == "enabled" ]; then
      status_log $TYPE_INFO "please run the following commands before clicking on 'confirm':"
    else
      status_log $TYPE_INFO "going to run following command"
    fi
  
    gum style \
      --foreground 212 --border-foreground 212 --border double \
      --align center --width 100 --margin "1 2" --padding "2 4" \
      'sudo cp /tmp/minikube-test /etc/resolver/minikube-test' >&2

    if [ "${AUTO_CONFIRM}" != "true" ]  && [ "$TTY" == "enabled" ]; then
      gum confirm "Proceed with ingress configuration?" || (echo "grapple cannot be installed without dns / ingress configuration"  &&  status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
    else
      sudo cp /tmp/minikube-test /etc/resolver/minikube-test
    fi
  fi 

  GRAPPLE_DNS=test
  GRAPPLE_DOMAIN=""
  

fi

# if Kubefirst, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $Kubefirst ]; then

### disable all checks if TARGET_PLATFORM = Kubefirst, as DNS managed by Kubefirst
#  # check if a full domain-name was passed in GRAPPLE_DNS
#  if [[ $GRAPPLE_DNS != "" ]] && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null ;then
#      status_log $TYPE_INFO "DNS name ${GRAPPLE_DNS} is not a FQDN"
#      GRAPPLE_DOMAIN=".grapple-demo.com"
#  fi
#
#  CLUSTER_IP=$(if [ "${CLUSTER_IP}" != "" ]; then echo ${CLUSTER_IP}; else [ $TTY == "enabled" ] && prompt_for_input_with_validation "Enter CLUSTER_IP: " "Provide the IP of the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
#  echo "kuberenetes cluster ip: ${CLUSTER_IP}"


  if [[ "${GITHUB_USERNAME}" != "" ]]; then
    status_log $TYPE_INFO "extracting email from github username $GITHUB_USERNAME"
    extract_email_from_github_username
    status_log $TYPE_INFO "extracted email : $EMAIL from github username $GITHUB_USERNAME"

  elif [[ "${GITLAB_USERNAME}" != "" ]]; then
    status_log $TYPE_INFO "extracting email from gitlab username $GITLAB_USERNAME"
    extract_email_from_gitlab_username
    status_log $TYPE_INFO "extracted email : $EMAIL from gitlab username $GITLAB_USERNAME"
  fi

  echo "DNS: $GRAPPLE_DNS"

  if [[ "$(echo "${KUBEFIRST_CLOUD_PROVIDER}" | tr '[:upper:]' '[:lower:]')" == "$(echo "${K3D}" | tr '[:upper:]' '[:lower:]')" ]]; then
    patch_coredns
  fi

fi


# Prompt for GRAPPLE_DNS, CIVO_CLUSTER_ID, etc. using gum
if [ "${TARGET_PLATFORM}" != $Minikube ]; then
  check_if_param_avaiable_in_non_interactive_mode "GRAPPLE_DNS" "$GRAPPLE_DNS" "${help_menu_cmd}"
  GRAPPLE_DNS=$(if [ "${GRAPPLE_DNS}" != "" ]; then echo ${GRAPPLE_DNS}; else prompt_for_input_with_validation "Enter GRAPPLE_DNS: " "Valid DNS name is required" "$grpl_dns_regex" "Invalid DNS name format. Please try again."; fi) || exit $?
  echo "installing dns: ${GRAPPLE_DNS}"
fi

#----------- creating complete domain --------
complete_domain="" 
if host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null;then
  complete_domain=$GRAPPLE_DNS
else 
  complete_domain=${GRAPPLE_DNS}${GRAPPLE_DOMAIN}
fi


#----------- GRAPPLE_VERSION Input --------

if [ "${GRAPPLE_VERSION}" == "latest" ] || [ "${GRAPPLE_VERSION}" == "" ]; then
  GRAPPLE_VERSION=$(head -n 1 "$GRPL_WORKDIR/grapple-versions")
  status_log $TYPE_INFO "Installing grapple version: ${GRAPPLE_VERSION}"
fi


if [ "${GRAPPLE_VERSION}" != "" ]; then 
  is_correct_grapple_version_provided $GRAPPLE_VERSION 
fi


#----------- ORGANIZATION default value --------
if [ "${ORGANIZATION}" == "" ]; then 
  ORGANIZATION="grapple solutions AG"
fi


#----------- Email validation and default value --------
if [ "${EMAIL}" != "" ]; then 
  is_value_correct_wrt_regex $EMAIL $email_regex "Invalid email address format. Please try again"
else 
  EMAIL="info@grapple-solutions.com"
fi


license=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.LIC}" 2>/dev/null | base64 --decode 2>/dev/null)

if [[ $? -ne 0 ]]; then
    GRAPPLE_LICENSE="free"
elif [[ -z $license ]]; then
    GRAPPLE_LICENSE="free"
else
    GRAPPLE_LICENSE=$license
fi

CLUSTER_NAME=${CIVO_CLUSTER:-${KUBEFIRST_CLUSTER_NAME:-${KUBERNETES_CLUSTER_NAME}}}

PROVIDER_CLUSTER_NAME=${TARGET_PLATFORM}
if [ "${TARGET_PLATFORM}" = $Kubefirst ]; then
  PROVIDER_CLUSTER_NAME=${KUBEFIRST_CLOUD_PROVIDER}
fi


cat <<EOF > /tmp/values-override.yaml
# Default values for grsf-init.

clusterdomain: ${complete_domain}

# Configuration
config:
  email: "${EMAIL}"
  organization: ${ORGANIZATION}
  clusterdomain: ${complete_domain}
  grapiversion: "0.0.1"
  gruimversion: "0.0.1"
  dev: "false"
  ssl: "$SSL_ENABLE"
  sslissuer: "$SSL_ISSUER"
  CIVO_CLUSTER_ID: ${CIVO_CLUSTER_ID}
  CIVO_CLUSTER_NAME: ${CIVO_CLUSTER}
  CIVO_REGION: ${CIVO_REGION}
  CIVO_EMAIL_ADDRESS: ${CIVO_EMAIL_ADDRESS}
  CIVO_MASTER_IP: ${CLUSTER_IP}
  GRAPPLE_DNS: ${complete_domain}
  GRAPPLE_VERSION: ${GRAPPLE_VERSION}
  GRAPPLE_LICENSE: ${GRAPPLE_LICENSE}
  CLOUD_PROVIDER: ${KUBEFIRST_CLOUD_PROVIDER}
  CLOUD_REGION: ${KUBEFIRST_CLOUD_REGION}
  CLUSTER_ID: ${KUBEFIRST_CLUSTER_ID}
  CLUSTER_NAME: ${CLUSTER_NAME}
  PROVIDER_CLUSTER_NAME: ${PROVIDER_CLUSTER_NAME}
# Additional configurations omitted for brevity
EOF

cat /tmp/values-override.yaml


# Use gum to confirm before proceeding
if [ "${AUTO_CONFIRM}" != "true" ]  && [ "$TTY" == "enabled" ]; then

  status_log $TYPE_DEFAULT "Going to deploy grpl on ${TARGET_PLATFORM} with following configurations"  
  if [ "${TARGET_PLATFORM}" == $CIVO ]; then 
    status_log $TYPE_DEFAULT "CIVO_CLUSTER_ID: ${CIVO_CLUSTER_ID}"
    status_log $TYPE_DEFAULT "CIVO_CLUSTER: ${CIVO_CLUSTER}"
    status_log $TYPE_DEFAULT "CIVO_REGION: ${CIVO_REGION}"
    status_log $TYPE_DEFAULT "CIVO_EMAIL_ADDRESS: ${CIVO_EMAIL_ADDRESS}"
    status_log $TYPE_DEFAULT "CLUSTER_IP: ${CLUSTER_IP}"
  elif [ ${TARGET_PLATFORM} == $Kubefirst ]; then
    status_log $TYPE_DEFAULT "KUBEFIRST_CLOUD_PROVIDER: ${KUBEFIRST_CLOUD_PROVIDER}"
    status_log $TYPE_DEFAULT "KUBEFIRST_CLOUD_REGION: ${KUBEFIRST_CLOUD_REGION}"
    status_log $TYPE_DEFAULT "KUBEFIRST_CLUSTER_ID: ${KUBEFIRST_CLUSTER_ID}"
    status_log $TYPE_DEFAULT "KUBEFIRST_CLUSTER_NAME: ${KUBEFIRST_CLUSTER_NAME}"
  fi

  status_log $TYPE_DEFAULT "GRAPPLE_VERSION: ${GRAPPLE_VERSION}"
  status_log $TYPE_DEFAULT "GRAPPLE_DNS: ${complete_domain}"
  status_log $TYPE_DEFAULT "GRAPPLE_LICENSE: ${GRAPPLE_LICENSE}"
  status_log $TYPE_DEFAULT "ORGANIZATION: ${ORGANIZATION}"
  status_log $TYPE_DEFAULT "EMAIL: ${EMAIL}"

  gum confirm "Proceed with deployment using the values above?" || (status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
fi


# Define helm_deploy function 
if [ "$values_yaml_file_names" != "" ]; then
  values_yaml_file_names=$(echo "$values_yaml_file_names" | awk -v grpl_workdir="$GRPL_WORKDIR" '{gsub("values-templates", "\"" grpl_workdir "/values-templates\"")}1')
  values_yaml_file_names=$(echo "$values_yaml_file_names" | sed 's/"//g')
fi
retries=0
helm_deploy() {

  i=$1
  v=${2:-$GRAPPLE_VERSION}
  if [ "$v" != "" ]; then 
    version="--version ${v}"
  else
    version=""
  fi
    

  echo "Deploying $i with version $version"

  if [ "${TARGET_PLATFORM}" = $Kubefirst ]; then
    if [[ "$(echo "${KUBEFIRST_CLOUD_PROVIDER}" | tr '[:upper:]' '[:lower:]')" == "$(echo "${K3D}" | tr '[:upper:]' '[:lower:]')" ]]; then
      Kubefirst_values=" -f ${GRPL_WORKDIR}/template-files/values-kubefirst-k3d.yaml "
    else
      Kubefirst_values=" -f ${GRPL_WORKDIR}/template-files/values-kubefirst.yaml "
    fi
  else
    Kubefirst_values=""
  fi

  if ! eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $Kubefirst_values" >/dev/null; then
    ((retries+=1))
    status_log $TYPE_INFO "Retry ${retries} - ${i} Failed to Install"
    if [[ $retries == 3 ]]; then
        status_log $TYPE_INFO "We tried retrying 3 times and tried logging out of public.ecr.aws registry but it failed, please run 'helm registry logout public.ecr.aws/<repo>' and try again"
        echo "${i} Failed to Installed"
        status_log $TYPE_ERROR "${i} Failed to Installed due to following error"
        eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $Kubefirst_values"  >&2  
        exit 1
    else 
      if helm registry logout public.ecr.aws >/dev/null 2>&1; then
        status_log $TYPE_INFO "logged out of public.ecr.aws registry"
        status_log $TYPE_INFO "trying again"
      fi
      helm_deploy $i
    fi

  fi

}

if [ "${INSTALL_KUBEBLOCKS}" == "true" ]; then
    status_log $TYPE_INFO "Installing kubeblocks in background"
    kubeblocks_installation >/dev/null 2>&1 &
fi

if ([ "${TARGET_PLATFORM}" = $CIVO ] || [ "${TARGET_PLATFORM}" = $Kubernetes ]) && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null; then
  status_log $TYPE_INFO "Deploying grpl-dns-aws-route53-upsert"
  kubectl delete po -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} >/dev/null 2>&1 || true
  kubectl run -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} --image=grpl/dns-aws-route53-upsert --env="GRAPPLE_DNS=${complete_domain}" --env="CIVO_MASTER_IP=${CLUSTER_IP}" --restart=Never
fi

echo 
echo ----

helm_deploy grsf-init 
status_log $TYPE_INFO "waiting for grsf-init to be ready"

echo "wait for cert-manager to be ready"
if helm get -n kube-system notes traefik >/dev/null 2>&1; then 
    CRD=Middleware && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi
if kubectl get deploy -n grpl-system grsf-init-cert-manager >/dev/null 2>&1; then 
    kubectl wait deployment -n ${NS} grsf-init-cert-manager --for condition=Available=True --timeout=300s
    CRD=ClusterIssuer && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

# remove the DNS job again
if [ "${TARGET_PLATFORM}" = $CIVO ]  && ! host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null; then
  kubectl delete po -n default grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} 
fi

echo "wait for crossplane to be ready"
if kubectl get deploy -n grpl-system crossplane >/dev/null 2>&1; then 
    CRD=Provider && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

echo "wait for external-secrets to be ready"
if kubectl get deploy -n grpl-system grsf-init-external-secrets-webhook >/dev/null 2>&1; then 
    CRD=ExternalSecrets && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
    echo "wait for external-secrets to be ready"
    kubectl wait deployment -n ${NS} grsf-init-external-secrets-webhook --for condition=Available=True --timeout=300s
fi 


status_log $TYPE_SUCCESS "grsf-init is Installed"

echo 
echo ----
echo "Ready for grsf deployment"

helm_deploy grsf
status_log $TYPE_INFO "waiting for grsf to be ready"

echo "wait for providerconfigs to be ready"
sleep 10
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-civo) >/dev/null 2>&1; then 
    kubectl wait -n ${NS} provider.pkg.crossplane.io/provider-civo --for condition=Healthy=True --timeout=300s
    echo "wait for provider-civo to be ready"
    CRD=providerconfigs.civo.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 

for i in $(kubectl get pkg -n ${NS} -o name); do 
    kubectl wait -n ${NS} $i --for condition=Healthy=True --timeout=300s;
done
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-helm) >/dev/null 2>&1; then 
    CRD=providerconfigs.helm.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-kubernetes) >/dev/null 2>&1; then 
    CRD=providerconfigs.kubernetes.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 


status_log $TYPE_SUCCESS "grsf is Installed"

echo 
echo ----

helm_deploy grsf-config 
status_log $TYPE_INFO "waiting for grsf-config to be applied"

CRD=compositemanagedapis.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageduimodules.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageddatasources.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
for i in $(kubectl get xrd -o name); do 
  kubectl wait --for=condition=Offered $i;
done

status_log $TYPE_SUCCESS "grsf-config is Installed"

helm_deploy grsf-integration
status_log $TYPE_INFO "waiting for grsf-config to be ready"

echo 
echo ----
echo "enable ssl"
kubectl apply -f $GRPL_WORKDIR/files/clusterissuer.yaml

status_log $TYPE_INFO "created clusterissuer"

echo "check all crossplane packages are ready"
for i in $(kubectl get pkg -o name); do status_log $TYPE_INFO "waiting for crossplane package : $i to be ready"; kubectl wait --for=condition=Healthy $i; done

status_log $TYPE_SUCCESS "grsf-integration is Installed"

cli_log "cluster install END"


rm /tmp/values-override.yaml

status_log $TYPE_SUCCESS "Successfuly Installed grpl"


if [ "${INSTALL_KUBEBLOCKS}" == "true" ]; then
  status_log $TYPE_INFO "Waiting for kubeblocks to be installed it might take a while"
  wait
  status_log $TYPE_SUCCESS "kubeblocks is installed"
fi


if [ "$TARGET_PLATFORM" = $CIVO ] && [ "${CLUSTER_IP}" == "" ]; then

  status_log $TYPE_INFO "Again Trying to Retrive cluster IP from kubectl cluster-info"
  status_log $TYPE_INFO "Waiting for cluster IP to be ready (30 seconds max)"
  
  TIMEOUT=30
  ELAPSED=0

  while [ "${CLUSTER_IP}" == "" ] && [ $ELAPSED -lt $TIMEOUT ]; do
      # Retrieve the IP from kubectl cluster-info
      for node in $(kubectl get nodes -o jsonpath='{.items[*].metadata.name}'); do
        CLUSTER_IP=$(kubectl get node $node -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}')
        if [ "${CLUSTER_IP}" != "" ]; then
            break  # Exit the loop as soon as an ExternalIP is found
        fi
      done      
      if [ "${CLUSTER_IP}" == "" ]; then
        echo -n "." >&2
        sleep 10
        ((ELAPSED+=10))  # Increment elapsed time by 1 second
      fi
  done

  if [ "${CLUSTER_IP}" == "" ]; then
      status_log $TYPE_INFO "Unable to retrieve cluster IP within ${TIMEOUT} seconds"
      exit 0
  fi

  sleep 2  # Pause briefly before proceeding


  # Define the namespace and secret name
  NAMESPACE="grpl-system"
  SECRET_NAME="grsf-config"

  CLUSTER_IP_ENCODED=$(echo -n $CLUSTER_IP | base64)

  if kubectl patch secret $SECRET_NAME -n $NAMESPACE --type='json' -p='[
    {"op": "add", "path": "/data/CIVO_MASTER_IP", "value":"'"$CLUSTER_IP_ENCODED"'"}
  ]'; then
    status_log $TYPE_INFO "Successfully patched secret $SECRET_NAME in namespace $NAMESPACE with CIVO_MASTER_IP=$CLUSTER_IP"
  else
    status_log $TYPE_ERROR "Failed to patch secret $SECRET_NAME in namespace $NAMESPACE with CIVO_MASTER_IP=$CLUSTER_IP"
  fi


fi

if [ "${wait}" == "true" ]; then
  status_log $TYPE_INFO "Waiting for grpl to be ready"
  while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done && \
    sleep 5 && \
    kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s

  status_log $TYPE_SUCCESS "grpl is ready"
fi
