#!/bin/bash
set -e
. "$GRPL_WORKDIR/utils/common"


NS=grpl-system
awsregistry="p7h7z5g3"


cli_help_cluster_install() {
  echo "
Command: grpl cluster install

Usage: 
  cluster install

Variables:
  TARGET_PLATFORM=CIVO / Kubernetes / minikube

  # general configurations
  GRAPPLE_VERSION = version of the grapple deployment (e.g. '0.2.1')
  AUTO_CONFIRM = false / true

  # kubernetes related configurations
  KUBE_CONTEXT = kubernetes context

  # minikube related configurations
  # none yet...

  # CIVO related configurations
  CIVO_REGION = Available CIVO regions (e.g. FRA1)
  CIVO_CLUSTER = CIVO cluster
  CIVO_CLUSTER_NAME = CIVO cluster name
  CIVO_CLUSTER_ID = CIVO cluster ID
  CIVO_MASTER_IP = CIVO cluster master IP address
  CIVO_EMAIL_ADDRESS = email address of your CIVO account

" >&2
# since we have restricted everything from stdout and sent it to log files
# we won't be able to display the help menu with echo in terminal
# so instead as a way around we'll use stderr to log the help menu on terminal
# we could have used gum log but it didn't support \n
# we whould have to write multiple log statements
  exit 0
}

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help_cluster_install

cli_log "cluster install BEGIN"
status_log $TYPE_INFO "Installation of grpl is in progress"
install_prerequisite

# verify install target platform
TARGET_PLATFORM=$(if [ "${TARGET_PLATFORM}" != "" ]; then echo ${TARGET_PLATFORM}; else gum choose $Minikube $CIVO $Kubernetes; fi)
echo "selected target platform: ${TARGET_PLATFORM}"

# if CIVO, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $CIVO ]; then

  # first check if minikube is installed or not, if not? then install it
  check_and_install_civo

  CIVO_REGION=$(if [ "${CIVO_REGION}" != "" ]; then echo ${CIVO_REGION}; else gum spin --title "fetching civo regions" --show-output -- civo region ls -o custom -f code | gum choose; fi)
  civo region use ${CIVO_REGION} | true

  CIVO_CLUSTER=$(if [ "${CIVO_CLUSTER}" != "" ]; then echo ${CIVO_CLUSTER}; else if gum spin --title "fetching civo clusters" -- civo k8s ls -o custom -f name; then civo k8s ls -o custom -f name | gum choose; else echo ""; fi; fi)
  echo "selected civo cluster: ${CIVO_CLUSTER}"
  gum spin --title "switching to ${CIVO_CLUSTER}" --show-output -- civo k8s config ${CIVO_CLUSTER} --save --switch

  # if a CIVO cluster was selected, pre-set the configuration
  CIVO_CLUSTER_NAME=${CIVO_CLUSTER}
  CIVO_CLUSTER_ID=$(gum spin --title "fetching cluster id of ${CIVO_CLUSTER} cluster" --show-output -- civo k8s show ${CIVO_CLUSTER} -o custom -f ID)
  GRAPPLE_DNS=${CIVO_CLUSTER}
  GRAPPLE_DOMAIN=".grapple-demo.com"

  CIVO_CLUSTER_ID=$(if [ "${CIVO_CLUSTER_ID}" != "" ]; then echo ${CIVO_CLUSTER_ID}; else prompt_for_input_with_validation "Enter CIVO_CLUSTER_ID: " "Provide an ID for the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
  echo "selected civo cluster ID: ${CIVO_CLUSTER_ID}"

  CIVO_CLUSTER_NAME=$(if [ "${CIVO_CLUSTER_NAME}" != "" ]; then echo ${CIVO_CLUSTER_NAME}; else prompt_for_input_with_validation "Enter CIVO_CLUSTER_NAME: " "Provide an name for the cluster" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
  echo "selected civo cluster name: ${CIVO_CLUSTER_NAME}"

  CIVO_MASTER_IP=$(if [ "${CIVO_MASTER_IP}" != "" ]; then echo ${CIVO_MASTER_IP}; else civo k8s show ${CIVO_CLUSTER} -o custom -f "MasterIP"; fi) || exit $?
  echo "selected civo master ip: ${CIVO_MASTER_IP}"

  CIVO_EMAIL_ADDRESS=$(if [ "${CIVO_EMAIL_ADDRESS}" != "" ]; then echo ${CIVO_EMAIL_ADDRESS}; else prompt_for_input_with_validation "Enter CIVO_EMAIL_ADDRESS: " "Provide the email address to be used - valide email address is required" "$email_regex" "Invalid email address format. Please try again."; fi) || exit $?
  echo "selected civo email address: ${CIVO_EMAIL_ADDRESS}"

fi

# if CIVO, then pre-set the configuration params
if [ "${TARGET_PLATFORM}" = $Kubernetes ]; then
  KUBE_CONTEXT=$(if [ "${KUBE_CONTEXT}" != "" ]; then echo ${KUBE_CONTEXT}; else kubectl config get-contexts -o name | gum choose; fi)
fi

if [ "${TARGET_PLATFORM}" = $Minikube ]; then

  # first check if minikube is installed or not, if not? then install it
  check_and_install_minikube

  # check if minikube cluster is running or not, if not? then start it
  if ! minikube status | grep "host: Running"; then
      echo "Minikube is not running. Starting Minikube..."
      gum spin --title "minikube is not running, now starting minikube" --show-output -- minikube start
  fi

  # siwtch to minikube
  kubectl config use-context minikube


  if ! minikube addons list | grep enabled | grep ingress >/dev/null 2>&1; then
    if [ "${AUTO_CONFIRM}" != "true" ]; then
      gum confirm "Configure dns for your minikube?" || (echo "grapple cannot be installed without dns / ingress configuration" &&  status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
    fi
    echo "enabling ingress addons for minikube"
    minikube addons enable ingress
    minikube addons enable ingress-dns
  fi 

  if ! grep -r $(minikube ip) /etc/resolver/ >/dev/null 2>&1; then
    echo "domain test
    nameserver $(minikube ip)
    search_order 1
    timeout 5" > /tmp/minikube-test

    echo "please run the following commands before clicking on 'confirm':"
    gum style \
      --foreground 212 --border-foreground 212 --border double \
      --align center --width 100 --margin "1 2" --padding "2 4" \
      'sudo cp /tmp/minikube-test /etc/resolver/minikube-test'
    if [ "${AUTO_CONFIRM}" != "true" ]; then
      gum confirm "Proceed with ingress configuration?" || (echo "grapple cannot be installed without dns / ingress configuration"  &&  status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
    else
      sudo cp /tmp/minikube-test /etc/resolver/minikube-test
    fi
  fi 
  GRAPPLE_DNS=test
  GRAPPLE_DOMAIN=""
  

fi

# Prompt for GRAPPLE_DNS, CIVO_CLUSTER_ID, etc. using gum
if [ "${TARGET_PLATFORM}" != $Minikube ]; then
  GRAPPLE_DNS=$(if [ "${GRAPPLE_DNS}" != "" ]; then echo ${GRAPPLE_DNS}; else prompt_for_input_with_validation "Enter GRAPPLE_DNS: " "Valid DNS name is required" "$grpl_dns_regex" "Invalid DNS name format. Please try again."; fi) || exit $?
  echo "installing dns: ${GRAPPLE_DNS}"
fi

GRAPPLE_VERSION=$(if [ "${GRAPPLE_VERSION}" != "" ]; then echo ${GRAPPLE_VERSION}; else gum choose "0.2.1" "0.2.0"; fi) || exit $? # not sure if both GRAPPLE_VERSION & VERSION are needed
echo "installing grapple version: ${GRAPPLE_VERSION}"

# VERSION=$(prompt_for_input_with_validation "Enter version of the grapple solution framework: " "Semver version is expected. Default value if empty: 0.2.0" "$non_empty_regex" "Version cannot be empty." "0.2.0") || exit $?

# The script then proceeds to dynamically generate values-override.yaml with user inputs
cat <<EOF > ./values-override.yaml
# Default values for grsf-init.

clusterdomain: ${GRAPPLE_DNS}${GRAPPLE_DOMAIN}

# Configuration
config:
  clusterdomain: ${GRAPPLE_DNS}${GRAPPLE_DOMAIN}
  grapiversion: "0.0.1"
  gruimversion: "0.0.1"
  dev: "false"
  ssl: "true"
  sslissuer: "letsencrypt-grapple-demo"
  CIVO_CLUSTER_ID: ${CIVO_CLUSTER_ID}
  CIVO_CLUSTER_NAME: ${CIVO_CLUSTER_NAME}
  CIVO_REGION: ${CIVO_REGION}
  CIVO_EMAIL_ADDRESS: ${CIVO_EMAIL_ADDRESS}
  CIVO_MASTER_IP: ${CIVO_MASTER_IP}
  GRAPPLE_DNS: ${GRAPPLE_DNS}${GRAPPLE_DOMAIN}
  GRAPPLE_VERSION: ${GRAPPLE_VERSION}
# Additional configurations omitted for brevity
EOF

cat ./values-override.yaml

# Use gum to confirm before proceeding
if [ "${AUTO_CONFIRM}" != "true" ]; then

  status_log $TYPE_DEFAULT "Going to deploy grpl on ${TARGET_PLATFORM} with following configurations"  
  if [ "${TARGET_PLATFORM}" == $CIVO ]; then 
    
    status_log $TYPE_DEFAULT "CIVO_CLUSTER_ID: ${CIVO_CLUSTER_ID}"
    status_log $TYPE_DEFAULT "CIVO_CLUSTER_NAME: ${CIVO_CLUSTER_NAME}"
    status_log $TYPE_DEFAULT "CIVO_REGION: ${CIVO_REGION}"
    status_log $TYPE_DEFAULT "CIVO_EMAIL_ADDRESS: ${CIVO_EMAIL_ADDRESS}"
    status_log $TYPE_DEFAULT "CIVO_MASTER_IP: ${CIVO_MASTER_IP}"
    status_log $TYPE_DEFAULT "GRAPPLE_VERSION: ${GRAPPLE_VERSION}"
    status_log $TYPE_DEFAULT "GRAPPLE_DNS: ${GRAPPLE_DNS}${GRAPPLE_DOMAIN}"

  elif [ "${TARGET_PLATFORM}" == $Minikube ]; then 
    status_log $TYPE_DEFAULT "GRAPPLE_VERSION: ${GRAPPLE_VERSION}"
    status_log $TYPE_DEFAULT "GRAPPLE_DNS: ${GRAPPLE_DNS}${GRAPPLE_DOMAIN}"
  fi

  gum confirm "Proceed with deployment using the values above?" || (status_log $TYPE_ERROR "Failed to install grpl" && exit 1)
fi


# Define helm_deploy function 
helm_deploy() {
    i=$1
    v=${2:-$GRAPPLE_VERSION}
    if [ "$v" != "" ]; then 
      version="--version ${v}"
    else
      version=""
    fi

    echo "Deploying $i with version $version"

    # helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f ./values-override.yaml
    output=$(gum spin --title "Installing ${i} component" --show-output -- helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f ./values-override.yaml)
    if [[ "$output" == *"access denied"* ]]; then
      output=$(helm registry logout public.ecr.aws/${awsregistry} 2>&1)
      if [[ "$output" == "Removing login credentials for public.ecr.aws/${awsregistry}" ]]; then
        helm_deploy $i
      elif [[ "$output" == "Error: not logged in" ]]; then
        output=$(helm registry logout public.ecr.aws 2>&1)
        if [[ "$output" == "Removing login credentials for public.ecr.aws" ]]; then
          helm_deploy $i
        else
          echo $output
          status_log $TYPE_ERROR "${i} Failed to Installed"
          exit 1
        fi
      fi
    fi

}

if [ "${TARGET_PLATFORM}" = $CIVO ]; then
  kubectl delete po grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} >/dev/null 2>&1 | true
  kubectl run grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} --image=grpl/dns-aws-route53-upsert --env="GRAPPLE_DNS=${GRAPPLE_DNS}" --env="CIVO_MASTER_IP=${CIVO_MASTER_IP}" --restart=Never
fi

echo 
echo ----

helm_deploy grsf-init 
status_log $TYPE_INFO "waiting for grsf-init to be ready"

echo "wait for cert-manager to be ready"
if helm get -n kube-system notes traefik >/dev/null 2>&1; then 
    CRD=Middleware && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi
if kubectl get deploy -n grpl-system grsf-init-cert-manager >/dev/null 2>&1; then 
    kubectl wait deployment -n ${NS} grsf-init-cert-manager --for condition=Available=True --timeout=300s
    CRD=ClusterIssuer && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

# remove the DNS job again
if [ "${TARGET_PLATFORM}" = $CIVO ]; then
  kubectl delete po grpl-dns-aws-route53-upsert-${GRAPPLE_DNS} 
fi

echo "wait for crossplane to be ready"
if kubectl get deploy -n grpl-system crossplane >/dev/null 2>&1; then 
    CRD=Provider && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

echo "wait for external-secrets to be ready"
if kubectl get deploy -n grpl-system grsf-init-external-secrets-webhook >/dev/null 2>&1; then 
    CRD=ExternalSecrets && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
    echo "wait for external-secrets to be ready"
    kubectl wait deployment -n ${NS} grsf-init-external-secrets-webhook --for condition=Available=True --timeout=300s
fi 


status_log $TYPE_SUCCESS "grsf-init is Installed"

echo 
echo ----
echo "Ready for grsf deployment"

helm_deploy grsf
status_log $TYPE_INFO "waiting for grsf to be ready"

echo "wait for providerconfigs to be ready"
sleep 10
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-civo) >/dev/null 2>&1; then 
    kubectl wait -n ${NS} provider.pkg.crossplane.io/provider-civo --for condition=Healthy=True --timeout=300s
    echo "wait for provider-civo to be ready"
    CRD=providerconfigs.civo.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 

for i in $(kubectl get pkg -n ${NS} -o name); do 
    kubectl wait -n ${NS} $i --for condition=Healthy=True --timeout=300s;
done
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-helm) >/dev/null 2>&1; then 
    CRD=providerconfigs.helm.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-kubernetes) >/dev/null 2>&1; then 
    CRD=providerconfigs.kubernetes.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 


status_log $TYPE_SUCCESS "grsf is Installed"

echo 
echo ----

helm_deploy grsf-config 
status_log $TYPE_SUCCESS "grsf-config is Installed"

helm_deploy grsf-integration

echo 
echo ----
echo "enable ssl"
kubectl apply -f $GRPL_WORKDIR/files/clusterissuer.yaml

echo "check all crossplane packages are ready"
for i in $(kubectl get pkg -o name); do kubectl wait --for=condition=Healthy $i; done

status_log $TYPE_SUCCESS "grsf-integration is Installed"

cli_log "cluster install END"

status_log $TYPE_SUCCESS "Successfuly Installed grpl"