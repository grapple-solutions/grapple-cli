#!/bin/bash
set -e

. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"

# --------------------------------- Functions ------------------------------------------

# Print help menu for grpl aws install and exit
cli_help() {
  grpl_aws_install_cli_help
  exit 0
}

# --------------------------------- CODE ------------------------------------------

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help

NS=grpl-system
awsregistry="p7h7z5g3"
SSL="false"
SSL_ISSUER="letsencrypt-grapple-demo"
dependencies_path="$GRPL_WORKDIR/commands/aws_commands/dependencies"
cli_log "cluster install BEGIN"

# valid arguments array
valid_args=(            
    "CLUSTER_NAME"
    "CLUSTER_IP"
    "GRAPPLE_VERSION"
    "AUTO_CONFIRM"
    "GRAPPLE_DNS"
    "ORGANIZATION"
    "EMAIL"
    "INSTALL_KUBEBLOCKS"
    "SSL"
    "WAIT"
  )
# check if values are already passed form terminal
# if yes? then store then in the respective vars
help_menu_cmd="grpl aws install help"
extract_input_params_from_cli $valid_args "${help_menu_cmd}" $(echo "$@")

status_log $TYPE_INFO "Installation of grpl is in progress"

#-------------Functions-------------------

kubeblocks_installation() {
  if ! kbcli; then
      echo "installing kbcli"
      check_and_install_kbcli
  fi

  if ! kubectl get deployment kubeblocks -n kb-system; then
    echo "checking kubeblocks"
    check_and_install_kubeblocks

    echo "waiting for configs to apply"
    for i in $(kubectl get clusterversion -o name); do 
      kubectl get $i -o yaml | sed "s,infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com,docker.io,g" | kubectl apply -f - >/dev/null 2>&1; 
    done
  else 
    echo "kubeblocks is already installed"
  fi
}

#----------- CLUSTER_NAME input --------


check_if_param_avaiable_in_non_interactive_mode "CLUSTER_NAME" "${CLUSTER_NAME}" "${help_menu_cmd}"
# if [ "${CLUSTER_NAME}" != "" ] && [ $TTY == "enabled" ]; then 
#   is_correct_aws_cluster_provided $CLUSTER_NAME 
# fi
CLUSTER_NAME=$(if [ "${CLUSTER_NAME}" != "" ]; then echo "${CLUSTER_NAME}"; else (gum spin --title "fetching aws eks clusters" -- bash -c 'eksctl get cluster | awk "NR>1 {print \$1}" > /dev/null' && eksctl get cluster | awk "NR>1 {print \$1}" | gum choose) || echo ""; fi)
echo "selected aws cluster: ${CLUSTER_NAME}"



#----------- Prerequisites installation -------------------

# Install EBS CSI Driver Service Account if not exists
if ! kubectl get serviceaccount ebs-csi-controller-sa -n kube-system >/dev/null 2>&1; then
  status_log $TYPE_INFO "Creating EBS CSI Driver service account"
  if ! eval "$(getGumSpinnerOrLogger 'Creating EBS CSI Driver service account') eksctl create iamserviceaccount \
    --name ebs-csi-controller-sa \
    --namespace kube-system \
    --cluster ${CLUSTER_NAME} \
    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
    --approve --role-only \
    --role-name AmazonEKS_EBS_CSI_DriverRole"; then
    status_log $TYPE_ERROR "Failed to create EBS CSI Driver service account"
    exit 1
  fi
else
  status_log $TYPE_INFO "EBS CSI Driver service account already exists"
fi

# Install EFS CSI Driver Service Account if not exists 
if ! kubectl get serviceaccount efs-csi-controller-sa -n kube-system >/dev/null 2>&1; then
  status_log $TYPE_INFO "Creating EFS CSI Driver service account"
  if ! eval "$(getGumSpinnerOrLogger 'Creating EFS CSI Driver service account') eksctl create iamserviceaccount \
    --name efs-csi-controller-sa \
    --namespace kube-system \
    --cluster ${CLUSTER_NAME} \
    --attach-policy-arn arn:aws:iam::832137119998:policy/AmazonEKS_EFS_CSI_Driver_Policy \
    --approve --role-only \
    --role-name AmazonEKS_EFS_CSI_DriverRole"; then
    status_log $TYPE_ERROR "Failed to create EFS CSI Driver service account"
    exit 1
  fi
else
  status_log $TYPE_INFO "EFS CSI Driver service account already exists"
fi

# Install EBS CSI Driver addon if not exists
if ! eksctl get addon --cluster ${CLUSTER_NAME} | grep aws-ebs-csi-driver >/dev/null 2>&1; then
  status_log $TYPE_INFO "Installing EBS CSI Driver addon"
  if ! eval "$(getGumSpinnerOrLogger 'Installing EBS CSI Driver addon') eksctl create addon \
    --name aws-ebs-csi-driver \
    --cluster ${CLUSTER_NAME} \
    --service-account-role-arn arn:aws:iam::832137119998:role/AmazonEKS_EBS_CSI_DriverRole \
    --force"; then
    status_log $TYPE_ERROR "Failed to install EBS CSI Driver addon"
    exit 1
  fi
else
  status_log $TYPE_INFO "EBS CSI Driver addon already exists"
fi

# Install cluster autoscaler if not exists
if ! kubectl get deployment cluster-autoscaler -n kube-system >/dev/null 2>&1; then
  status_log $TYPE_INFO "Installing cluster autoscaler"
  if ! eval "$(getGumSpinnerOrLogger 'Installing cluster autoscaler') curl -s https://raw.githubusercontent.com/kubernetes/autoscaler/master/cluster-autoscaler/cloudprovider/aws/examples/cluster-autoscaler-autodiscover.yaml | \
    sed \"s,<YOUR CLUSTER NAME>,${CLUSTER_NAME},g\" | \
    kubectl apply -f -"; then
    status_log $TYPE_ERROR "Failed to install cluster autoscaler"
    exit 1
  fi
else
  status_log $TYPE_INFO "Cluster autoscaler already exists"
fi

# Add traefik helm repo if not exists
if ! helm repo list | grep traefik >/dev/null 2>&1; then
  status_log $TYPE_INFO "Adding Traefik repository"
  if ! eval "$(getGumSpinnerOrLogger 'Adding Traefik repository') helm repo add traefik https://helm.traefik.io/traefik"; then
    status_log $TYPE_ERROR "Failed to add Traefik repository"
    exit 1
  fi
else
  status_log $TYPE_INFO "Traefik repository already exists"
fi

# Add aws-efs-csi-driver helm repo if not exists
if ! helm repo list | grep aws-efs-csi-driver >/dev/null 2>&1; then
  status_log $TYPE_INFO "Adding AWS EFS CSI Driver repository"
  if ! eval "$(getGumSpinnerOrLogger 'Adding AWS EFS CSI Driver repository') helm repo add aws-efs-csi-driver https://kubernetes-sigs.github.io/aws-efs-csi-driver/"; then
    status_log $TYPE_ERROR "Failed to add AWS EFS CSI Driver repository"
    exit 1
  fi
else
  status_log $TYPE_INFO "AWS EFS CSI Driver repository already exists"
fi

# Update helm repos
if ! eval "$(getGumSpinnerOrLogger 'Updating Helm repositories') helm repo update"; then
  status_log $TYPE_ERROR "Failed to update Helm repositories"
  exit 1
fi



# Install EFS CSI Driver if not exists
if ! helm list -n kube-system | grep aws-efs-csi-driver >/dev/null 2>&1; then
  status_log $TYPE_INFO "Installing EFS CSI Driver"
  if ! eval "$(getGumSpinnerOrLogger 'Installing EFS CSI Driver') helm upgrade -i aws-efs-csi-driver aws-efs-csi-driver/aws-efs-csi-driver \
    --namespace kube-system \
    --set image.repository=602401143452.dkr.ecr.eu-central-1.amazonaws.com/eks/aws-efs-csi-driver \
    --set controller.serviceAccount.create=false \
    --set controller.serviceAccount.name=efs-csi-controller-sa"; then
    status_log $TYPE_ERROR "Failed to install EFS CSI Driver"
    exit 1
  fi
else
  status_log $TYPE_INFO "EFS CSI Driver already exists"
fi

# Install Traefik if not exists
if ! helm list -n traefik | grep traefik >/dev/null 2>&1; then
  status_log $TYPE_INFO "Installing Traefik"
  if ! eval "$(getGumSpinnerOrLogger 'Installing Traefik') helm upgrade -i traefik traefik/traefik \
    --create-namespace \
    --namespace=traefik \
    --values=$GRPL_WORKDIR/template-files/traefik-values.yaml"; then
    status_log $TYPE_ERROR "Failed to install Traefik"
    exit 1
  fi
else
  status_log $TYPE_INFO "Traefik already exists"
fi




#-------------Variables-------------------


if [ "${GRAPPLE_DNS}" == "" ]; then 
    GRAPPLE_DNS=${CLUSTER_NAME}
    GRAPPLE_DOMAIN=".grplaws.grapple-demo.com"
fi



#----------- creating complete domain --------
complete_domain="" 
if host $(extract_domain_name "$GRAPPLE_DNS") 2>&1 > /dev/null;then
  complete_domain=$GRAPPLE_DNS
else 
  complete_domain=${GRAPPLE_DNS}${GRAPPLE_DOMAIN}
fi

#----------- GRAPPLE_VERSION Input --------

if [ "${GRAPPLE_VERSION}" == "latest" ] || [ "${GRAPPLE_VERSION}" == "" ]; then
  GRAPPLE_VERSION=$(head -n 1 "$GRPL_WORKDIR/grapple-versions")
  status_log $TYPE_INFO "Installing grapple version: ${GRAPPLE_VERSION}"
fi

if [ "${GRAPPLE_VERSION}" != "" ]; then 
  is_correct_grapple_version_provided $GRAPPLE_VERSION 
fi


#----------- ORGANIZATION default value --------
if [ "${ORGANIZATION}" == "" ]; then 
  ORGANIZATION="grapple solutions AG"
fi


#----------- Email validation and default value --------
if [ "${EMAIL}" != "" ]; then 
  is_value_correct_wrt_regex $EMAIL $email_regex "Invalid email address format. Please try again"
else 
  EMAIL="info@grapple-solutions.com"
fi


license=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.LIC}" 2>/dev/null | base64 --decode 2>/dev/null)

if [[ $? -ne 0 ]]; then
    GRAPPLE_LICENSE="free"
elif [[ -z $license ]]; then
    GRAPPLE_LICENSE="free"
else
    GRAPPLE_LICENSE=$license
fi


PROVIDER_CLUSTER_NAME=${AWS}
export CLUSTERDOMAIN=${complete_domain}

cat <<EOF > /tmp/values-override.yaml
# Default values for grsf-init.

clusterdomain: ${complete_domain}

# Configuration
config:
  email: "${EMAIL}"
  organization: ${ORGANIZATION}
  clusterdomain: ${complete_domain}
  grapiversion: "0.0.1"
  gruimversion: "0.0.1"
  dev: "false"
  ssl: "$SSL"
  sslissuer: "$SSL_ISSUER"
  GRAPPLE_DNS: ${complete_domain}
  GRAPPLE_VERSION: ${GRAPPLE_VERSION}
  GRAPPLE_LICENSE: ${GRAPPLE_LICENSE}
  CLUSTER_NAME: ${CLUSTER_NAME}
  CLUSTER_IP: ${CLUSTER_IP}
  PROVIDER_CLUSTER_NAME: ${PROVIDER_CLUSTER_NAME}
# Additional configurations omitted for brevity
EOF

cat /tmp/values-override.yaml


# Use gum to confirm before proceeding
if [ "${AUTO_CONFIRM}" != "true" ]  && [ "$TTY" == "enabled" ]; then

  status_log $TYPE_DEFAULT "Going to deploy grpl on ${TARGET_PLATFORM} with following configurations"  
  status_log $TYPE_DEFAULT "CLUSTER_NAME: ${CLUSTER_NAME}"
  status_log $TYPE_DEFAULT "GRAPPLE_VERSION: ${GRAPPLE_VERSION}"
  status_log $TYPE_DEFAULT "GRAPPLE_DNS: ${complete_domain}"
  status_log $TYPE_DEFAULT "GRAPPLE_LICENSE: ${GRAPPLE_LICENSE}"
  status_log $TYPE_DEFAULT "ORGANIZATION: ${ORGANIZATION}"
  status_log $TYPE_DEFAULT "EMAIL: ${EMAIL}"
  status_log $TYPE_DEFAULT "SSL: ${SSL}"
  status_log $TYPE_DEFAULT "SSL_ISSUER: ${SSL_ISSUER}"
  status_log $TYPE_DEFAULT "PROVIDER_CLUSTER_NAME: ${PROVIDER_CLUSTER_NAME}"

  gum confirm "Proceed with deployment using the values above?" || (status_log $TYPE_ERROR "Failed to install grpl" && exit 1)

fi

# Define helm_deploy function 
if [ "$values_yaml_file_names" != "" ]; then
  values_yaml_file_names=$(echo "$values_yaml_file_names" | awk -v grpl_workdir="$GRPL_WORKDIR" '{gsub("values-templates", "\"" grpl_workdir "/values-templates\"")}1')
  values_yaml_file_names=$(echo "$values_yaml_file_names" | sed 's/"//g')
fi

get_cluster_external_ip "traefik"

CODE="$(openssl rand -hex 32)"
setup_code_verification_server $CODE $complete_domain "aws"
API_URL="https://4t2skptq3g.execute-api.eu-central-1.amazonaws.com/dev/grpl-route53-dns-manager-v2"
upsert_dns_record $API_URL $complete_domain $CODE $EXTERNAL_IP "Z0454103342YLLKJIY5JV" "CNAME"


echo 
echo ----

helm_deploy() {

  i=$1
  v=${2:-$GRAPPLE_VERSION}
  if [ "$v" != "" ]; then 
    version="--version ${v}"
  else
    version=""
  fi
    

  echo "Deploying $i with version $version"

  aws_values=" -f $dependencies_path/values-integration-aws.yaml "


  if ! eval "$(getGumSpinnerOrLogger "Installing ${i} component") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $aws_values" >/dev/null; then
    ((retries+=1))
    status_log $TYPE_INFO "Retry ${retries} - ${i} Failed to Install"
    if [[ $retries == 3 ]]; then
        status_log $TYPE_INFO "We tried retrying 3 times and tried logging out of public.ecr.aws registry but it failed, please run 'helm registry logout public.ecr.aws/<repo>' and try again"
        echo "${i} Failed to Installed"
        status_log $TYPE_ERROR "${i} Failed to Installed due to following error"
        eval "$(getGumSpinnerOrLogger "Extracting Error") helm upgrade --install $i oci://public.ecr.aws/${awsregistry}/$i -n ${NS} ${version} --create-namespace -f /tmp/values-override.yaml $values_yaml_file_names $aws_values"  >&2  
        exit 1
    else 
      if helm registry logout public.ecr.aws >/dev/null 2>&1; then
        status_log $TYPE_INFO "logged out of public.ecr.aws registry"
        status_log $TYPE_INFO "trying again"
      fi
      helm_deploy $i
    fi

  fi

}

if [ "${INSTALL_KUBEBLOCKS}" == "true" ]; then
    status_log $TYPE_INFO "Installing kubeblocks in background"
    kubeblocks_installation >/dev/null 2>&1 &
fi



echo 
echo ----

helm_deploy grsf-init 
status_log $TYPE_INFO "waiting for grsf-init to be ready"

echo "wait for cert-manager to be ready"
if helm get -n kube-system notes traefik >/dev/null 2>&1; then 
    CRD=Middleware && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi
if kubectl get deploy -n grpl-system grsf-init-cert-manager >/dev/null 2>&1; then 
    kubectl wait deployment -n ${NS} grsf-init-cert-manager --for condition=Available=True --timeout=300s
    CRD=ClusterIssuer && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi


 

echo "wait for crossplane to be ready"
if kubectl get deploy -n grpl-system crossplane >/dev/null 2>&1; then 
    CRD=Provider && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi

echo "wait for external-secrets to be ready"
if kubectl get deploy -n grpl-system grsf-init-external-secrets-webhook >/dev/null 2>&1; then 
    CRD=ExternalSecrets && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
    echo "wait for external-secrets to be ready"
    kubectl wait deployment -n ${NS} grsf-init-external-secrets-webhook --for condition=Available=True --timeout=300s
fi 


status_log $TYPE_SUCCESS "grsf-init is Installed"

echo 
echo ----
echo "Ready for grsf deployment"

helm_deploy grsf
status_log $TYPE_INFO "waiting for grsf to be ready"

echo "wait for providerconfigs to be ready"
sleep 10
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-civo) >/dev/null 2>&1; then 
    kubectl wait -n ${NS} provider.pkg.crossplane.io/provider-civo --for condition=Healthy=True --timeout=300s
    echo "wait for provider-civo to be ready"
    CRD=providerconfigs.civo.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 

for i in $(kubectl get pkg -n ${NS} -o name); do 
    kubectl wait -n ${NS} $i --for condition=Healthy=True --timeout=300s;
done
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-helm) >/dev/null 2>&1; then 
    CRD=providerconfigs.helm.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 
if kubectl get -n ${NS} $(kubectl get deploy -n ${NS} -o name | grep provider-kubernetes) >/dev/null 2>&1; then 
    CRD=providerconfigs.kubernetes.crossplane.io  && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
fi 


status_log $TYPE_SUCCESS "grsf is Installed"

echo 
echo ----

helm_deploy grsf-config 
status_log $TYPE_INFO "waiting for grsf-config to be applied"

CRD=compositemanagedapis.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageduimodules.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
CRD=compositemanageddatasources.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
for i in $(kubectl get xrd -o name); do 
  kubectl wait --for=condition=Offered $i;
done

status_log $TYPE_SUCCESS "grsf-config is Installed"

helm_deploy grsf-integration
status_log $TYPE_INFO "waiting for grsf-config to be ready"

echo 
echo ----
echo "enable ssl"
kubectl apply -f $GRPL_WORKDIR/files/clusterissuer.yaml

echo "check all crossplane packages are ready"
for i in $(kubectl get pkg -o name); do kubectl wait --for=condition=Healthy $i; done

status_log $TYPE_SUCCESS "grsf-integration is Installed"

cli_log "cluster install END"


rm /tmp/values-override.yaml

status_log $TYPE_SUCCESS "Successfuly Installed grpl"


if [ "${INSTALL_KUBEBLOCKS}" == "true" ]; then
  status_log $TYPE_INFO "Waiting for kubeblocks to be installed"
  wait
  status_log $TYPE_SUCCESS "kubeblocks is installed"
fi



if [ "${WAIT}" == "true" ]; then
  status_log $TYPE_INFO "Waiting for grpl to be ready"
  while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done && \
    sleep 5 && \
    kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s

  status_log $TYPE_SUCCESS "grpl is ready"
fi
