#!/bin/bash
set -e
. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"


cli_help() {
  grpl_license_install_cli_help
  exit 0
}

determineLicenseValue() {
    local lic="$1"
    case "$lic" in
        "starter")
            echo "starter"
            ;;
        "pro")
            echo "pro"
            ;;
        "enterprise")
            echo "enterprise"
            ;;
        *)
            echo "free"
            ;;
    esac
}


[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help


# valid arguments array
valid_args=(
    "LICENSE_KEY"
)

# check if values are already passed form terminal
# if yes? then store then in the respective vars
help_menu_cmd="grpl license install help"
extract_input_params_from_cli $valid_args "${help_menu_cmd}" $(echo "$@")

check_if_param_avaiable_in_non_interactive_mode "LICENSE_KEY" "$LICENSE_KEY" "${help_menu_cmd}"
LICENSE_KEY=$(if [ "${LICENSE_KEY}" != "" ]; then echo ${LICENSE_KEY}; else prompt_for_input_with_validation "Enter LICENSE_KEY: " "Provide the LICENSE_KEY key" "$non_empty_regex" "Input cannot be empty."; fi) || exit $?
echo "kuberenetes cluster ip: ${LICENSE_KEY}"


license=$(determineLicenseValue $LICENSE_KEY)
encoded_license=$(echo -n "$license" | base64)

status_log $TYPE_INFO "Updating the license"
existing_license=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.LIC}" | base64 --decode)
if [[ $existing_license != "" ]] && [[ $existing_license != "free" ]] && [[ $TTY == "enabled" ]]; then
    gum confirm "LIC (License) already installed. Do you want to re-install it?" || (status_log $TYPE_ERROR "LIC (License) installation canceled by the user" && exit 1)
fi

if ! kubectl patch secret grsf-config -n grpl-system --type='json' -p="[{\"op\": \"add\", \"path\": \"/data/LIC\", \"value\": \"$encoded_license\"}]" >/dev/null 2>&1; then
    status_log $TYPE_ERROR "Failed to update grsf-config secret"
    exit 1
fi

status_log $TYPE_SUCCESS "LIC (License) \"$license\" installed successfully"
