#!/bin/bash
set -e
. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"


cli_help() {
  grpl_example_deploy_cli_help
  exit 0
}

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help


extract_creds_from_secrets() {

  # Extract and decode the password and username from the secret
  if kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.password}" > /dev/null 2>&1; then
    password=$(kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.password}" | base64 --decode)
  else
    status_log $TYPE_ERROR "Failed to get creds for grpl example deployment"
    exit 1
  fi
  
  if kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.username}" > /dev/null 2>&1; then
    username=$(kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.username}" | base64 --decode)
  else
    status_log $TYPE_ERROR "Failed to get creds for grpl example deployment"
    exit 1
  fi

}

extract_domain_from_grpl_config


display_deployment_details(){
  namespace=$1
  resource_name=$2
  domain=$3

  if [[ "$wait" == "true" ]]; then
    status_log $TYPE_INFO "Waiting for deployment to be ready"
    if ! eval "$(getGumSpinnerOrLogger "waiting for grapi resource to be ready") kubectl rollout status -n ${namespace} deploy ${namespace}-${resource_name}-grapi"; then
      status_log $TYPE_ERROR "Failed to wait for grapi resource"
      exit 1
    fi
    status_log $TYPE_SUCCESS "grapi resource is ready"
    if ! eval "$(getGumSpinnerOrLogger "waiting for gruim resource to be ready") kubectl rollout status -n ${namespace} deploy ${namespace}-${resource_name}-gruim"; then
      status_log $TYPE_ERROR "Failed to wait for gruim resource"
      exit 1
    fi
    status_log $TYPE_SUCCESS "gruim resource is ready"

    status_log $TYPE_SUCCESS "Deployment is ready"
  fi

  if [[ "$wait" != "true" ]]; then
    status_log $TYPE_INFO "It will take a few minutes for the deployment to be ready"
  fi 

  if [ "$clusterdomain" != "" ]; then
    status_log $TYPE_INFO "Deployment Details"
    status_log $TYPE_INFO "Following resources are deployed in ${namespace} namespace"
    status_log $TYPE_INFO "Resource Name: ${resource_name}-grapi can be accessed at ${namespace}-${resource_name}-grapi.${clusterdomain}"
    status_log $TYPE_INFO "Resource Name: ${resource_name}-gruim can be accessed at ${namespace}-${resource_name}-gruim.${clusterdomain}"
  fi

}


# valid arguments array
valid_args=(
    "GRAS_TEMPLATE"
    "DB_TYPE"
    "KUBE_CONTEXT"
    "wait"
  )

# check if values are already passed form terminal
# if yes? then store then in the respective vars
help_menu_cmd="grpl resource deploy help"
extract_input_params_from_cli $valid_args "${help_menu_cmd}" "$@"


#check if input from params is valid or not
check_if_param_avaiable_in_non_interactive_mode "GRAS_TEMPLATE" "$GRAS_TEMPLATE" "${help_menu_cmd}"
if [ "${GRAS_TEMPLATE}" != "" ]; then 
  is_correct_grapple_applicationsets_provided $GRAS_TEMPLATE 
fi
GRAS_TEMPLATE=$(if [ "${GRAS_TEMPLATE}" != "" ]; then echo ${GRAS_TEMPLATE}; else gum choose  --header "Please select template you want create" $DB_FILE $DB_MYSQL_MODEL_BASED $DB_MYSQL_DISCOVERY_BASED; fi) || exit $?
status_log $TYPE_DEFAULT "GRAS_TEMPLATE: ${GRAS_TEMPLATE}"


MODELS='customer:{"base":"Entity","name":"customer","properties":{"id":{"type":"number","id":true,"required":true,"generated":true},"customername":{"type":"string"},"emaildomain":{"type":"string","required":true},"datecreated":{"type":"date","required":false},"datelastupdated":{"type":"date","required":false}}}|email:{"base":"Entity","name":"email","properties":{"id":{"type":"number","id":true,"required":true,"generated":true},"emaildomain":{"type":"string","required":true},"email":{"type":"string","required":true}}}|cluster:{"base":"Entity","name":"cluster","properties":{"id":{"type":"number","id":true,"required":true,"generated":true},"clustername":{"type":"string"},"clusteridentifier":{"type":"string"},"clusterdns":{"type":"string"},"customerId":{"type":"string"},"emailId":{"type":"string","required":true},"datecreated":{"type":"date","required":false},"datelastupdated":{"type":"date","required":false}}}'

DATASOURCES='classicmodelsid:{"name":"classicmodelsid","connector":"mysql","url":"","host":"aurora-mysql-test.cpfyybdyajmx.eu-central-1.rds.amazonaws.com","port":"3306","user":"%s","password":"%s","database":"classicmodelsid"}'

RELATIONS='employees:{"destinationModel":"Employees","foreignKeyName":"employeesId","registerInclusionResolver":true,"relationName":"employees","relationType":"belongsTo","sourceModel":"Customers"}'

SOURCE_DATA=https://raw.githubusercontent.com/grapple-solutions/grapple-test-data/main/classicmodelsid/classicmodelsid.sql

DATABASE_SCHEMA="classicmodelsid"

# grpl r d db-file
if [[ "${GRAS_TEMPLATE}" == $DB_FILE ]]; then
  grpl r d --params --KUBE_CONTEXT=$KUBE_CONTEXT --GRAS_NAME=gras-$DB_FILE --KUBE_NS=gras-$DB_FILE --GRAS_TEMPLATE=$DB_FILE --SOURCE_DATA="https://raw.githubusercontent.com/grapple-solutions/grapple-test-data/main/classicmodelsid/db.json" --MODELS=$MODELS --DB_FILE_PATH=/tmp/data.json --ENABLE_GRUIM=false  --RELATIONS=""
  display_deployment_details "gras-$DB_FILE" "gras-$DB_FILE" $clusterdomain
  exit 0
fi


#check if input from params is valid or not
check_if_param_avaiable_in_non_interactive_mode "DB_TYPE" "$DB_TYPE" "${help_menu_cmd}"
if [ "${DB_TYPE}" != "" ]; then 
  is_correct_db_type_provided $DB_TYPE 
fi
DB_TYPE=$(if [ "${DB_TYPE}" != "" ]; then echo ${DB_TYPE}; else gum choose  --header "Please select the database type you want" $INTERNAL_DB $EXTERNAL_DB; fi) || exit $?
status_log $TYPE_DEFAULT "DB_TYPE: ${DB_TYPE}"


#grpl r d mysql model  internal
if [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_MODEL_BASED ]] && [[ "${DB_TYPE}" == $INTERNAL_DB ]]; then
  grpl r d --params --KUBE_CONTEXT=${KUBE_CONTEXT} --GRAS_NAME=gras-mysql --KUBE_NS=grpl-mdl-int --GRAS_TEMPLATE=$DB_MYSQL_MODEL_BASED --DB_TYPE=$INTERNAL_DB --DATABASE_SCHEMA=classicmodelsid --MODELS=$MODELS --RELATIONS="" --ENABLE_GRUIM=true --SOURCE_DATA=$SOURCE_DATA
  display_deployment_details "grpl-mdl-int" "gras-mysql" $clusterdomain
  exit 0
fi


#grpl r d mysql model  external
if [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_MODEL_BASED ]] && [[ "${DB_TYPE}" == $EXTERNAL_DB ]]; then
  extract_creds_from_secrets
  DATASOURCES=$(printf "$DATASOURCES\n" "$username" "$password")
  grpl r d --params --KUBE_CONTEXT=${KUBE_CONTEXT} --GRAS_NAME=gras-mysql --KUBE_NS=grpl-mdl-ext --GRAS_TEMPLATE=$DB_MYSQL_MODEL_BASED --DB_TYPE=$EXTERNAL_DB --DATABASE_SCHEMA=classicmodelsid --MODELS=$MODELS --DATASOURCES=$DATASOURCES --RELATIONS=""  --ENABLE_GRUIM=true --SOURCE_DATA=$SOURCE_DATA
  display_deployment_details "grpl-mdl-ext" "gras-mysql" $clusterdomain
  exit 0
fi

#grpl r d mysql discovery  internal
if [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_DISCOVERY_BASED ]] && [[ "${DB_TYPE}" == $INTERNAL_DB ]]; then
  grpl r d --params --KUBE_CONTEXT=$KUBE_CONTEXT --GRAS_NAME=gras-mysql --KUBE_NS=grpl-disc-int --GRAS_TEMPLATE=$DB_MYSQL_DISCOVERY_BASED --DB_TYPE=$INTERNAL_DB --SOURCE_DATA=$SOURCE_DATA --AUTO_DISCOVERY=true --RELATIONS=$RELATIONS --ENABLE_GRUIM=true  --DATABASE_SCHEMA=$DATABASE_SCHEMA
  display_deployment_details "grpl-disc-int" "gras-mysql" $clusterdomain
  exit 0
fi

#grpl r d mysql discovery  external
if [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_DISCOVERY_BASED ]] && [[ "${DB_TYPE}" == $EXTERNAL_DB ]]; then
  extract_creds_from_secrets
  DATASOURCES=$(printf "$DATASOURCES\n" "$username" "$password")
  grpl r d --params --KUBE_CONTEXT=$KUBE_CONTEXT --GRAS_NAME=gras-mysql --KUBE_NS=grpl-disc-ext --GRAS_TEMPLATE=$DB_MYSQL_DISCOVERY_BASED --DB_TYPE=$EXTERNAL_DB --DATASOURCES=$DATASOURCES --SOURCE_DATA=$SOURCE_DATA --AUTO_DISCOVERY=true --RELATIONS=$RELATIONS --ENABLE_GRUIM=true --DATABASE_SCHEMA=$DATABASE_SCHEMA
  display_deployment_details "grpl-disc-ext" "gras-mysql" $clusterdomain
  exit 0
fi
