#!/bin/bash
set -e
. "$GRPL_WORKDIR/common"

# NS=$(prompt_for_input_with_validation "Enter namespace: " "grapple-demo-namspace" "$non_empty_regex" "Namespace cannot be empty.") || exit $?
# TESTNS=$(prompt_for_input_with_validation "Enter namespace for test case: " "grapple-test-demo-namspace: " "$non_empty_regex" "Namespace for test case cannot be empty.") || exit $?
# TESTNSDB=$(prompt_for_input_with_validation "Enter namespace for test case with DB: " "grapple-testdb-demo-namspace" "$non_empty_regex" "Namespace for test case with DB cannot be empty.") || exit $?
NS=grpl-system
TESTNS=grpl-dbfile
TESTNSDB=grpl-db
awsregistry="p7h7z5g3"

cli_help_cluster_deploy() {
  echo "
Command: grpl example deploy

Usage: 
  example deploy

Variables:
  example     all / db / dbfile
  EDITION = "grpl-basic-all" / "grpl-basic" / "grpl-basic-db" / "grpl-basic-dbfile"
"
  exit 1
}

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help_cluster_deploy


cli_log "example deploy BEGIN"


EDITION=$(if [ "${EDITION}" != "" ]; then echo ${EDITION}; else gum choose "grpl-basic-all" "grpl-basic" "grpl-basic-db" "grpl-basic-dbfile"; fi) || exit $? # not sure if both GRAPPLE_VERSION & VERSION are needed
echo "installing grapple edition: ${EDITION}"


if [ "${EDITION}" = "grpl-basic-dbfile" ] || [ "${EDITION}" = "grpl-basic-all" ]; then

  echo 
  echo ----
  echo "deploy test case: dbfile"

  echo "check xrds are available"
  CRD=grapi && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
  CRD=compositegrappleapis && echo "wait for $CRD to be deployed:" && until kubectl explain $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
  CRD=composition/grapi.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl get $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"
  CRD=composition/muim.grsf.grpl.io && echo "wait for $CRD to be deployed:" && until kubectl get $CRD >/dev/null 2>&1; do echo -n .; sleep 1; done && echo "$CRD deployed"

  helm upgrade --install ${TESTNS} oci://public.ecr.aws/${awsregistry}/gras-deploy -n ${TESTNS} -f $GRPL_WORKDIR/files/test.yaml --create-namespace 
  
  while ! kubectl get po -n ${TESTNS} -l app.kubernetes.io/name=grapi 2>/dev/null | grep grapi; do echo -n .; sleep 1; done

  sleep 10

  if [ "$(kubectl get -n ${TESTNS} $(kubectl get po -n ${TESTNS} -l app.kubernetes.io/name=grapi -o name) --template '{{(index .status.initContainerStatuses 0).ready}}')" = "false" ]; then
    kubectl cp -n ${TESTNS} $GRPL_WORKDIR/files/db.json $(kubectl get po -n ${TESTNS} -l app.kubernetes.io/name=grapi -o name | sed "s,pod/,,g"):/tmp/db.json -c init-db
  fi

  # wait for the grapi of the first test case to be deployed
  # while ! kubectl wait deployment -n ${TESTNS} ${TESTNS}-${TESTNS}-grapi --for condition=Progressing=True 2>/dev/null; do echo -n .; sleep 2; done

fi


if [ "${EDITION}" = "grpl-basic-db" ] || [ "${EDITION}" = "grpl-basic-all" ]; then

  if ! kbcli >/dev/null 2>&1; then
    curl -fsSL https://kubeblocks.io/installer/install_cli.sh | bash 
    sleep 2
  fi

  if ! kbcli cluster list 2>/dev/null || ! kbcli kubeblocks status; then
    kbcli kubeblocks install --set image.registry="docker.io"
  fi

  echo 
  echo ----
  echo "deploy test case: db"

  for i in $(kubectl get clusterversion -o name); do 
    kubectl get $i -o yaml | sed "s,infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com,docker.io,g" | kubectl apply -f -; 
  done

  kubectl create ns ${TESTNSDB} 2>/dev/null || true

  kubectl apply -n ${TESTNSDB} -f $GRPL_WORKDIR/files/db.yaml

  sleep 10 

  kubectl rollout status -n ${TESTNSDB} --watch --timeout=600s sts grappledb-mysql

  sleep 5 

  helm upgrade --install ${TESTNSDB} oci://public.ecr.aws/${awsregistry}/gras-deploy -n ${TESTNSDB} -f $GRPL_WORKDIR/files/testdb.yaml --create-namespace 

  while ! kubectl get po -n ${TESTNSDB} -l app.kubernetes.io/name=grapi 2>/dev/null | grep grapi; do echo -n .; sleep 1; done

  sleep 30

  if [ "$(kubectl get -n ${TESTNSDB} $(kubectl get po -n ${TESTNSDB} -l app.kubernetes.io/name=grapi -o name) --template '{{(index .status.initContainerStatuses 0).ready}}')" = "false" ]; then
    kubectl cp -n ${TESTNSDB} $GRPL_WORKDIR/files/classicmodelsid.tgz $(kubectl get po -n ${TESTNSDB} -l app.kubernetes.io/name=grapi -o name | sed "s,pod/,,g"):/tmp/classicmodelsid.tgz -c init-db
  fi

fi


cli_log "example deploy END"
