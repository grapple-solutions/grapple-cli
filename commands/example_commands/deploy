#!/bin/bash
set -e

. "$GRPL_WORKDIR/utils/common"
. "$GRPL_WORKDIR/utils/checks"
. "$GRPL_WORKDIR/utils/help_menus"


cli_help() {
  grpl_example_deploy_cli_help
  exit 0
}

[ "$1" = "help" ] || [ "$1" = "h" ] && cli_help
status_log $TYPE_INFO "Please visit https://github.com/grapple-solution/grpl-gras-examples view the available examples before deploying"

check_if_cluster_is_accessible
check_if_grpl_is_installed


extract_creds_from_secrets() {

  # Extract and decode the password and username from the secret
  if kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.password}" > /dev/null 2>&1; then
    password=$(kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.password}" | base64 --decode)
  else
    status_log $TYPE_ERROR "Failed to get creds for grpl example deployment"
    exit 1
  fi
  
  if kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.username}" > /dev/null 2>&1; then
    username=$(kubectl get secret -n grpl-system grpl-e-d-external-sec -o jsonpath="{.data.username}" | base64 --decode)
  else
    status_log $TYPE_ERROR "Failed to get creds for grpl example deployment"
    exit 1
  fi

}

extract_domain_from_grpl_config


display_deployment_details(){
  namespace=$1
  resource_name=$2
  domain=$3

  if [[ "$wait" == "true" ]]; then
    sleep 5
    status_log $TYPE_INFO "Waiting for deployment to be ready"
    if ! eval "$(getGumSpinnerOrLogger "waiting for grapi resource to be ready") kubectl rollout status -n ${namespace} deploy ${namespace}-${resource_name}-grapi"; then
      status_log $TYPE_ERROR "Failed to wait for grapi resource"
      exit 1
    fi
    status_log $TYPE_SUCCESS "grapi resource is ready"
    if ! eval "$(getGumSpinnerOrLogger "waiting for gruim resource to be ready") kubectl rollout status -n ${namespace} deploy ${namespace}-${resource_name}-gruim"; then
      status_log $TYPE_ERROR "Failed to wait for gruim resource"
      exit 1
    fi
    status_log $TYPE_SUCCESS "gruim resource is ready"

    status_log $TYPE_SUCCESS "Deployment is ready"
  fi

  if [[ "$wait" != "true" ]]; then
    status_log $TYPE_INFO "It will take a few minutes for the deployment to be ready"
  fi 

  if [ "$clusterdomain" != "" ]; then
    status_log $TYPE_INFO "Deployment Details"
    status_log $TYPE_INFO "Following resources are deployed in ${namespace} namespace"
    status_log $TYPE_INFO "Resource Name: ${resource_name}-grapi can be accessed at ${namespace}-${resource_name}-grapi.${clusterdomain}"
    status_log $TYPE_INFO "Resource Name: ${resource_name}-gruim can be accessed at ${namespace}-${resource_name}-gruim.${clusterdomain}"
  fi

}

clone_github_repo_and_validate_yaml(){ 

  if [ -d "/tmp/grpl-gras-examples" ]; then
    if ! rm -rf /tmp/grpl-gras-examples; then
      status_log $TYPE_ERROR "Failed to remove existing grpl-gras-examples directory"
      exit 1
    fi
  fi

  # Clone the repository
  if ! eval "$(getGumSpinnerOrLogger "cloning grpl-gras-examples repository") git clone https://github.com/grapple-solution/grpl-gras-examples.git /tmp/grpl-gras-examples"; then
    status_log $TYPE_ERROR "Failed to clone grpl-gras-examples repository"
    exit 1
  fi


  # Change to repo directory
  GITHUB_PATH="/tmp/grpl-gras-examples/${GITHUB_PATH}"   

  # Check if GITHUB_PATH exists and is a valid YAML file
  if [ ! -f "${GITHUB_PATH}" ]; then
    status_log $TYPE_ERROR "File ${GITHUB_PATH} does not exist in the repository"
    exit 1
  fi

  if [[ "${GITHUB_PATH}" != *.yaml && "${GITHUB_PATH}" != *.yml ]]; then
    status_log $TYPE_ERROR "File ${GITHUB_PATH} is not a YAML file"
    exit 1
  fi

  # Extract namespace from manifest
  KUBE_NS=$(yq eval 'select(.kind == "GrappleApplicationSet") | .metadata.namespace' "${GITHUB_PATH}")
  if [ -z "${KUBE_NS}" ]; then
    status_log $TYPE_ERROR "Could not find namespace in ${GITHUB_PATH}"
    exit 1
  fi

  # Extract gras name  from manifest
  GRAS_NAME=$(yq eval 'select(.kind == "GrappleApplicationSet") | .metadata.name' "${GITHUB_PATH}")
  
  if [ -z "${GRAS_NAME}" ]; then
    status_log $TYPE_ERROR "Could not find resource name in ${GITHUB_PATH}"
    exit 1
  fi

  # Check if namespace exists, create if it doesn't
  if ! kubectl get namespace "${KUBE_NS}" >/dev/null 2>&1; then
    status_log $TYPE_INFO "Creating namespace ${KUBE_NS}"
    if ! eval "$(getGumSpinnerOrLogger "creating namespace ${KUBE_NS}") kubectl create namespace ${KUBE_NS}"; then
      status_log $TYPE_ERROR "Failed to create namespace ${KUBE_NS}"
      exit 1
    fi
  fi

}

deploy_from_github(){

  # Check if GITHUB_PATH exists and is a valid YAML file
  if [ ! -f "${GITHUB_PATH}" ]; then
    status_log $TYPE_ERROR "File ${GITHUB_PATH} does not exist in the repository"
    exit 1
  fi

  if [[ "${GITHUB_PATH}" != *.yaml && "${GITHUB_PATH}" != *.yml ]]; then
    status_log $TYPE_ERROR "File ${GITHUB_PATH} is not a YAML file"
    exit 1
  fi

  # Deploy the manifest
  DISPLAY_PATH=${GITHUB_PATH#/tmp/grpl-gras-examples}
  status_log $TYPE_INFO "Deploying manifest from ${DISPLAY_PATH}"
  if ! eval "$(getGumSpinnerOrLogger "deploying manifest") kubectl apply -f ${GITHUB_PATH}"; then
    status_log $TYPE_ERROR "Failed to deploy manifest from ${DISPLAY_PATH}"
    exit 1
  fi

  status_log $TYPE_SUCCESS "Successfully deployed manifest from ${DISPLAY_PATH}"
  display_deployment_details $KUBE_NS $GRAS_NAME $clusterdomain

}


create_external_db_secret(){
    # now create secret to store the creds
    GRAS_NAME=$1
    KUBE_NS=$2

    extract_creds_from_secrets
    host="aurora-mysql-test.cpfyybdyajmx.eu-central-1.rds.amazonaws.com"
    port="3306"

    SECRET_NAME="${GRAS_NAME}-conn-credential"

    # Check if the secret exists
    if kubectl get secret "${SECRET_NAME}" -n "${KUBE_NS}" >/dev/null 2>&1; then
        echo "Secret ${SECRET_NAME} exists. Deleting it..."
        kubectl delete secret "${SECRET_NAME}" -n "${KUBE_NS}"
        if [ $? -eq 0 ]; then
            echo "Secret ${SECRET_NAME} deleted successfully."
        else
            status_log $TYPE_ERROR "Failed to delete secret ${SECRET_NAME}."
            status_log $TYPE_ERROR "Failed to deploy resource"
            exit 1
        fi
    else
        echo "Secret ${SECRET_NAME} does not exist. Proceeding to create it..."
    fi

    # Create the secret
    echo "Creating secret ${SECRET_NAME}..."
    kubectl create secret generic "${SECRET_NAME}" \
    --from-literal=host="${host}" \
    --from-literal=password="${password}" \
    --from-literal=port="${port}" \
    --from-literal=username="${username}" \
    -n "${KUBE_NS}"

    if [ $? -eq 0 ]; then
        echo "Secret ${SECRET_NAME} created successfully in namespace ${KUBE_NS}."
    else
        status_log $TYPE_ERROR "Failed to create secret ${SECRET_NAME}."
        status_log $TYPE_ERROR "Failed to deploy resource"
        exit 1
    fi
}

# valid arguments array
valid_args=(
    "GRAS_TEMPLATE"
    "DB_TYPE"
    "KUBE_CONTEXT"
    "wait"
  )


# check if values are already passed form terminal
# if yes? then store then in the respective vars
help_menu_cmd="grpl resource deploy help"
extract_input_params_from_cli $valid_args "${help_menu_cmd}" "$@"

#check if input from params is valid or not
check_if_param_avaiable_in_non_interactive_mode "GRAS_TEMPLATE" "$GRAS_TEMPLATE" "${help_menu_cmd}"
if [ "${GRAS_TEMPLATE}" != "" ]; then 
  is_correct_grapple_applicationsets_provided $GRAS_TEMPLATE 
fi
GRAS_TEMPLATE=$(if [ "${GRAS_TEMPLATE}" != "" ]; then echo ${GRAS_TEMPLATE}; else gum choose  --header "Please select template you want create" $DB_FILE $DB_CACHE_REDIS $DB_MYSQL_MODEL_BASED $DB_MYSQL_DISCOVERY_BASED; fi) || exit $?
status_log $TYPE_DEFAULT "GRAS_TEMPLATE: ${GRAS_TEMPLATE}"


# grpl r d db-file
if [[ "${GRAS_TEMPLATE}" == $DB_FILE ]]; then
  GITHUB_PATH="db-file/resource.yaml"
  clone_github_repo_and_validate_yaml
  deploy_from_github
elif [[ "${GRAS_TEMPLATE}" == $DB_CACHE_REDIS ]]; then
  GITHUB_PATH="db-cache-redis/resource.yaml"
  clone_github_repo_and_validate_yaml
  deploy_from_github
fi


#check if input from params is valid or not
check_if_param_avaiable_in_non_interactive_mode "DB_TYPE" "$DB_TYPE" "${help_menu_cmd}"
if [ "${DB_TYPE}" != "" ]; then 
  is_correct_db_type_provided $DB_TYPE 
fi
DB_TYPE=$(if [ "${DB_TYPE}" != "" ]; then echo ${DB_TYPE}; else gum choose  --header "Please select the database type you want" $INTERNAL_DB $EXTERNAL_DB; fi) || exit $?
status_log $TYPE_DEFAULT "DB_TYPE: ${DB_TYPE}"


#grpl r d mysql model  internal
if [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_MODEL_BASED ]] && [[ "${DB_TYPE}" == $INTERNAL_DB ]]; then
  GITHUB_PATH="db-mysql-model-based/internal_resource.yaml"
  clone_github_repo_and_validate_yaml
  kubeblocks_installation

#grpl r d mysql model  external
elif [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_MODEL_BASED ]] && [[ "${DB_TYPE}" == $EXTERNAL_DB ]]; then
  GITHUB_PATH="db-mysql-model-based/external_resource.yaml"
  clone_github_repo_and_validate_yaml
  create_external_db_secret $GRAS_NAME $KUBE_NS "aurora-mysql-test.cpfyybdyajmx.eu-central-1.rds.amazonaws.com"

#grpl r d mysql discovery  internal
elif [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_DISCOVERY_BASED ]] && [[ "${DB_TYPE}" == $INTERNAL_DB ]]; then
  GITHUB_PATH="db-mysql-discovery-based/internal_resource.yaml"
  clone_github_repo_and_validate_yaml
  kubeblocks_installation  

#grpl r d mysql discovery  external
elif [[ "${GRAS_TEMPLATE}" == $DB_MYSQL_DISCOVERY_BASED ]] && [[ "${DB_TYPE}" == $EXTERNAL_DB ]]; then
  GITHUB_PATH="db-mysql-discovery-based/external_resource.yaml"
  clone_github_repo_and_validate_yaml
  create_external_db_secret $GRAS_NAME $KUBE_NS "aurora-mysql-test.cpfyybdyajmx.eu-central-1.rds.amazonaws.com"
fi


deploy_from_github