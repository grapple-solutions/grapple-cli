#!/bin/bash

set -e

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
. "$SCRIPT_DIR/../utils/constants"


CLUSTERNAME=marketplace-test
echo "checking if cluster exists"
if civo k8s show "$CLUSTERNAME" > /dev/null 2>&1; then
  echo "Cluster '$CLUSTERNAME' exists, exiting the testcase"
  exit 404
fi

echo "Cluster '$CLUSTERNAME' does not exist."
echo "creating cluster ${CLUSTERNAME}"
civo k8s create ${CLUSTERNAME} --size=g4c.kube.small --nodes=2 --applications=traefik2-nodeport,civo-cluster-autoscaler,metrics-server,grapple-solution-framework && while ! civo k8s config ${CLUSTERNAME} --save --switch >/dev/null 2>&1; do echo -n "."; sleep 5; done

echo ""
echo "waiting for grapple to be ready"
while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done && \
  sleep 5 && \
  kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=300s

echo ""
echo "deploying example"
grpl e d --GRAS_TEMPLATE=$DB_MYSQL_DISCOVERY_BASED --DB_TYPE=$EXTERNAL_DB

echo "waiting for example to be ready"
kubectl rollout status -n grpl-disc-ext deploy grpl-disc-ext-gras-mysql-grapi grpl-disc-ext-gras-mysql-gruim

echo "example is ready"

echo "now testing gruim"

echo "Extracting base URL from muim resource..."
base_url=$(kubectl get muim -n "$namespace" "$namespace-$resource_name-gruim" -o jsonpath="{.spec.remoteentry}" 2>/dev/null | awk -F/ 'OFS="/" {$NF=""; sub(/\/$/, ""); print}')
if [[ -z "$base_url" ]]; then
    echo "Failed to extract base URL from muim resource for $namespace/$resource_name."
    exit 404
fi

echo "testing UI at $base_url"
STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" $base_url)

if [ "$STATUS" -eq 200 ]; then
    echo "UI is working fine!"
    echo "destroying cluster ${CLUSTERNAME}"
    civo k8s delete marketplace-test -y
    echo "done"
else
    echo "UI is not working. HTTP Status: $STATUS"
    exit 404
fi

