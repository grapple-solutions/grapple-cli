#!/bin/bash

. "$GRPL_WORKDIR/utils/common"

generate_cli_web_doc() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    grpl_cli_installation_help $WEB_DOC
    grpl_cli_inside_docker $WEB_DOC
    grpl_cli_help $WEB_DOC
    grpl_cluster_cli_help $WEB_DOC
    grpl_example_cli_help $WEB_DOC
    grpl_install_cli_help $WEB_DOC
    grpl_upgrade_cli_help $WEB_DOC
    grpl_version_cli_help $WEB_DOC
    grpl_aws_cli_help $WEB_DOC
    grpl_aws_install_cli_help $WEB_DOC
    grpl_application_cli_help $WEB_DOC
    grpl_application_init_cli_help $WEB_DOC
    grpl_application_update_cli_help $WEB_DOC
    grpl_cluster_create_cli_help $WEB_DOC
    grpl_cluster_install_cli_help $WEB_DOC
    grpl_cluster_patch_cli_help $WEB_DOC
    grpl_cluster_status_cli_help $WEB_DOC
    grpl_cluster_connect_cli_help $WEB_DOC
    grpl_example_deploy_cli_help $WEB_DOC
    grpl_example_status_cli_help $WEB_DOC
    grpl_resource_cli_help $WEB_DOC
    grpl_resource_deploy_cli_help $WEB_DOC
    grpl_dev_cli_help $WEB_DOC
    grpl_grapi_cli_help $WEB_DOC
    grpl_gruim_cli_help $WEB_DOC
    grpl_license_cli_help $WEB_DOC
    grpl_license_install_cli_help $WEB_DOC
    grpl_license_remove_cli_help $WEB_DOC
    grpl_license_status_cli_help $WEB_DOC
    grpl_ai_cli_help $WEB_DOC
    grpl_ai_resource_cli_help $WEB_DOC
     doc="
= grpl cli Documentation - $(cat $GRPL_WORKDIR/VERSION)
:toc: left
:toclevels: 3
:sectanchors:
:sectlinks:
:sectnums:

== Introduction

the grapple cli

https://grapple-solutions.com/[grapple solution^]


$grpl_cli_installation_doc
$grpl_cli_inside_docker_doc
$grpl_cli_doc
$grpl_application_doc
$grpl_application_init_doc
$grpl_application_update_doc
$grpl_cluster_doc
$grpl_cluster_create_doc
$grpl_cluster_connect_doc 
$grpl_cluster_install_doc
$grpl_cluster_patch_doc
$grpl_cluster_status_doc
$grpl_aws_doc
$grpl_aws_install_doc
$grpl_example_doc
$grpl_example_deploy_doc
$grpl_example_status_doc
$grpl_resource_doc
$grpl_resource_deploy_doc
$grpl_install_doc
$grpl_upgrade_doc
$grpl_version_doc
$grpl_dev_doc
$grpl_grapi_doc
$grpl_gruim_doc
$grpl_license_doc
$grpl_license_install_doc
$grpl_license_remove_doc
$grpl_license_status_doc
$grpl_ai_doc
$grpl_ai_resource_doc

"
echo "$doc" > "$GRPL_WORKDIR/grpl-cli-web-doc.adoc"
        asciidoctor "$GRPL_WORKDIR/grpl-cli-web-doc.adoc"
        status_log $TYPE_INFO "please visit file://$GRPL_WORKDIR/grpl-cli-web-doc.html to view the grpl documentation"
        
}

generate_crds_web_doc() {

    failure=0
    if kubectl explain gras.spec >/dev/null 2>&1; then
        gras_doc=$(kubectl explain gras.spec)
    else 
        status_log "$TYPE_ERROR" "Web doc won't include documentation for gras because its not deployed on the cluster"
        ((failure++))
    fi
    if kubectl explain grapi.spec >/dev/null 2>&1; then
        grapi_doc=$(kubectl explain grapi.spec)
    else 
        status_log "$TYPE_ERROR" "Web doc won't include documentation for grapi because its not deployed on the cluster"
        ((failure++))
    fi
    if kubectl explain gruim.spec >/dev/null 2>&1; then
        gruim_doc=$(kubectl explain gruim.spec)
    else
        status_log "$TYPE_ERROR" "Web doc won't include documentation for gruim because its not deployed on the cluster"
        ((failure++))
    fi
    if [ $failure -eq 3 ]; then
      status_log $TYPE_ERROR "Failed to generate CRDs web doc, because no resource is deployed on the cluster"
      exit 1
    fi

    grpl_version="$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.GRAPPLE_VERSION}" | base64 --decode)"
    if [ "$grpl_version" == "" ]; then
      grpl_version="unknown"
    fi

    status_log $TYPE_INFO "Going to generate grapple web doc. This might take some time"
    crds_doc="
= grpl CRDs Documentation - $grpl_version
:toc: left
:toclevels: 3
:sectanchors:
:sectlinks:
:sectnums:

== Introduction

the grapple CRDs

https://grapple-solutions.com/[grapple solution^]


$(echo "$gras_doc" | transform_crds_docs_into_web_docs_format "gras.spec" "== gras - $grpl_version")
$(echo "$grapi_doc" | transform_crds_docs_into_web_docs_format "grapi.spec" "== grapi - $grpl_version")
$(echo "$gruim_doc" | transform_crds_docs_into_web_docs_format "gruim.spec" "== gruim - $grpl_version")

"

echo "$crds_doc" > "$GRPL_WORKDIR/grpl-crds-web-doc.adoc"
        asciidoctor "$GRPL_WORKDIR/grpl-crds-web-doc.adoc"
        status_log $TYPE_INFO "please visit file://$GRPL_WORKDIR/grpl-crds-web-doc.html to view the grpl documentation"
        
}


grpl_web_doc_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl doc"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl doc"
        meta=""
    fi

    grpl_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Usage:
  grpl doc [flags]
  grpl doc [command]

Available Commands:

  cli           generate web documentation for grpl cli
  crds          generate web documentation for custom grpl CRDs
  help or h     help about any command
  ui            generate web documentation for ui module properties

Examples:

    grpl doc help
    grpl doc cli
    grpl doc crds
    grpl doc ui

"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_doc"  >&2
    fi
}




grpl_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl"
        meta=""
    fi

    grpl_cli_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl cli

Usage: 

    grpl [command]

Available Commands:

    i or install                Installation
    c or cluster                Cluster commands
    e or example                Example commands
    v or version                List version
    u or upgrade                Upgrade grpl
    a or app or application     Initialize grpl application
    d or dev                    Devspace Dev
    doc                         Documentation
    grapi                       Grapi commands
    gruim                       Gruim commands
    ai                          Grapple AI
    *                           Help menu
    
Examples:    

    grpl i [commands]    or    grpl install [commands]
    grpl c [commands]    or    grpl cluster [commands]     
    grpl e [commands]    or    grpl example [commands]     
    grpl v [commands]    or    grpl version [commands]     
    grpl u [commands]    or    grpl upgrade [commands]  
    grpl a [commands]    or    grpl app     [commands]    or    grpl application [commands] 
    grpl d [commands]    or    grpl dev [commands]
    grpl grapi [commands]
    grpl gruim [commands]
    grpl doc   [commands]
    grpl ai    [commands]
    grpl *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cli_doc"  >&2
    fi
}

grpl_application_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl application"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl application"
        meta=""
    fi

    grpl_application_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl application

Usage: 

    grpl application [command]

Available Commands:

    i or init       Initialize new grpl application
    u or update     Update the grpl application template
    *               Help menu
    
Examples:    

    grpl a i    or    grpl app init    or    grpl application init
    grpl a u    or    grpl app update  or    grpl application update
    grpl a *    or    grpl app *       or    grpl application *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_application_doc"  >&2
    fi
}




grpl_cluster_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl cluster"
        meta=""
    fi

    grpl_cluster_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl cluster

Usage: 

    grpl cluster [command]

Available Commands:

    s or status      Cluster status
    i or install     Cluster installation
    p or patch       Cluster patch
    c or create      Cluster creation
    conn or connect  Cluster connection
    *               Help menu
    
Examples:    

    grpl c s    or    grpl cluster status
    grpl c i    or    grpl cluster install    
    grpl c p    or    grpl cluster patch       
    grpl c c    or    grpl cluster create  
    grpl c conn or    grpl cluster connect
    grpl c *    or    grpl cluster *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_doc"  >&2
    fi
}

grpl_example_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl example"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl example"
        meta=""
    fi

    grpl_example_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl example

Usage: 

    grpl example [command]

Available Commands:

    s or status     status of example
    d or deploy     deploy an example
    *               Help menu
    
Examples:    

    grpl e s    or    grpl example status
    grpl e d    or    grpl example deploy
    grpl e *    or    grpl example *

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_example_doc"  >&2
    fi
}


grpl_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl install"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl install"
        meta=""
    fi

    grpl_install_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl install

Usage: 

    grpl install [command]

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_install_doc"  >&2
    fi
}


grpl_upgrade_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl upgrade"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl upgrade"
        meta=""
    fi

    grpl_upgrade_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl upgrade

Usage: 
    
    grpl upgrade [command]

Available Commands:

    h or help     Help menu
    *             to upgrade
    
Examples:    

    grpl u h    or    grpl upgrade help
    grpl u *    or    grpl upgrade *

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_upgrade_doc"  >&2
    fi
}


grpl_version_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl version"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl version"
        meta=""
    fi

    grpl_version_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl version

Usage: 

    grpl version [command]

Available Commands:

    h or help     Help menu
    *             to get version details
    
Examples:    

    grpl v h    or    grpl version help
    grpl v *    or    grpl version *

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_version_doc"  >&2
    fi
}



grpl_cluster_create_cli_help() {
    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster create"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == "$WEB_DOC" ]; then
        cli_name="=== grpl cluster create"
        meta=""
    fi

    civo_help_menu=$(civo k8s create --help | awk '
/^Notes:/ {print "        Notes:"; in_notes=1; next}
/^Flags:/ {print "        Flags:"; in_notes=0; in_flags=1; next}
/^Global Flags:/ {print "        Global Flags:"; in_flags=0; in_global_flags=1; next}
/^$/ {in_global_flags=0; next}
in_notes || in_flags || in_global_flags {print "        " $0}')  # Add 8 spaces before each line

    grpl_cluster_create_doc="
$cli_name
$meta

Description: 

    Creates cluster in specificed provider

Usage: 

  grpl cluster create [command]

Usage with params from cli: 

  grpl cluster create --params --<variable-name>=<variable value>
  e.g grpl cluster create --params --TARGET_PLATFORM=CIVO
  OR
  grpl cluster create --params --<variable-name> <variable value>
  e.g grpl cluster create --params --TARGET_PLATFORM=CIVO

  grpl cluster create --<variable-name>=<variable value>
  e.g grpl cluster create --TARGET_PLATFORM=CIVO
  OR
  grpl cluster create --<variable-name> <variable value>
  e.g grpl cluster create --TARGET_PLATFORM=CIVO

Usage with params from configfile: 

  grpl cluster create --configfile <file-name>.json
  e.g grpl cluster create --configfile grpl-create-config.json

Quick Start:

  # please use correct values for the variables
  grpl cluster create --TARGET_PLATFORM=CIVO --CIVO_CLUSTER=grapple-cluster --CIVO_REGION=fra1 --CIVO_EMAIL_ADDRESS=test@test.com --CIVO_API_KEY=1234567890 --WAIT=true
  

Available Commands:

    h or help     Help menu
    *             to create cluster
    
Examples:    

    grpl c c h    or    grpl cluster create help
    grpl c c *    or    grpl cluster create *


Parameters:

    Common Parameters:
        --target-platform,      --TARGET_PLATFORM string         On of the following - CIVO / Kubernetes / minikube / Kubefirst
        --cluster-name,         --CLUSTER_NAME    string         name of the cluster
        --civo-api-key,         --CIVO_API_KEY    string         civo api key (optional)
        --civo-region,          --CIVO_REGION     string         Available CIVO regions (e.g. fra1, lon1, phx1 or nyc1)
        --wait,                 --WAIT            string         wait = 'true' / 'false', set to 'true' if you want to wait for grpl to be ready (default is 'false')
        --auto-confirm,         --AUTO_CONFIRM    string         AUTO_CONFIRM= 'true' / 'false', set to 'true' if you want to skip confirmation prompt (default is 'true')
        --install-kubeblocks,   --INSTALL_KUBEBLOCKS string      INSTALL_KUBEBLOCKS= 'true' / 'false', set to 'true' if you want to install kubeblocks (default is 'true')


    CIVO Parameters:
$civo_help_menu
"

    if [ "$type" == "$WEB_DOC" ]; then
        return 0
    else
        echo "$grpl_cluster_create_doc"  >&2
    fi
}



grpl_cluster_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster install"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl cluster install"
        meta=""
    fi

    grpl_cluster_install_doc="
$cli_name
$meta

Description: 

    Installs grapple in specificed cluster

Usage: 

  grpl cluster install [command]

Usage with params from cli: 

  grpl cluster install --params --<variable-name>=<variable value>
  e.g grpl cluster install --params --GRAPPLE_VERSION=0.2.1
  OR
  grpl cluster install --params --<variable-name> <variable value>
  e.g grpl cluster install --params --GRAPPLE_VERSION 0.2.1

Usage with params from configfile: 

  grpl cluster install --configfile <file-name>.json
  e.g grpl cluster install --configfile grpl-config.json

Usage with values yaml: 

  grpl cluster install --values <file1>.yaml <file2>.yaml
  e.g grpl cluster install --values config-values.yaml config-values2.yaml

Quick Start:

  # please use correct values for the variables
  grpl cluster install --TARGET_PLATFORM=CIVO --CIVO_CLUSTER=grapple-cluster --CIVO_REGION=fra1 --CIVO_EMAIL_ADDRESS=test@test.com --CIVO_API_KEY=1234567890 --WAIT=true
  grpl cluster install --TARGET_PLATFORM=Kubernetes --KUBE_CONTEXT=current --WAIT=true
  grpl cluster install --TARGET_PLATFORM=minikube --WAIT=true
  grpl cluster install --TARGET_PLATFORM=Kubefirst --KUBEFIRST_CLOUD_PROVIDER=AWS --KUBEFIRST_CLOUD_REGION=us-east-1 --KUBEFIRST_CLUSTER_ID=1234567890 --KUBEFIRST_CLUSTER_NAME=grapple-cluster --WAIT=true --GRAPPLE_DNS=grapple.com
  

Available Commands:

    h or help     Help menu
    *             to install cluster
    
Examples:    

    grpl c i h    or    grpl cluster install help
    grpl c i *    or    grpl cluster install *


Parameters:

  --target-platform,            --TARGET_PLATFORM string            On of the following - CIVO / Kubernetes / minikube / Kubefirst
  --grapple-version,            --GRAPPLE_VERSION string            version of the grapple deployment e.g. '0.2.0', '0.2.1' (default is 'latest')
  --auto-confirm,               --AUTO_CONFIRM string               'false' / 'true' (default is 'false')
  --email,                      --EMAIL string                      email of the civo user
  --organization,               --ORGANIZATION string               organization
  --kube-context,               --KUBE_CONTEXT string               kubernetes context (default is 'current')
  --civo-region,                --CIVO_REGION string                Available CIVO regions (e.g. fra1, lon1, phx1 or nyc1)
  --civo-cluster,               --CIVO_CLUSTER string               CIVO cluster
  --civo-cluster-id,            --CIVO_CLUSTER_ID string            CIVO cluster ID
  --civo-email-address,         --CIVO_EMAIL_ADDRESS string         email address of your CIVO account
  --civo-api-key,               --CIVO_API_KEY string               api key of your CIVO account
  --cluster-ip,                 --CLUSTER_IP string                 Cluster IP address
  --kubefirst-cloud-provider,   --KUBEFIRST_CLOUD_PROVIDER string   cloud provider for kubefirst
  --kubefirst-cloud-region,     --KUBEFIRST_CLOUD_REGION string     cloud region of kubefirst cloud provider
  --kubefirst-cluster-id,       --KUBEFIRST_CLUSTER_ID string       cluster id of kubefirst cluster
  --kubefirst-cluster-name,     --KUBEFIRST_CLUSTER_NAME string     cluster name for kubefirst cluster
  --github-username,            --GITHUB_USERNAME string            github username
  --gitlab-username,            --GITLAB_USERNAME string            gitlab username
  --install-kubeblocks,         --INSTALL_KUBEBLOCKS string         'true' / 'false', set to 'true' if you want to install kubeblocks (default is 'false')
  --wait,                       --WAIT string                       'true' / 'false', set to 'true' if you want to wait for grpl to be ready (default is 'false')

" 

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_install_doc"  >&2
    fi
}


grpl_cluster_status_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster status"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl cluster status"
        meta=""
    fi

    grpl_cluster_status_doc="
$cli_name
$meta

Description: 

    Displays status of the cluster

Usage: 

    grpl cluster status [command]

Available Commands:

    h or help     Help menu
    *             to get cluster status
    
Examples:    

    grpl c s h    or    grpl cluster status help
    grpl c s *    or    grpl cluster status *
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_status_doc"  >&2
    fi
}

grpl_cluster_patch_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster patch"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl cluster patch"
        meta=""
    fi

    grpl_cluster_patch_doc="
$cli_name
$meta

Description: 

    Patches the cluster

Usage: 

    grpl cluster patch [command]

Available Commands:

    h or help     Help menu
    *             to patch cluster 
    
Examples:    

    grpl c p h    or    grpl cluster patch help
    grpl c p *    or    grpl cluster patch *
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_patch_doc"  >&2
    fi
}



grpl_example_deploy_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl example deploy"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl example deploy"
        meta=""
    fi

    grpl_example_deploy_doc="
$cli_name
$meta

Description: 

    Deploys grapple example using specified template

Usage: 

    grpl example deploy [command]

Usage with params from cli:

    grpl example deploy --params --<variable-name>=<variable value>
    e.g grpl example deploy --params --GRAS_TEMPLATE=db-file 

Usage with params from configfile:

    grpl example deploy --configfile <file-name>.json
    e.g grpl example deploy --configfile grpl-config.json

Quick Start:

  grpl example deploy --GRAS_TEMPLATE=db-file
  grpl example deploy --GRAS_TEMPLATE=db-cache-redis
  grpl example deploy --GRAS_TEMPLATE=db-mysql-model-based --DB_TYPE=internal
  grpl example deploy --GRAS_TEMPLATE=db-mysql-model-based --DB_TYPE=external
  grpl example deploy --GRAS_TEMPLATE=db-mysql-discovery-based --DB_TYPE=internal
  grpl example deploy --GRAS_TEMPLATE=db-mysql-discovery-based --DB_TYPE=external


Available Commands:

    h or help     Help menu
    *             to get deploy example test-cases
    
Examples:    

    grpl e d h    or    grpl example deploy help
    grpl e d *    or    grpl example deploy *

Parameters:

    --gras-template,        --GRAS_TEMPLATE string          gras template e.g db-file, etc
    --db-type,              --DB_TYPE string                db type it can either internal or external
    --kube-context,         --KUBE_CONTEXT string           kubectl context you want to use (default is 'current')
    --wait,                 --WAIT string                   'true' / 'false', set to 'true' if you want to wait for grpl resources (grapi/gruim) to be ready (default is 'false')
" 

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_example_deploy_doc"  >&2
    fi
}



grpl_example_status_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl example status"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl example status"
        meta=""
    fi

    grpl_example_status_doc="
$cli_name
$meta

Description: 

    Displays status of the grapple example deployment

Usage: 

    grpl example status [command]

Available Commands:

    h or help     Help menu
    *             to get example status
    
Examples:    

    grpl e s h    or    grpl example status help
    grpl e s *    or    grpl example status *
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_example_status_doc"  >&2
    fi
}



grpl_application_init_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl application init"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl application init"
        meta=""
    fi

    grpl_application_init_doc="
$cli_name
$meta

Description: 

    Initializes a new grapple application

Usage: 

    grpl application init [command]

Quick Start:

  # please use correct values for the variables
  grpl application init --PROJECT_NAME=grapple-app --GITHUBTOKEN=1234567890

Available Commands:

    h or help     Help menu
    *             to Initialize a grpl application
    
Examples:    

    grpl a i h    or    grpl app init help    or    grpl application init help
    grpl a i *    or    grpl app init *       or    grpl application init *

Parameters:

    --project-name,       --PROJECT_NAME string         Name of the project
    --auto-confirm,       --AUTO_CONFIRM string         'false' / 'true' (default is 'false')
    --github-token,       --GITHUBTOKEN string          github token to authenticate gh 
    --grapple-template,   --GRAPPLE_TEMPLATE string     the grapple-template repository to clone (default is 'grapple-solutions/grapple-template')

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_application_init_doc"  >&2
    fi
}


grpl_application_update_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl application update"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl application update"
        meta=""
    fi

    grpl_application_update_doc="
$cli_name
$meta

Description: 

    Updates a grapple application

Usage: 

    grpl application update [command]

Available Commands:

    h or help     Help menu
    *             to update a grpl application
    
Examples:    

    grpl a u h    or    grpl app update help    or    grpl application update help
    grpl a u *    or    grpl app update *       or    grpl application update *

Parameters:

    --grapple-template,   --GRAPPLE_TEMPLATE string     the grapple-template repository you cloned using grpl app init (default is 'grapple-solutions/grapple-template')

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_application_update_doc"  >&2
    fi
}


grpl_resource_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl resource"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl resource"
        meta=""
    fi

    grpl_resource_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl resource

Usage: 

    grpl resource [command]

Available Commands:

    d or deploy     to deploy a grpl template
    r or render     to render a grpl template
    *               Help menu
    
Examples:    

    grpl r d    or    grpl resource deploy
    grpl r r    or    grpl resource render
    grpl r *    or    grpl resource *     

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_resource_doc"  >&2
    fi
}

grpl_resource_deploy_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl resource deploy"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl resource deploy"
        meta=""
    fi

    grpl_resource_deploy_doc="
$cli_name
$meta

Description: 

    Deploy a grapple resource with respect to specified gras template

Usage: 

    grpl resource deploy [command]

Usage with params from cli: 

  grpl resource deploy --params --<variable-name>=<variable value>
  e.g grpl resource deploy --params --GRAS_TEMPLATE=db-file
  OR
  grpl resource deploy --params --<variable-name> <variable value>
  e.g grpl resource deploy --params --GRAS_TEMPLATE=db-file

Usage with params from configfile: 

  grpl resource deploy --configfile <file-name>.json
  e.g grpl resource deploy --configfile grpl-config.json

Quick Start:

  grpl resource deploy --KUBE_CONTEXT=current --GRAS_NAME=mysqldisci --KUBE_NS=mysqldisci --GRAS_TEMPLATE=db-mysql-discovery-based --DB_TYPE=internal --SOURCE_DATA=https://raw.githubusercontent.com/grapple-solutions/grapple-test-data/main/classicmodelsid/classicmodelsid.sql --DISCOVERIES='classicmodelsid:{"dataSource":"classicmodelsid","schema":"classicmodelsid","all":true,"disableCamelCase":false}' --RELATIONS="" --ENABLE_GRUIM=true


Available Commands:

    h or help     Help menu
    *             to deploy grpl template
    
Examples:    

    grpl r d h    or    grpl resource deploy help
    grpl r d *    or    grpl resource deploy *

Parameters:

    --kube-context,         --KUBE_CONTEXT string       kubectl context you want to use (default is 'current')
    --gras-name,            --GRAS_NAME string          name of the project
    --gras-template,        --GRAS_TEMPLATE string      gras template e.g db-file, etc
    --source-data,          --SOURCE_DATA string        source of the data
    --db-file-path,         --DB_FILE_PATH string       path where data is store, (default path is /data/db.json)
    --db-type,              --DB_TYPE string            db type it can either internal or external
    --enable-gruim,         --ENABLE_GRUIM string       to enable gruim, it can either be "Yes" or "No"
    --models,               --MODELS string             input of models 
    --relations,            --RELATIONS string          models relations
    --kube-ns,              --KUBE_NS string            namespace to deploy gras (default ns is 'default')
    --datasources,          --DATASOURCES string        data sources configs
    --discoveries,          --DISCOVERIES string        discoveries configs
    --database-schema,      --DATABASE_SCHEMA string    database schema you want to use
    --auto-discovery,       --AUTO_DISCOVERY string     to enable auto discovery it can either be 'true' or 'false' (default is 'false')
    
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_resource_deploy_doc"  >&2
    fi
}


grpl_dev_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl dev"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl dev"
        meta=""
    fi

    grpl_dev_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl dev

Usage: 

    grpl dev [command]

Quick Start:

    grpl dev --ns grapple-namespace
    grpl dev
    
Available Commands:

    h or help                           Help menu
    add                                 Adds something to devspace.yaml
    analyze                             Analyzes a kubernetes namespace and checks for potential problems
    attach                              Attaches to a container
    build                               Builds all defined images and pushes them
    cleanup                             Cleans up resources
    completion                          Outputs shell completion for the given shell (bash or zsh)
    deploy                              Deploys the project
    enter                               Open a shell to a container
    init                                Initializes DevSpace in the current folder
    list                                Lists configuration
    logs                                Prints the logs of a pod and attaches to it
    open                                Opens the space in the browser
    print                               Prints displays the configuration
    purge                               Deletes deployed resources
    remove                              Removes devspace configuration
    render                              Builds all defined images and shows the yamls that would be deployed
    reset                               Resets an cluster token
    restart                             Restarts containers where the sync restart helper is injected
    run                                 Executes a predefined command
    run-pipeline                        Starts a DevSpace pipeline
    set                                 Sets global configuration changes
    sync                                Starts a bi-directional sync between the target container and the local path
    ui                                  Opens the localhost UI in the browser
    update                              Updates the current config
    upgrade                             Upgrades the DevSpace CLI to the newest version
    use                                 Uses specific config
    version                             Prints version of devspace
    ns                                  to get namespace help menu
    ns <namespace>                      to set namespace for grapple
    enter grapi                         to enter grapi container
    enter gruim                         to enter grapi container      

Flags:
        --debug                        Prints the stack trace if an error occurs
        --disable-profile-activation   If true will ignore all profile activations
    -h, --help                         help for devspace
        --inactivity-timeout int       Minutes the current user is inactive (no mouse or keyboard interaction) until DevSpace will exit automatically. 0 to disable. Only supported on windows and mac operating systems
        --kube-context string          The kubernetes context to use
        --kubeconfig string            The kubeconfig path to use
    -n, --namespace string             The kubernetes namespace to use
        --no-colors                    Do not show color highlighting in log output. This avoids invisible output with different terminal background colors
        --no-warn                      If true does not show any warning when deploying into a different namespace or kube-context than before
        --override-name string         If specified will override the DevSpace project name provided in the devspace.yaml
    -p, --profile strings              The DevSpace profiles to apply. Multiple profiles are applied in the order they are specified
        --silent                       Run in silent mode and prevents any devspace log output except panics & fatals
    -s, --switch-context               Switches and uses the last kube context and namespace that was used to deploy the DevSpace project
        --var strings                  Variables to override during execution (e.g. --var=MYVAR=MYVALUE)
    -v, --version                      version for devspace
  
    
Examples:    

    grpl dev h    or    grpl dev help
    grpl dev
    grpl dev add
    grpl dev analyze
    grpl dev attach
    grpl dev build
    grpl dev cleanup
    grpl dev completion
    grpl dev deploy
    grpl dev enter
    grpl dev init
    grpl dev list
    grpl dev logs
    grpl dev open
    grpl dev print
    grpl dev purge
    grpl dev remove
    grpl dev render
    grpl dev reset
    grpl dev restart
    grpl dev run
    grpl dev run-pipeline
    grpl dev set
    grpl dev sync
    grpl dev ui
    grpl dev update
    grpl dev upgrade
    grpl dev use
    grpl dev version
    grpl dev ns
    grpl dev ns grapple-namespace
    grpl dev enter grapi
    grpl dev enter gruim

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_dev_doc"  >&2
    fi
}



grpl_grapi_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl grapi"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl grapi"
        meta=""
    fi

    grpl_grapi_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl grapi

Usage: 

    grpl grapi [command]

Available Commands:

    h or help                           Help menu
    grapi migrate-db                    to migrate db
    grapi --help                        to get list of grapi commands
    grapi <any command>                 to run any grapi command
    
Examples:    

    grpl grapi h    or    grpl grapi help    or    grpl grapi
    grpl grapi migrate-db 
    grpl grapi --help
    grpl grapi <any comamnd>   

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_grapi_doc"  >&2
    fi
}



grpl_gruim_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl gruim"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl gruim"
        meta=""
    fi

    grpl_gruim_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl gruim

Usage: 

    grpl gruim [command]

Available Commands:

    h or help                           Help menu
    gruim rebuild                       to rebuild gruim
    gruim --help                        to get list of gruim commands
    gruim <any command>                 to run any gruim command
    
Examples:    

    grpl gruim h    or    grpl gruim help    or    grpl gruim
    grpl gruim rebuild 
    grpl gruim --help
    grpl gruim <any comamnd>   

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_gruim_doc"  >&2
    fi
}



grpl_license_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl license"
        meta=""
    fi

    grpl_license_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl license

Usage: 

    grpl license [command]

Available Commands:

    h or help     Help menu
    i or install  to install license
    r or remove   to remove license
    s or status   to get license status
    
Examples:    

    grpl l h    or    grpl lic h    or    grpl license help
    grpl l i    or    grpl lic i    or    grpl license install
    grpl l r    or    grpl lic r    or    grpl license remove
    grpl l s    or    grpl lic s    or    grpl license status

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_doc"  >&2
    fi
}




grpl_license_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license install"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl license install"
        meta=""
    fi

    grpl_license_install_doc="
$cli_name
$meta

Description: 

    Displays help menu of grpl license install

Usage: 

    grpl license install [command]

Available Commands:

    h or help     Help menu
    *             to install license
    
Examples:    

    grpl l i h    or    grpl lic i h    or    grpl license install help
    grpl l i      or    grpl lic i      or    grpl license install

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_install_doc"  >&2
    fi
}



grpl_license_status_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license status"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl license status"
        meta=""
    fi

    grpl_license_status_doc="
$cli_name
$meta

Description: 

    Displays help menu of grpl license status

Usage: 

    grpl license status [command]

Available Commands:

    h or help     Help menu
    *             to get license status
    
Examples:    

    grpl l i h    or    grpl lic i h    or    grpl license install help
    grpl l s      or    grpl lic s      or    grpl license status

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_status_doc"  >&2
    fi
}




grpl_license_remove_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license remove"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl license remove"
        meta=""
    fi

    grpl_license_remove_doc="
$cli_name
$meta

Description: 

    Displays help menu of grpl license remove

Usage: 

    grpl license remove [command]

Available Commands:

    h or help     Help menu
    *             to remove license
    
Examples:    

    grpl l i h    or    grpl lic i h    or    grpl license install help
    grpl l r      or    grpl lic r      or    grpl license remove

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_remove_doc"  >&2
    fi
}






grpl_cli_installation_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grapple cli installation"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grapple cli installation"
        meta=""
    fi

    grpl_cli_installation_doc="
$cli_name
$meta

    brew tap grapple-solutions/grapple
    brew install grapple-cli

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cli_installation_doc"  >&2
    fi
}

grpl_cli_inside_docker() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grapple cli inside docker"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grapple cli inside docker"
        meta=""
    fi

    grpl_cli_inside_docker_doc="
$cli_name
$meta

Pulling the latest image:

    Visit https://hub.docker.com/r/grpl/grapple-cli/tags and find the latest tag 
    to pull e.g docker pull grpl/grapple-cli:0.2.159

Running the cli inside a docker container

    docker run -it --name <container-name> grpl/grapple-cli:<tag>
    e.g docker run -it --name grapple-cli-container grpl/grapple-cli:0.2.159
    OR
    docker run --rm -it --name <container-name> grpl/grapple-cli:<tag>
    e.g docker run --rm -it --name grapple-cli-container grpl/grapple-cli:0.2.159



" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cli_inside_docker_doc"  >&2
    fi
}

generate_ui_web_doc() {

    status_log $TYPE_INFO "Generating UI web doc it might take a few minutes..."

    echo "Checking for GRUIM resources across all namespaces..."
    gruim_output=$(kubectl get gruim -A)
    
    # Extract the first namespace and resource name for a synced and ready GRUIM resource
    resource_info=$(echo "$gruim_output" | awk '/True[[:space:]]*True/ {print $1, $2; exit}')
    if [[ -z "$resource_info" ]]; then
        status_log $TYPE_ERROR "No synced and ready GRUIM resource found."
        exit 1
    fi

    read namespace resource_name <<< "$resource_info"
    echo "Processing GRUIM resource: Namespace=$namespace, Name=$resource_name"

    status_log $TYPE_INFO "Checking rollout status for $namespace/$resource_name..."
    rollout_status=$(kubectl rollout status -n "$namespace" deployment/"$namespace-$resource_name-gruim" 2>&1)
    if [[ $? -ne 0 ]]; then
        status_log $TYPE_ERROR "Rollout failed or incomplete for $namespace/$resource_name. Error: $rollout_status"
        exit 1
    fi
    echo "Rollout status: $rollout_status"

    echo "Extracting base URL from muim resource..."
    muim_base_url=$(kubectl get muim -n "$namespace" "$namespace-$resource_name-gruim" -o jsonpath="{.spec.remoteentry}" 2>/dev/null | awk -F/ 'OFS="/" {$NF=""; sub(/\/$/, ""); print}')
    if [[ -z "$muim_base_url" ]]; then
        status_log $TYPE_ERROR "Failed to extract base URL from muim resource for $namespace/$resource_name."
        exit 1
    fi

    documentation_url="${muim_base_url}/documentation/"
    output_file="${GRPL_WORKDIR}/grpl-${resource_name}-web-doc.html"
    curl -o "$output_file" "$documentation_url" >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        status_log $TYPE_ERROR "Failed to download documentation from $documentation_url."
        exit 1
    fi

    echo "Patching the title"
    gruim_version=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.uiimagetag}" | base64 -d)
    awk -v version="$gruim_version" '
        /<title>/ {
            gsub(/<title>.*<\/title>/, "<title>grpl ui components props - " version "</title>");
        }
        /<h1>/ {
            gsub(/<h1>.*<\/h1>/, "<h1>grpl ui components props - " version "</h1>");
        }
        { print }
    ' "$output_file" > "${output_file}.tmp" && mv "${output_file}.tmp" "$output_file"

    status_log $TYPE_INFO "Please visit file://$output_file to view the GRPL documentation."

    exit 0
}


grpl_ai_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl ai"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl ai"
        meta=""
    fi

    grpl_ai_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl ai

Usage: 

    grpl ai [command]

Available Commands:

    ai              ai commands
    *               Help menu
    
Examples:    

    grpl ai r    or    grpl ai resource
    grpl ai *    or    grpl ai *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_ai_doc"  >&2
    fi
}



grpl_ai_resource_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl ai resource"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl ai resource"
        meta=""
    fi

    grpl_ai_resource_doc="
$cli_name
$meta

Description: 

    Helps understand and create grpl resources. 
    To make grpl ai resource deploy work, please export your openai api key in your environment variable OPENAI_API_KEY.

Usage: 

    grpl ai resource [command]

Quick Start:

    grpl ai r deploy --query=\"list all grpl crds\"
    grpl ai r deploy --query=\"show the schema of gras resource\"
    grpl ai r deploy --query=\"create a new gras resource\"

Available Commands:

    h or help     Help menu
    *             to understand and create grpl resources
    
Examples:    

    grpl ai r h    or    grpl ai resource help
    grpl ai r *    or    grpl ai resource *

Parameters:

    --resource-action,       --RESOURCE_ACTION string       deploy (deploys the resource yaml onto the cluster), render (saves the resource into a yaml file), none (does nothing)
    --query,                 --QUERY string                 your query to grapple ai, make sure to enclose the query in double quotes
    --kube-ns,               --KUBE_NS string               kubernetes namespace where you want to deploy the resource
    --auto-confirm,          --AUTO_CONFIRM string          'true' / 'false', set to 'true' if you want to skip confirmation prompt (default is 'false')
    --wait,                  --WAIT string                  'true' / 'false', set to 'true' if you want to wait for the deployment to be ready (default is 'false')

"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_ai_resource_doc"  >&2
    fi
}


grpl_aws_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl aws"
    meta="
the grapple cli
Version: $(cat $GRPL_WORKDIR/VERSION)
https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl aws"
        meta=""
    fi

    grpl_aws_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl aws

Usage: 

    grpl aws [command]

Available Commands:

    i or install    installation of grpl on was cluster
    *               Help menu
    
Examples:    

    grpl aws i    or    grpl aws install    
"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_aws_doc"  >&2
    fi
}


grpl_aws_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl aws install"
    meta="
the grapple cli
Version: $(cat $GRPL_WORKDIR/VERSION)
https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl aws install"
        meta=""
    fi

    grpl_aws_install_doc="
$cli_name
$meta

Description: 

    Installs grapple in the aws cluster

Usage: 

  grpl aws install [command]

Usage with params from cli: 

  grpl aws install --params --<variable-name>=<variable value>
  e.g grpl aws install --params --GRAPPLE_VERSION=0.2.1
  OR
  grpl aws install --params --<variable-name> <variable value>
  e.g grpl aws install --params --GRAPPLE_VERSION 0.2.1

Usage with params from configfile: 

  grpl aws install --configfile <file-name>.json
  e.g grpl aws install --configfile grpl-config.json

Quick Start:

    # please use correct values for the variables
    grpl aws install --CLUSTER_NAME=grpl-aws-cli --CLUSTER_IP=192.168.1.1 --AUTO_CONFIRM=true --GRAPPLE_DNS=grpl.com --ORGANIZATION=grapple --EMAIL=zahid@grapple.com --INSTALL_KUBEBLOCKS=true --SSL=true

Available Commands:

    h or help     Help menu
    *             to install grpl on aws cluster
    
Examples:    

    grpl aws i h    or    grpl aws install help
    grpl aws i *    or    grpl aws install *

Variables:

    --cluster-name,          --CLUSTER_NAME string          name of the cluster to install grapple in
    --cluster-ip,            --CLUSTER_IP string            ip of the cluster
    --grapple-version,       --GRAPPLE_VERSION string       version of grapple to install
    --auto-confirm,          --AUTO_CONFIRM string          'true' or 'false' to auto confirm installation of grapple
    --grapple-dns,           --GRAPPLE_DNS string           domain name of the cluster to install grapple in
    --organization,          --ORGANIZATION string          name of the organization
    --email,                 --EMAIL string                 email of the organization
    --install-kubeblocks,    --INSTALL_KUBEBLOCKS string   'true' or 'false' to install kubeblocks
    --ssl,                   --SSL string                   'true' or 'false' to set ssl
" 

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_aws_install_doc"  >&2
    fi
}

grpl_cluster_connect_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster connect"
    meta="
the grapple cli
Version: $(cat $GRPL_WORKDIR/VERSION)
https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl cluster connect"
        meta=""
    fi

    grpl_cluster_connect_doc="
$cli_name
$meta
Description: 

    connects to a grapple cluster

Usage: 

    grpl cluster connect [command]

Available Commands:

    h or help     Help menu
    *             to connect to a grapple cluster

Quick Start:

    # please use correct values for the variables
    grpl cluster connect --TARGET_PLATFORM=Civo --CIVO_REGION=gra1 --CIVO_CLUSTER=grpl-civo --CIVO_API_KEY=1234567890
    grpl cluster connect --TARGET_PLATFORM=Kubefirst --KUBEFIRST_CLOUD_PROVIDER=Civo --KUBEFIRST_CLUSTER_ID=dc3e39b9-0d44-4fb3-8931-7b1e8ccb841d --KUBEFIRST_CLUSTER_NAME=grpl-kubefirst --GITHUB_USERNAME=zahid-iqbal-alpha
    grpl cluster connect --TARGET_PLATFORM=Kubefirst --KUBEFIRST_CLOUD_PROVIDER=AWS --KUBEFIRST_CLUSTER_ID=dc3e39b9-0d44-4fb3-8931-7b1e8ccb841d --KUBEFIRST_CLUSTER_NAME=grpl-kubefirst --GITHUB_USERNAME=zahid-iqbal-alpha --AWS_ACCESS_KEY_ID=1234567890 --AWS_SECRET_ACCESS_KEY=1234567890 --AWS_SESSION_TOKEN=1234567890
    grpl cluster connect --TARGET_PLATFORM=Kubefirst --KUBEFIRST_CLOUD_PROVIDER=GoogleCloud --KUBEFIRST_CLUSTER_ID=dc3e39b9-0d44-4fb3-8931-7b1e8ccb841d --KUBEFIRST_CLUSTER_NAME=grpl-kubefirst --GITHUB_USERNAME=zahid-iqbal-alpha --GOOGLE_PROJECT_ID=1234567890

Examples:  

    grpl c conn h    or    grpl cluster connect help
    grpl c conn *    or    grpl cluster connect *

Parameters:

    --target-platform,          --TARGET_PLATFORM string            one of your choice 'CIVO' or 'Kubefirst'
    --civo-region,              --CIVO_REGION string                CIVO region where cluster is located
    --civo-cluster,             --CIVO_CLUSTER string               CIVO cluster name
    --civo-api-key,             --CIVO_API_KEY string               api key of the CIVO account
    --kubefirst-cloud-provider, --KUBEFIRST_CLOUD_PROVIDER string   kubefirst cloud provider (e.g. Civo, AWS, GoogleCloud)
    --kubefirst-cloud-region,   --KUBEFIRST_CLOUD_REGION string     kubefirst cloud region (e.g. fra1, us-east1, eu-central1)
    --kubefirst-cluster-name,   --KUBEFIRST_CLUSTER_NAME string     kubefirst cluster name
    --aws-access-key-id,        --AWS_ACCESS_KEY_ID string          aws access key id ( required if KUBEFIRST_CLOUD_PROVIDER is AWS )
    --aws-secret-access-key,    --AWS_SECRET_ACCESS_KEY string      aws secret access key ( required if KUBEFIRST_CLOUD_PROVIDER is AWS )
    --aws-session-token,        --AWS_SESSION_TOKEN string          aws session token ( required if KUBEFIRST_CLOUD_PROVIDER is AWS )
    --google-project-id,        --GOOGLE_PROJECT_ID string          google project id ( required if KUBEFIRST_CLOUD_PROVIDER is GoogleCloud )
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_connect_doc"  >&2
    fi
}