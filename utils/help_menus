#!/bin/bash

. "$GRPL_WORKDIR/utils/common"

generate_cli_web_doc() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    grpl_cli_installation_help $WEB_DOC
    grpl_cli_help $WEB_DOC
    grpl_cluster_cli_help $WEB_DOC
    grpl_example_cli_help $WEB_DOC
    grpl_install_cli_help $WEB_DOC
    grpl_upgrade_cli_help $WEB_DOC
    grpl_version_cli_help $WEB_DOC
    grpl_application_cli_help $WEB_DOC
    grpl_application_init_cli_help $WEB_DOC
    grpl_cluster_create_cli_help $WEB_DOC
    grpl_cluster_install_cli_help $WEB_DOC
    grpl_cluster_patch_cli_help $WEB_DOC
    grpl_cluster_status_cli_help $WEB_DOC
    grpl_example_deploy_cli_help $WEB_DOC
    grpl_example_status_cli_help $WEB_DOC
    grpl_resource_cli_help $WEB_DOC
    grpl_resource_deploy_cli_help $WEB_DOC
    grpl_dev_cli_help $WEB_DOC
    grpl_grapi_cli_help $WEB_DOC
    grpl_gruim_cli_help $WEB_DOC
    grpl_license_cli_help $WEB_DOC
    grpl_license_install_cli_help $WEB_DOC
    grpl_license_remove_cli_help $WEB_DOC
    grpl_license_status_cli_help $WEB_DOC
    grpl_ai_cli_help $WEB_DOC
    grpl_ai_resource_cli_help $WEB_DOC
     doc="
= grpl cli Documentation - $(cat $GRPL_WORKDIR/VERSION)
:toc: left
:toclevels: 3
:sectanchors:
:sectlinks:
:sectnums:

== Introduction

the grapple cli

https://grapple-solutions.com/[grapple solution^]


$grpl_cli_installation_doc
$grpl_cli_doc
$grpl_application_doc
$grpl_application_init_doc
$grpl_cluster_doc
$grpl_cluster_create_doc
$grpl_cluster_install_doc
$grpl_cluster_patch_doc
$grpl_cluster_status_doc
$grpl_example_doc
$grpl_example_deploy_doc
$grpl_example_status_doc
$grpl_resource_doc
$grpl_resource_deploy_doc
$grpl_install_doc
$grpl_upgrade_doc
$grpl_version_doc
$grpl_dev_doc
$grpl_grapi_doc
$grpl_gruim_doc
$grpl_license_doc
$grpl_license_install_doc
$grpl_license_remove_doc
$grpl_license_status_doc
$grpl_ai_doc
$grpl_ai_resource_doc

"
echo "$doc" > "$GRPL_WORKDIR/grpl-cli-web-doc.adoc"
        asciidoctor "$GRPL_WORKDIR/grpl-cli-web-doc.adoc"
        status_log $TYPE_INFO "please visit file://$GRPL_WORKDIR/grpl-cli-web-doc.html to view the grpl documentation"
        
}

generate_crds_web_doc() {

    failure=0
    if kubectl explain gras.spec >/dev/null 2>&1; then
        gras_doc=$(kubectl explain gras.spec)
    else 
        status_log "$TYPE_ERROR" "Web doc won't include documentation for gras because its not deployed on the cluster"
        ((failure++))
    fi
    if kubectl explain grapi.spec >/dev/null 2>&1; then
        grapi_doc=$(kubectl explain grapi.spec)
    else 
        status_log "$TYPE_ERROR" "Web doc won't include documentation for grapi because its not deployed on the cluster"
        ((failure++))
    fi
    if kubectl explain gruim.spec >/dev/null 2>&1; then
        gruim_doc=$(kubectl explain gruim.spec)
    else
        status_log "$TYPE_ERROR" "Web doc won't include documentation for gruim because its not deployed on the cluster"
        ((failure++))
    fi
    if [ $failure -eq 3 ]; then
      status_log $TYPE_ERROR "Failed to generate CRDs web doc, because no resource is deployed on the cluster"
      exit 1
    fi

    grpl_version="$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.GRAPPLE_VERSION}" | base64 --decode)"
    if [ "$grpl_version" == "" ]; then
      grpl_version="unknown"
    fi

    status_log $TYPE_INFO "Going to generate grapple web doc. This might take some time"
    crds_doc="
= grpl CRDs Documentation - $grpl_version
:toc: left
:toclevels: 3
:sectanchors:
:sectlinks:
:sectnums:

== Introduction

the grapple CRDs

https://grapple-solutions.com/[grapple solution^]


$(echo "$gras_doc" | transform_crds_docs_into_web_docs_format "gras.spec" "== gras - $grpl_version")
$(echo "$grapi_doc" | transform_crds_docs_into_web_docs_format "grapi.spec" "== grapi - $grpl_version")
$(echo "$gruim_doc" | transform_crds_docs_into_web_docs_format "gruim.spec" "== gruim - $grpl_version")

"

echo "$crds_doc" > "$GRPL_WORKDIR/grpl-crds-web-doc.adoc"
        asciidoctor "$GRPL_WORKDIR/grpl-crds-web-doc.adoc"
        status_log $TYPE_INFO "please visit file://$GRPL_WORKDIR/grpl-crds-web-doc.html to view the grpl documentation"
        
}


grpl_web_doc_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl doc"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl doc"
        meta=""
    fi

    grpl_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Usage: 

    grpl doc [command]

Commands:

    h or help     Help menu
    cli           to generate web documentation for grpl cli 
    crds          to generate web documentation for custom grpl CRDs
    ui           to generate web documentation for ui module properties
    
Examples:

    grpl doc help
    grpl doc cli
    grpl doc crds
    grpl doc ui
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_doc"  >&2
    fi
}




grpl_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl"
        meta=""
    fi

    grpl_cli_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl cli

Usage: 

    grpl [command]

Commands:

    i or install                Installation
    c or cluster                Cluster commands
    e or example                Example commands
    v or version                List version
    u or upgrade                Upgrade grpl
    a or app or application     Initialize grpl application
    d or dev                    Devspace Dev
    doc                         Documentation
    grapi                       Grapi commands
    gruim                       Gruim commands
    ai                          Grapple AI
    *                           Help menu
    
Examples:    

    grpl i [commands]    or    grpl install [commands]
    grpl c [commands]    or    grpl cluster [commands]     
    grpl e [commands]    or    grpl example [commands]     
    grpl v [commands]    or    grpl version [commands]     
    grpl u [commands]    or    grpl upgrade [commands]  
    grpl a [commands]    or    grpl app     [commands]    or    grpl application [commands] 
    grpl d [commands]    or    grpl dev [commands]
    grpl grapi [commands]
    grpl gruim [commands]
    grpl doc   [commands]
    grpl ai    [commands]
    grpl *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cli_doc"  >&2
    fi
}

grpl_application_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl application"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl application"
        meta=""
    fi

    grpl_application_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl application

Usage: 

    grpl application [command]

Commands:

    i or init       Initialize new grpl application
    *               Help menu
    
Examples:    

    grpl a i    or    grpl app init    or    grpl application init
    grpl a *    or    grpl app *       or    grpl application *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_application_doc"  >&2
    fi
}


grpl_cluster_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl cluster"
        meta=""
    fi

    grpl_cluster_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl cluster

Usage: 

    grpl cluster [command]

Commands:

    s or status     Cluster status
    i or install    Cluster installation
    p or patch      Cluster patch
    c or create     Cluster creation
    *               Help menu
    
Examples:    

    grpl c s    or    grpl cluster status
    grpl c i    or    grpl cluster install    
    grpl c p    or    grpl cluster patch       
    grpl c c    or    grpl cluster create  
    grpl c *    or    grpl cluster *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_doc"  >&2
    fi
}

grpl_example_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl example"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl example"
        meta=""
    fi

    grpl_example_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl example

Usage: 

    grpl example [command]

Commands:

    s or status     status of example
    d or deploy     deploy an example
    *               Help menu
    
Examples:    

    grpl e s    or    grpl example status
    grpl e d    or    grpl example deploy
    grpl e *    or    grpl example *

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_example_doc"  >&2
    fi
}


grpl_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl install"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl install"
        meta=""
    fi

    grpl_install_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl install

Usage: 

    grpl install [command]

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_install_doc"  >&2
    fi
}


grpl_upgrade_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl upgrade"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl upgrade"
        meta=""
    fi

    grpl_upgrade_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl upgrade

Usage: 
    
    grpl upgrade [command]

Commands:

    h or help     Help menu
    *             to upgrade
    
Examples:    

    grpl u h    or    grpl upgrade help
    grpl u *    or    grpl upgrade *

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_upgrade_doc"  >&2
    fi
}


grpl_version_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl version"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl version"
        meta=""
    fi

    grpl_version_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl version

Usage: 

    grpl version [command]

Commands:

    h or help     Help menu
    *             to get version details
    
Examples:    

    grpl v h    or    grpl version help
    grpl v *    or    grpl version *

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_version_doc"  >&2
    fi
}



grpl_cluster_create_cli_help() {
    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster create"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == "$WEB_DOC" ]; then
        cli_name="=== grpl cluster create"
        meta=""
    fi

    civo_help_menu=$(civo k8s create --help | awk '
/^Notes:/ {print "        Notes:"; in_notes=1; next}
/^Flags:/ {print "        Flags:"; in_notes=0; in_flags=1; next}
/^Global Flags:/ {print "        Global Flags:"; in_flags=0; in_global_flags=1; next}
/^$/ {in_global_flags=0; next}
in_notes || in_flags || in_global_flags {print "        " $0}')  # Add 8 spaces before each line

    grpl_cluster_create_doc="
$cli_name
$meta

Description: 

    Creates cluster in specificed provider

Usage: 

  grpl cluster create [command]

Usage with params from cli: 

  grpl cluster create --params --<variable-name>=<variable value>
  e.g grpl cluster create --params --TARGET_PLATFORM=CIVO
  OR
  grpl cluster install --params --<variable-name> <variable value>
  e.g grpl cluster create --params --TARGET_PLATFORM=CIVO

Usage with params from configfile: 

  grpl cluster create --configfile <file-name>.json
  e.g grpl cluster create --configfile grpl-create-config.json


Commands:

    h or help     Help menu
    *             to create cluster
    
Examples:    

    grpl c c h    or    grpl cluster create help
    grpl c c *    or    grpl cluster create *


Variables:

    Common Parameters:
        TARGET_PLATFORM= CIVO / Kubernetes / minikube / Kubefirst
        CLUSTER_NAME= name of the cluster
        CIVO_API_KEY= civo api key (optional)
        CIVO_REGION=Available CIVO regions (e.g. FRA1)
    
    CIVO Parameters:
$civo_help_menu
"

    if [ "$type" == "$WEB_DOC" ]; then
        return 0
    else
        echo "$grpl_cluster_create_doc"  >&2
    fi
}



grpl_cluster_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster install"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl cluster install"
        meta=""
    fi

    grpl_cluster_install_doc="
$cli_name
$meta

Description: 

    Installs grapple in specificed cluster

Usage: 

  grpl cluster install [command]

Usage with params from cli: 

  grpl cluster install --params --<variable-name>=<variable value>
  e.g grpl cluster install --params --GRAPPLE_VERSION=0.2.1
  OR
  grpl cluster install --params --<variable-name> <variable value>
  e.g grpl cluster install --params --GRAPPLE_VERSION 0.2.1

Usage with params from configfile: 

  grpl cluster install --configfile <file-name>.json
  e.g grpl cluster install --configfile grpl-config.json

Usage with values yaml: 

  grpl cluster install --values <file1>.yaml <file2>.yaml
  e.g grpl cluster install --values config-values.yaml config-values2.yaml

Commands:

    h or help     Help menu
    *             to install cluster
    
Examples:    

    grpl c i h    or    grpl cluster install help
    grpl c i *    or    grpl cluster install *


Variables:

  TARGET_PLATFORM=CIVO / Kubernetes / minikube / Kubefirst
  # general configurations
  GRAPPLE_VERSION = version of the grapple deployment (e.g. '0.2.0' or '0.2.1')
  AUTO_CONFIRM='false' / 'true'
  EMAIL = email
  ORGANIZATION = organization
  # kubernetes related configurations
  KUBE_CONTEXT=kubernetes context, if its set to "currnet" then it will use current kubectl context
  # minikube related configurations
  # no additional configurations
  # CIVO related configurations
  CIVO_REGION=Available CIVO regions (e.g. FRA1)
  CIVO_CLUSTER=CIVO cluster
  CIVO_CLUSTER_ID=CIVO cluster ID
  CIVO_EMAIL_ADDRESS=email address of your CIVO account
  CIVO_API_KEY=api key of your CIVO account
  CLUSTER_IP= Cluster IP address
  KUBEFIRST_CLOUD_PROVIDER = cloud provider for kubefirst
  KUBEFIRST_CLOUD_REGION = cloud region of kubefirst cloud provider
  KUBEFIRST_CLUSTER_ID = cluster id of kubefirst cluster
  KUBEFIRST_CLUSTER_NAME = cluster name for kubefirst cluster
  GITHUB_USERNAME = github username
  GITLAB_USERNAME = gitlab username
  INSTALL_KUBEBLOCKS = 'true' / 'false', set to 'true' if you want to install kubeblocks

" 

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_install_doc"  >&2
    fi
}


grpl_cluster_status_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster status"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl cluster status"
        meta=""
    fi

    grpl_cluster_status_doc="
$cli_name
$meta

Description: 

    Displays status of the cluster

Usage: 

    grpl cluster status [command]

Commands:

    h or help     Help menu
    *             to get cluster status
    
Examples:    

    grpl c s h    or    grpl cluster status help
    grpl c s *    or    grpl cluster status *
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_status_doc"  >&2
    fi
}

grpl_cluster_patch_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl cluster patch"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl cluster patch"
        meta=""
    fi

    grpl_cluster_patch_doc="
$cli_name
$meta

Description: 

    Patches the cluster

Usage: 

    grpl cluster patch [command]

Commands:

    h or help     Help menu
    *             to patch cluster 
    
Examples:    

    grpl c p h    or    grpl cluster patch help
    grpl c p *    or    grpl cluster patch *
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cluster_patch_doc"  >&2
    fi
}



grpl_example_deploy_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl example deploy"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl example deploy"
        meta=""
    fi

    grpl_example_deploy_doc="
$cli_name
$meta

Description: 

    Deploys grapple example using specified template

Usage: 

    grpl example deploy [command]

Usage with params from cli:

    grpl example deploy --params --<variable-name>=<variable value>
    e.g grpl example deploy --params --GRAS_TEMPLATE=db-file 

Usage with params from configfile:

    grpl example deploy --configfile <file-name>.json
    e.g grpl example deploy --configfile grpl-config.json

Commands:

    h or help     Help menu
    *             to get deploy example test-cases
    
Examples:    

    grpl e d h    or    grpl example deploy help
    grpl e d *    or    grpl example deploy *

Variables:

    GRAS_TEMPLATE: gras template e.g db-file, etc
    DB_TYPE: db type it can either internal or external
    KUBE_CONTEXT: kubectl context you want to use, if its set to "current" then it will use current kubectl context

" 

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_example_deploy_doc"  >&2
    fi
}



grpl_example_status_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl example status"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl example status"
        meta=""
    fi

    grpl_example_status_doc="
$cli_name
$meta

Description: 

    Displays status of the grapple example deployment

Usage: 

    grpl example status [command]

Commands:

    h or help     Help menu
    *             to get example status
    
Examples:    

    grpl e s h    or    grpl example status help
    grpl e s *    or    grpl example status *
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_example_status_doc"  >&2
    fi
}



grpl_application_init_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl application init"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl application init"
        meta=""
    fi

    grpl_application_init_doc="
$cli_name
$meta

Description: 

    Initializes a new grapple application

Usage: 

    grpl application init [command]

Commands:

    h or help     Help menu
    *             to Initialize a grpl application
    
Examples:    

    grpl a i h    or    grpl app init help    or    grpl application init help
    grpl a i *    or    grpl app init *       or    grpl application init *

Variables:

    PROJECT_NAME= Name of the project
    AUTO_CONFIRM= 'false' / 'true'
    GITHUBTOKEN= Token to authenticate gh
    GRAPPLE_TEMPLATE= the grapple-template repository to clone (default grapple-solutions/grapple-template)

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_application_init_doc"  >&2
    fi
}


grpl_resource_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl resource"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl resource"
        meta=""
    fi

    grpl_resource_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl resource

Usage: 

    grpl resource [command]

Commands:

    d or deploy     to deploy a grpl template
    r or render     to render a grpl template
    *               Help menu
    
Examples:    

    grpl r d    or    grpl resource deploy
    grpl r r    or    grpl resource render
    grpl r *    or    grpl resource *     

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_resource_doc"  >&2
    fi
}

grpl_resource_deploy_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl resource deploy"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl resource deploy"
        meta=""
    fi

    grpl_resource_deploy_doc="
$cli_name
$meta

Description: 

    Deploy a grapple resource with respect to specified gras template

Usage: 

    grpl resource deploy [command]

Usage with params from cli: 

  grpl resource deploy --params --<variable-name>=<variable value>
  e.g grpl resource deploy --params --GRAS_TEMPLATE=db-file
  OR
  grpl resource deploy --params --<variable-name> <variable value>
  e.g grpl resource deploy --params --GRAS_TEMPLATE=db-file

Usage with params from configfile: 

  grpl resource deploy --configfile <file-name>.json
  e.g grpl resource deploy --configfile grpl-config.json

Commands:

    h or help     Help menu
    *             to deploy grpl template
    
Examples:    

    grpl r d h    or    grpl resource deploy help
    grpl r d *    or    grpl resource deploy *

Variable:

    KUBE_CONTEXT: kubectl context you want to use, if its set to "current" then it will use current kubectl context
    GRAS_NAME: name of the project
    GRAS_TEMPLATE: gras template e.g db-file, etc
    SOURCE_DATA: source of the data
    DB_FILE_PATH: path where data is stored, default path is /data/db.json
    DB_TYPE: db type it can either internal or external
    ENABLE_GRUIM: to enable gruim, it can either be "Yes" or "No"
    MODELS: input of models 
    RELATIONS: models relations
    KUBE_NS: namespace to deploy gras, default ns is 'default'
    DATASOURCES: data sources configs
    DISCOVERIES: discoveries configs
    DATABASE_SCHEMA: database schema you want to use
    AUTO_DISCOVERY: to enable auto discovery
    
"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_resource_deploy_doc"  >&2
    fi
}


grpl_dev_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl dev"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl dev"
        meta=""
    fi

    grpl_dev_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl dev

Usage: 

    grpl dev [command]

Commands:

    h or help                           Help menu
    add                                 Adds something to devspace.yaml
    analyze                             Analyzes a kubernetes namespace and checks for potential problems
    attach                              Attaches to a container
    build                               Builds all defined images and pushes them
    cleanup                             Cleans up resources
    completion                          Outputs shell completion for the given shell (bash or zsh)
    deploy                              Deploys the project
    enter                               Open a shell to a container
    init                                Initializes DevSpace in the current folder
    list                                Lists configuration
    logs                                Prints the logs of a pod and attaches to it
    open                                Opens the space in the browser
    print                               Prints displays the configuration
    purge                               Deletes deployed resources
    remove                              Removes devspace configuration
    render                              Builds all defined images and shows the yamls that would be deployed
    reset                               Resets an cluster token
    restart                             Restarts containers where the sync restart helper is injected
    run                                 Executes a predefined command
    run-pipeline                        Starts a DevSpace pipeline
    set                                 Sets global configuration changes
    sync                                Starts a bi-directional sync between the target container and the local path
    ui                                  Opens the localhost UI in the browser
    update                              Updates the current config
    upgrade                             Upgrades the DevSpace CLI to the newest version
    use                                 Uses specific config
    version                             Prints version of devspace
    ns                                  to get namespace help menu
    ns <namespace>                      to set namespace for grapple
    enter grapi                         to enter grapi container
    enter gruim                         to enter grapi container      

Flags:
        --debug                        Prints the stack trace if an error occurs
        --disable-profile-activation   If true will ignore all profile activations
    -h, --help                         help for devspace
        --inactivity-timeout int       Minutes the current user is inactive (no mouse or keyboard interaction) until DevSpace will exit automatically. 0 to disable. Only supported on windows and mac operating systems
        --kube-context string          The kubernetes context to use
        --kubeconfig string            The kubeconfig path to use
    -n, --namespace string             The kubernetes namespace to use
        --no-colors                    Do not show color highlighting in log output. This avoids invisible output with different terminal background colors
        --no-warn                      If true does not show any warning when deploying into a different namespace or kube-context than before
        --override-name string         If specified will override the DevSpace project name provided in the devspace.yaml
    -p, --profile strings              The DevSpace profiles to apply. Multiple profiles are applied in the order they are specified
        --silent                       Run in silent mode and prevents any devspace log output except panics & fatals
    -s, --switch-context               Switches and uses the last kube context and namespace that was used to deploy the DevSpace project
        --var strings                  Variables to override during execution (e.g. --var=MYVAR=MYVALUE)
    -v, --version                      version for devspace
  
    
Examples:    

    grpl dev h    or    grpl dev help
    grpl dev
    grpl dev add
    grpl dev analyze
    grpl dev attach
    grpl dev build
    grpl dev cleanup
    grpl dev completion
    grpl dev deploy
    grpl dev enter
    grpl dev init
    grpl dev list
    grpl dev logs
    grpl dev open
    grpl dev print
    grpl dev purge
    grpl dev remove
    grpl dev render
    grpl dev reset
    grpl dev restart
    grpl dev run
    grpl dev run-pipeline
    grpl dev set
    grpl dev sync
    grpl dev ui
    grpl dev update
    grpl dev upgrade
    grpl dev use
    grpl dev version
    grpl dev ns
    grpl dev ns grapple-namespace
    grpl dev enter grapi
    grpl dev enter gruim

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_dev_doc"  >&2
    fi
}



grpl_grapi_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl grapi"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl grapi"
        meta=""
    fi

    grpl_grapi_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl grapi

Usage: 

    grpl grapi [command]

Commands:

    h or help                           Help menu
    grapi migrate-db                    to migrate db
    grapi --help                        to get list of grapi commands
    grapi <any command>                 to run any grapi command
    
Examples:    

    grpl grapi h    or    grpl grapi help    or    grpl grapi
    grpl grapi migrate-db 
    grpl grapi --help
    grpl grapi <any comamnd>   

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_grapi_doc"  >&2
    fi
}



grpl_gruim_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl gruim"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl gruim"
        meta=""
    fi

    grpl_gruim_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu for grpl gruim

Usage: 

    grpl gruim [command]

Commands:

    h or help                           Help menu
    gruim rebuild                       to rebuild gruim
    gruim --help                        to get list of gruim commands
    gruim <any command>                 to run any gruim command
    
Examples:    

    grpl gruim h    or    grpl gruim help    or    grpl gruim
    grpl gruim rebuild 
    grpl gruim --help
    grpl gruim <any comamnd>   

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_gruim_doc"  >&2
    fi
}



grpl_license_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl license"
        meta=""
    fi

    grpl_license_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl license

Usage: 

    grpl license [command]

Commands:

    h or help     Help menu
    i or install  to install license
    r or remove   to remove license
    s or status   to get license status
    
Examples:    

    grpl l h    or    grpl lic h    or    grpl license help
    grpl l i    or    grpl lic i    or    grpl license install
    grpl l r    or    grpl lic r    or    grpl license remove
    grpl l s    or    grpl lic s    or    grpl license status

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_doc"  >&2
    fi
}




grpl_license_install_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license install"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl license install"
        meta=""
    fi

    grpl_license_install_doc="
$cli_name
$meta

Description: 

    Displays help menu of grpl license install

Usage: 

    grpl license install [command]

Commands:

    h or help     Help menu
    *             to install license
    
Examples:    

    grpl l i h    or    grpl lic i h    or    grpl license install help
    grpl l i      or    grpl lic i      or    grpl license install

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_install_doc"  >&2
    fi
}



grpl_license_status_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license status"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl license status"
        meta=""
    fi

    grpl_license_status_doc="
$cli_name
$meta

Description: 

    Displays help menu of grpl license status

Usage: 

    grpl license status [command]

Commands:

    h or help     Help menu
    *             to get license status
    
Examples:    

    grpl l i h    or    grpl lic i h    or    grpl license install help
    grpl l s      or    grpl lic s      or    grpl license status

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_status_doc"  >&2
    fi
}




grpl_license_remove_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl license remove"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl license remove"
        meta=""
    fi

    grpl_license_remove_doc="
$cli_name
$meta

Description: 

    Displays help menu of grpl license remove

Usage: 

    grpl license remove [command]

Commands:

    h or help     Help menu
    *             to remove license
    
Examples:    

    grpl l i h    or    grpl lic i h    or    grpl license install help
    grpl l r      or    grpl lic r      or    grpl license remove

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_license_remove_doc"  >&2
    fi
}






grpl_cli_installation_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grapple cli installation"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grapple cli installation"
        meta=""
    fi

    grpl_cli_installation_doc="
$cli_name
$meta

    brew tap grapple-solutions/grapple
    brew install grapple-cli

" 
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_cli_installation_doc"  >&2
    fi
}

generate_ui_web_doc() {

    status_log $TYPE_INFO "Generating UI web doc it might take a few minutes..."

    echo "Checking for GRUIM resources across all namespaces..."
    gruim_output=$(kubectl get gruim -A)
    
    # Extract the first namespace and resource name for a synced and ready GRUIM resource
    resource_info=$(echo "$gruim_output" | awk '/True[[:space:]]*True/ {print $1, $2; exit}')
    if [[ -z "$resource_info" ]]; then
        status_log $TYPE_ERROR "No synced and ready GRUIM resource found."
        exit 1
    fi

    read namespace resource_name <<< "$resource_info"
    echo "Processing GRUIM resource: Namespace=$namespace, Name=$resource_name"

    status_log $TYPE_INFO "Checking rollout status for $namespace/$resource_name..."
    rollout_status=$(kubectl rollout status -n "$namespace" deployment/"$namespace-$resource_name-gruim" 2>&1)
    if [[ $? -ne 0 ]]; then
        status_log $TYPE_ERROR "Rollout failed or incomplete for $namespace/$resource_name. Error: $rollout_status"
        exit 1
    fi
    echo "Rollout status: $rollout_status"

    echo "Extracting base URL from muim resource..."
    muim_base_url=$(kubectl get muim -n "$namespace" "$namespace-$resource_name-gruim" -o jsonpath="{.spec.remoteentry}" 2>/dev/null | awk -F/ 'OFS="/" {$NF=""; sub(/\/$/, ""); print}')
    if [[ -z "$muim_base_url" ]]; then
        status_log $TYPE_ERROR "Failed to extract base URL from muim resource for $namespace/$resource_name."
        exit 1
    fi

    documentation_url="${muim_base_url}/documentation/"
    output_file="${GRPL_WORKDIR}/grpl-${resource_name}-web-doc.html"
    curl -o "$output_file" "$documentation_url" >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        status_log $TYPE_ERROR "Failed to download documentation from $documentation_url."
        exit 1
    fi

    echo "Patching the title"
    gruim_version=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.uiimagetag}" | base64 -d)
    awk -v version="$gruim_version" '
        /<title>/ {
            gsub(/<title>.*<\/title>/, "<title>grpl ui components props - " version "</title>");
        }
        /<h1>/ {
            gsub(/<h1>.*<\/h1>/, "<h1>grpl ui components props - " version "</h1>");
        }
        { print }
    ' "$output_file" > "${output_file}.tmp" && mv "${output_file}.tmp" "$output_file"

    status_log $TYPE_INFO "Please visit file://$output_file to view the GRPL documentation."

    exit 0
}


grpl_ai_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl ai"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="== grpl ai"
        meta=""
    fi

    grpl_ai_doc="
$cli_name  - $(cat $GRPL_WORKDIR/VERSION)
$meta

Description: 

    Displays help menu of grpl ai

Usage: 

    grpl ai [command]

Commands:

    ai              ai commands
    *               Help menu
    
Examples:    

    grpl ai r    or    grpl ai resource
    grpl ai *    or    grpl ai *

"
    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_ai_doc"  >&2
    fi
}



grpl_ai_resource_cli_help() {

    if ! grep -q "." "$GRPL_WORKDIR/VERSION" >/dev/null 2>&1; then 
      extract_grapple_cli_version
    fi

    type=$1
    cli_name="grpl ai resource"
    meta="
the grapple cli

Version: $(cat $GRPL_WORKDIR/VERSION)

https://grapple-solutions.com/
"
    if [ "$type" == $WEB_DOC ]; then
        cli_name="=== grpl ai resource"
        meta=""
    fi

    grpl_ai_resource_doc="
$cli_name
$meta

Description: 

    helps understand and create grpl resources

Usage: 

    grpl ai resource [command]

Commands:

    h or help     Help menu
    *             to understand and create grpl resources
    
Examples:    

    grpl ai r h    or    grpl ai resource help
    grpl ai r *    or    grpl ai resource *

Variable:

    RESOURCE_ACTION = deploy (deploys the resource yaml onto the cluster) or render (saves the resource into a yaml file)

"

    if [ "$type" == $WEB_DOC ]; then
        return 0
    else
        echo "$grpl_ai_resource_doc"  >&2
    fi
}

