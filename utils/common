#!/bin/bash

. "$GRPL_WORKDIR/utils/constants"
. "$GRPL_WORKDIR/utils/package_installer"

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  OS=gnu
elif [[ "$OSTYPE" == "darwin"* ]]; then
  OS=mac
elif [[ "$OSTYPE" == "cygwin" ]]; then
  OS=posix
elif [[ "$OSTYPE" == "msys" ]]; then
  OS=lw
elif [[ "$OSTYPE" == "freebsd"* ]]; then
  OS=freebsd
else
  OS=unknown
fi

cli_log() {
  script_name=${0##*/}
  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "== $script_name $timestamp $1"
}

exit_on_interrupt() {
    echo; echo -e "${RED}Script interrupted by user. Exiting...${NC}" >&2
    status_log $TYPE_ERROR "Script interrupted by user. Exiting..."
    exit 130
}


# calling syntax : status_log <type> <message>
# supported types : TYPE_INFO, TYPE_SUCCESS, TYPE_ERROR, TYPE_DEFAULT
status_log() {

  # first select color
  log_color=""
  if [ $1 == $TYPE_INFO ]; then log_color=$info_color
  elif [ $1 == $TYPE_SUCCESS ]; then log_color=$success_color
  elif [ $1 == $TYPE_ERROR ]; then log_color=$error_color
  elif [ $1 == $TYPE_DEFAULT ]; then log_color=$reset_color
  fi

  gum log "$(printf "${log_color}${2}${reset_color}")"
  echo ${2}

}

# check and install all pre-requsite packages
install_prerequisite(){

  echo "Check and Installing pre-requsite packages if any, this may take a while"  >&2
  # please dont change the order of these package installation, we need gum to be installed first
  check_and_install_snap
  check_and_install_gum
  check_and_install_helm
  check_and_install_kubectl
  status_log $TYPE_DEFAULT "Completed pre-requsite packages Check and Installation"

}

# need to create log folder as its a pre-requsite
create_logs_dir(){
  if ! ls $GRPL_WORKDIR | grep 'logs' >/dev/null 2>&1; then
    mkdir $GRPL_WORKDIR/logs 2>/dev/null | true
  fi
}

create_logs_dir

prompt_for_input_with_validation() {
    local prompt=$1
    local placeholder=$2
    local regex=$3
    local error_message=$4
    local default_value=$5  # Added parameter for default value
    local input=""

    while [[ ! $input =~ $regex ]]; do
        input=$(gum input --prompt "$prompt" --placeholder "$placeholder" --value "$default_value") || exit_on_interrupt
        if [[ ! $input =~ $regex ]]; then
            echo -e "${RED}$error_message${NC}" >&2
        fi
    done
    echo "$input"
}

prompt_for_explicit_input_with_validation() {
    local prompt=$1
    local placeholder=$2
    local regex=$3
    local error_message=$4
    local default_value=$5  # Added parameter for default value
    local input=""

    input=$(gum input --prompt "$prompt" --placeholder "$placeholder" --value "$default_value") || exit_on_interrupt
    while [[ ! $input =~ $regex ]]; do
        input=$(gum input --prompt "$prompt" --placeholder "$placeholder" --value "$default_value") || exit_on_interrupt
        if [[ ! $input =~ $regex ]]; then
            echo -e "${RED}$error_message${NC}" >&2
        fi
    done
    echo "$input"
}

# Function to extract value from JSON
extract_value_from_json() {
    local json="$1"
    local key="$2"
    local regex="\"$key\": ?\"([^\"]*)\""
    if [[ "$json" =~ $regex ]]; then
        echo "${BASH_REMATCH[1]}"
    fi 
}


is_valid_arg_syntax() {
    local arg="$1"
    local config_param=""

    if [[ "$arg" == --* ]]; then
        # Remove "--" from the start of the string
        config_param="${arg#--}"
    elif [[ "$arg" == -* ]]; then
        # Remove "-" from the start of the string
        config_param="${arg#-}"
    else
        # Show an error if it does not start with "-" or "--"
        status_log $TYPE_ERROR "Error: $key is not a valid way to pass the argument, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
        exit 1
    fi

    echo "$config_param"
}



extract_input_params_from_cli() {

  valid_args=$1
  shift
  help_menu_cmd=$1
  shift

  # Check if the first argument is non-empty and doesn't start with '-'
  if [ -n "$1" ] && [[ "$1" != -* ]]; then
      status_log $TYPE_ERROR "Error: unknown command: $1 Run '$help_menu_cmd' to get more info on how to pass agruments from cli"
      exit 1
  fi

  if [[ $# -eq 1 ]] && ( [[ $1 == $config_file_params ]] || [[ $1 == $values_params ]] || [[ $1 == $cli_params ]] ); then
    status_log $TYPE_ERROR "Error: $1 require subsequent agruments, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
    exit 1 
  fi

  while [[ $# -gt 0 ]]; do

    param_type=$1

    if [[ $param_type ==  $config_file_params ]]; then

      shift
      config_file_name=$1
      shift
      # Check if the input file has a JSON extension
      if [[ "$config_file_name" != *.json ]]; then
        status_log $TYPE_ERROR "Error: Input file is not a JSON file, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
        exit 1
      fi


      json=$(<${config_file_name})
      for val in "${valid_args[@]}"; do
          export "$val=$(extract_value_from_json "$json"  "$val")"
      done

    elif [[ $param_type == $values_params ]]; then
        # Loop through arguments
        values_yaml_file_names=""

        

        while [[ $# -gt 0 ]]; do
            shift
            arg1=$1
            if [[ "$arg1" = *.yaml* ]] ; then
                values_yaml_file_names="$values_yaml_file_names -f $arg1"
            else 
                if [[ "$values_yaml_file_names" == "" ]]; then
                  status_log $TYPE_ERROR "Error: $arg1 is not a valid argument for values, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
                  export values_yaml_file_names=$values_yaml_file_names
                  return 1
                fi
                export values_yaml_file_names=$values_yaml_file_names
                break
            fi
        done
    else
      # Loop through arguments
      while [[ $# -gt 0 ]]; do

          arg1=$1
          if [[ $arg1 == $values_params ]]; then
            break
          elif [[ $arg1 == $cli_params ]]; then
            shift
            arg1=$1
          fi
          shift

          
          # determine which method is used to pass cli params
          if [[ "$arg1" = *=* ]]; then
              
              config_param=$(is_valid_arg_syntax "$arg1")
              key=${config_param%%=*}
              value=${config_param#*=}
              # Check if the argument is valid
              valid=false
              for valid_arg in "${valid_args[@]}"; do
                  if [[ "$key" == "$valid_arg" ]]; then
                      valid=true
                      break
                  fi
              done

              if  $valid; then
                  local key=${key//-/_}
                  export "$key=$value"
              else
                  status_log $TYPE_ERROR "Error: $key is not a valid argument, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
                  return 1
              fi

          else
              arg2=$1
              if [[ $arg2 != "" ]] && [[ "$arg2" != --* ]]; then
                shift
              else
                arg2="true"
              fi
              config_param=$(is_valid_arg_syntax "$arg1")
              # Check if the argument is valid
              if [[ " ${valid_args[@]} " =~ " $config_param " ]]; then
                  local config_param=${config_param//-/_}
                  export "$config_param=$arg2"
              else
                  status_log $TYPE_ERROR "Error: $config_param is a not valid argument, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
                  return 1
              fi
          fi


      done
    fi

  done






}

read_grapple_available_version() {

  GRAPPLE_AVAILABLE_VERSIONS=()

  while IFS= read -r version || [ -n "$version" ]; do
      GRAPPLE_AVAILABLE_VERSIONS+=("$version")
  done < "$GRPL_WORKDIR/grapple-versions"
  
}

read_grapple_available_version

transform_crds_docs_into_web_docs_format() {

    local base=$1
    local title=$2
    local previous_line=""
    local encounteredCompositField="false"
    local objects=()

    echo "$title"
    while IFS= read -r line; do
    
        if [[ "$line" == "DESCRIPTION:" ]];then
            process_completed="1"
            echo ""
            echo "$line"
            echo "[,bash]"
            echo "----"
            continue
        elif [[ "$line" == "FIELDS:" ]];then
            process_completed="1"
            echo "----"
            echo ""
            echo "$line"
            echo "[,bash]"
            echo "----"
            continue
        elif [[ "$line" == *"composit"* ]] || [[ "$line" == *"writeConnectionSecret"* ]] || [[ "$line" == *"publishConnectionDetailsTo"* ]] || [[ "$line" == *"resourceRef"* ]]  ;then
            encounteredCompositField="true"
            continue
        elif ([[ "$line" == "    "* ]] || [[ "$line" == "" ]] ) && [[ "$encounteredCompositField" == "true" ]];then
            continue
        elif [[ "$line" != "    "* ]] && [[ "$line" != "" ]] && [[ "$encounteredCompositField" == "true" ]];then
            encounteredCompositField="false"
        fi
        
        if [[ "$line" == *"Object>"* ]]; then 
            i=$(echo "$line" | awk '{print $1}')
            if [[ "$i" == "FIELD:" ]]; then
              continue
            fi
            objects+=("$i")
        fi       

        if [[ -z "$previous_line" || -z "$line" ]]; then
            echo "$line"
        else
            echo ""
            echo "$line"
        fi
        previous_line="$line"

    done
    echo "----"

    local obj=""
    for obj in "${objects[@]}"; do
      kubectl explain $base.$obj | transform_crds_docs_into_web_docs_format "$base.$obj" "=== $base.$obj"
    done
}


getGumSpinnerOrLogger() {

  msg=$1
  if [ -t 0 ]; then
    echo "gum spin --title \"${msg}\" --show-output -- "
  else
    gum log $msg
  fi

}

setTTYModeState() {
  if [ -t 0 ]; then
    TTY="enabled"
  else
    TTY="disabled"
  fi
}

setTTYModeState

extract_domain_name() {
    fqdn=$1
    # Remove the hostname and keep only the domain and top-level domain
    domain=$(echo "$fqdn" | awk -F. '{print $(NF-1)"."$NF}')
    echo "$domain"
}

check_if_param_avaiable_in_non_interactive_mode() {
  paramName=$1
  paramValue=$2
  help_menu_cmd=$3
  if [ "$paramValue" == "" ] && [ "$TTY" == "disabled" ]; then
    status_log $TYPE_ERROR "Error: $paramName is a required argument in non-interactive mode, please run '$help_menu_cmd'  to get more info on how to pass agruments from cli"
    exit 1
  fi
}