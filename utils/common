#!/bin/bash

. "$GRPL_WORKDIR/utils/constants"
. "$GRPL_WORKDIR/utils/package_installer"

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  OS=gnu
elif [[ "$OSTYPE" == "darwin"* ]]; then
  OS=mac
elif [[ "$OSTYPE" == "cygwin" ]]; then
  OS=posix
elif [[ "$OSTYPE" == "msys" ]]; then
  OS=lw
elif [[ "$OSTYPE" == "freebsd"* ]]; then
  OS=freebsd
else
  OS=unknown
fi

cli_log() {
  script_name=${0##*/}
  timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  echo "== $script_name $timestamp $1"
}

exit_on_interrupt() {
    echo; echo -e "${RED}Script interrupted by user. Exiting...${NC}" >&2
    status_log $TYPE_ERROR "Script interrupted by user. Exiting..."
    exit 130
}


# calling syntax : status_log <type> <message>
# supported types : TYPE_INFO, TYPE_SUCCESS, TYPE_ERROR, TYPE_DEFAULT
status_log() {

  # first select color
  log_color=""
  if [ $1 == $TYPE_INFO ]; then log_color=$info_color
  elif [ $1 == $TYPE_SUCCESS ]; then log_color=$success_color
  elif [ $1 == $TYPE_ERROR ]; then log_color=$error_color
  elif [ $1 == $TYPE_DEFAULT ]; then log_color=$reset_color
  fi

  gum log "$(printf "${log_color}${2}${reset_color}")"
  echo ${2}

}

# check and install all pre-requsite packages
install_prerequisite(){

  echo "Check and Installing pre-requsite packages if any, this may take a while"  >&2
  # please dont change the order of these package installation, we need gum to be installed first
  check_and_install_snap
  check_and_install_gum
  check_and_install_helm
  check_and_install_kubectl
  status_log $TYPE_DEFAULT "Completed pre-requsite packages Check and Installation"

}

# need to create log folder as its a pre-requsite
create_logs_dir(){
  if ! ls $GRPL_WORKDIR | grep 'logs' >/dev/null 2>&1; then
    mkdir $GRPL_WORKDIR/logs 2>/dev/null | true
  fi
}

create_logs_dir

prompt_for_input_with_validation() {
    local prompt=$1
    local placeholder=$2
    local regex=$3
    local error_message=$4
    local default_value=$5  # Added parameter for default value
    local input=""

    while [[ ! $input =~ $regex ]]; do
        input=$(gum input --prompt "$prompt" --placeholder "$placeholder" --value "$default_value") || exit_on_interrupt
        if [[ ! $input =~ $regex ]]; then
            echo -e "${RED}$error_message${NC}" >&2
        fi
    done
    echo "$input"
}

prompt_for_explicit_input_with_validation() {
    local prompt=$1
    local placeholder=$2
    local regex=$3
    local error_message=$4
    local default_value=$5  # Added parameter for default value
    local input=""

    input=$(gum input --prompt "$prompt" --placeholder "$placeholder" --value "$default_value") || exit_on_interrupt
    while [[ ! $input =~ $regex ]]; do
        input=$(gum input --prompt "$prompt" --placeholder "$placeholder" --value "$default_value") || exit_on_interrupt
        if [[ ! $input =~ $regex ]]; then
            echo -e "${RED}$error_message${NC}" >&2
        fi
    done
    echo "$input"
}

# Function to extract value from JSON
extract_value_from_json() {
    local json="$1"
    local key="$2"
    echo "$json" | jq -r --arg key "$key" '.[$key] // empty'
}


is_valid_arg_syntax() {
    local arg="$1"
    local config_param=""

    if [[ "$arg" == --* ]]; then
        # Remove "--" from the start of the string
        config_param="${arg#--}"
    elif [[ "$arg" == -* ]]; then
        # Remove "-" from the start of the string
        config_param="${arg#-}"
    else
        # Show an error if it does not start with "-" or "--"
        status_log $TYPE_ERROR "Error: $key is not a valid way to pass the argument, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
        exit 1
    fi

    echo "$config_param"
}



extract_input_params_from_cli() {

  valid_args=$1
  shift
  help_menu_cmd=$1
  shift

  # Check if the first argument is non-empty and doesn't start with '-'
  if [ -n "$1" ] && [[ "$1" != -* ]]; then
      status_log $TYPE_ERROR "Error: unknown command: $1 Run '$help_menu_cmd' to get more info on how to pass agruments from cli"
      exit 1
  fi

  if [[ $# -eq 1 ]] && ( [[ $1 == $config_file_params ]] || [[ $1 == $values_params ]] || [[ $1 == $cli_params ]] ); then
    status_log $TYPE_ERROR "Error: $1 require subsequent agruments, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
    exit 1 
  fi

  while [[ $# -gt 0 ]]; do

    param_type=$1

    if [[ $param_type ==  $config_file_params ]]; then
      check_and_install_jq
      
      shift
      config_file_name=$1
      shift
      # Check if the input file has a JSON extension
      if [[ "$config_file_name" != *.json ]]; then
        status_log $TYPE_ERROR "Error: Input file is not a JSON file, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
        exit 1
      fi


      json=$(<${config_file_name})
      for arg in "${valid_args[@]}"; do
          local value=$(extract_value_from_json "$json"  "$arg")
          if [[ -z "${value}" ]]; then
            lowercased=$(echo "$arg" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            value=$(extract_value_from_json "$json"  "$lowercased")
          fi
          arg=$(echo "$arg" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          export "$arg=$value"
      done

    elif [[ $param_type == $values_params ]]; then
        # Loop through arguments
        values_yaml_file_names=""

        

        while [[ $# -gt 0 ]]; do
            shift
            arg1=$1
            if [[ "$arg1" = *.yaml* ]] ; then
                values_yaml_file_names="$values_yaml_file_names -f $arg1"
            else 
                if [[ "$values_yaml_file_names" == "" ]]; then
                  status_log $TYPE_ERROR "Error: $arg1 is not a valid argument for values, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
                  export values_yaml_file_names=$values_yaml_file_names
                  return 1
                fi
                export values_yaml_file_names=$values_yaml_file_names
                break
            fi
        done
    else
      # Loop through arguments
      while [[ $# -gt 0 ]]; do

          arg1=$1
          if [[ $arg1 == $values_params ]]; then
            break
          elif [[ $arg1 == $cli_params ]]; then
            shift
            arg1=$1
          fi
          shift

          
          # determine which method is used to pass cli params
          if [[ "$arg1" = *=* ]]; then
              
              config_param=$(is_valid_arg_syntax "$arg1")
              key=${config_param%%=*}
              value=${config_param#*=}
              # Check if the argument is valid
              valid=false
              for valid_arg in "${valid_args[@]}"; do
                  lowercased_valid_arg=$(echo "$valid_arg" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
                  if [[ "$key" == "$valid_arg" || "$key" == "$lowercased_valid_arg" ]]; then
                      valid=true
                      break
                  fi
              done

              if  $valid; then
                  local uppercased_key=$(echo "$key" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
                  export "$uppercased_key=$value"
              else
                  status_log $TYPE_ERROR "Error: $key is not a valid argument, please run \'$help_menu_cmd\'  to get more info on how to pass agruments from cli"
                  return 1
              fi

          else
              arg2=$1
              if [[ $arg2 != "" ]] && [[ "$arg2" != --* ]]; then
                shift
              else
                arg2="true"
              fi
              config_param=$(is_valid_arg_syntax "$arg1")
              # Check if the argument is valid
              valid=false
              for valid_arg in "${valid_args[@]}"; do
                  lowercased_valid_arg=$(echo "$valid_arg" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
                  if [[ "$config_param" == "$valid_arg" || "$config_param" == "$lowercased_valid_arg" ]]; then
                      valid=true
                      break
                  fi
              done

              if $valid; then
                  local uppercased_key=$(echo "$config_param" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
                  export "$uppercased_key=$arg2"

              else
                  status_log $TYPE_ERROR "Error: $config_param is not a valid argument, please run \'$help_menu_cmd\' to get more info on how to pass arguments from cli"
                  return 1
              fi
          fi


      done
    fi

  done






}

read_grapple_available_version() {

  GRAPPLE_AVAILABLE_VERSIONS=()

  while IFS= read -r version || [ -n "$version" ]; do
      GRAPPLE_AVAILABLE_VERSIONS+=("$version")
  done < "$GRPL_WORKDIR/grapple-versions"
  
}

read_grapple_available_version

transform_crds_docs_into_web_docs_format() {

    local base=$1
    local title=$2
    local previous_line=""
    local encounteredCompositField="false"
    local objects=()

    echo "$title"
    while IFS= read -r line; do
    
        if [[ "$line" == "DESCRIPTION:" ]];then
            process_completed="1"
            echo ""
            echo "$line"
            echo "[,bash]"
            echo "----"
            continue
        elif [[ "$line" == "FIELDS:" ]];then
            process_completed="1"
            echo "----"
            echo ""
            echo "$line"
            echo "[,bash]"
            echo "----"
            continue
        elif [[ "$line" == *"composit"* ]] || [[ "$line" == *"writeConnectionSecret"* ]] || [[ "$line" == *"publishConnectionDetailsTo"* ]] || [[ "$line" == *"resourceRef"* ]]  ;then
            encounteredCompositField="true"
            continue
        elif ([[ "$line" == "    "* ]] || [[ "$line" == "" ]] ) && [[ "$encounteredCompositField" == "true" ]];then
            continue
        elif [[ "$line" != "    "* ]] && [[ "$line" != "" ]] && [[ "$encounteredCompositField" == "true" ]];then
            encounteredCompositField="false"
        fi
        
        if [[ "$line" == *"Object>"* ]]; then 
            i=$(echo "$line" | awk '{print $1}')
            if [[ "$i" == "FIELD:" ]]; then
              continue
            fi
            objects+=("$i")
        fi       

        if [[ -z "$previous_line" || -z "$line" ]]; then
            echo "$line"
        else
            echo ""
            echo "$line"
        fi
        previous_line="$line"

    done
    echo "----"

    local obj=""
    for obj in "${objects[@]}"; do
      kubectl explain $base.$obj | transform_crds_docs_into_web_docs_format "$base.$obj" "=== $base.$obj"
    done
}


getGumSpinnerOrLogger() {

  msg=$1
  if [ -t 0 ]; then
    echo "gum spin --title \"${msg}\" --show-output -- "
  else
    gum log $msg
  fi

}

setTTYModeState() {
  if [ -t 0 ]; then
    TTY="enabled"
  else
    TTY="disabled"
  fi
}

setTTYModeState

extract_domain_name() {
    fqdn=$1
    # Remove the hostname and keep only the domain and top-level domain
    domain=$(echo "$fqdn" | awk -F. '{print $(NF-1)"."$NF}')
    echo "$domain"
}

check_if_param_avaiable_in_non_interactive_mode() {
  paramName=$1
  paramValue=$2
  help_menu_cmd=$3
  if [ "$paramValue" == "" ] && [ "$TTY" == "disabled" ]; then
    status_log $TYPE_ERROR "Error: $paramName is a required argument in non-interactive mode, please run '$help_menu_cmd'  to get more info on how to pass agruments from cli"
    exit 1
  fi
}


check_if_cluster_is_accessible(){
  # Check if kubectl can access any cluster
  if eval "$(getGumSpinnerOrLogger "checking if cluster is accessible") kubectl cluster-info"; then
    return 0
  fi

  # No cluster access, call grpl cluster connect
  status_log $TYPE_INFO "cluster is not accessible, calling grpl cluster connect"
  grpl cluster connect "$@"

}


check_if_grpl_is_installed(){

  status_log $TYPE_INFO "checking if grapple is installed"
  while ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; do echo -n "."; sleep 2; done && \
    sleep 5 && \
    kubectl wait -n grpl-system configuration.pkg.crossplane.io grpl --for condition=Healthy=True --timeout=60s

  if ! kubectl get -n grpl-system configuration.pkg.crossplane.io grpl 2>/dev/null; then
    status_log $TYPE_ERROR "Error: grapple is not installed, please run 'grpl cluster install' to install grapple"
    exit 1
  fi

  status_log $TYPE_SUCCESS "grapple is installed"

}
check_and_create_kubens() {

    if [[ "$KUBE_NS" != "" ]] && ! kubectl get namespace "$KUBE_NS" >/dev/null 2>&1; then
        status_log $TYPE_INFO "namespace $KUBE_NS doesn't exist, now creating"
        kubectl create namespace "$KUBE_NS"
    elif [[ "$KUBE_NS" == "" ]]; then
        status_log $TYPE_INFO "Do you want to select existing namespace or create new one?"
        local another_rule=$(gum choose "Select from existing" "Create new") || exit $?
        
        if [ "$another_rule" == "Select from existing" ]; then
            namespaces=$(kubectl get namespaces -o name | awk -F'/' '{print $2}')
            current_ns="default"
            KUBE_NS=$(if [ "${KUBE_NS}" != "" ]; then echo ${KUBE_NS}; else gum choose  --header "Please select kubectl namespace you want to use" $namespaces --selected=$current_ns ; fi) || exit $?
        else
            KUBE_NS=$(if [ "${KUBE_NS}" != "" ]; then echo ${KUBE_NS}; else prompt_for_explicit_input_with_validation "Enter KUBE_NS: " "default value is '$GRAS_NAME'" ".*" "kube ns can't be empty"; fi) || exit $?
            if [ "${KUBE_NS}" == "" ]; then KUBE_NS=$GRAS_NAME; fi
            if ! kubectl get namespace "$KUBE_NS" >/dev/null 2>&1; then
                    status_log $TYPE_INFO "namespace $KUBE_NS doesn't exist, now creating"
                    kubectl create namespace "$KUBE_NS"
            fi
        fi    
    fi
}

extract_domain_from_grpl_config() {
  if kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.clusterdomain}" > /dev/null 2>&1; then
    clusterdomain=$(kubectl get secret -n grpl-system grsf-config -o jsonpath="{.data.clusterdomain}" | base64 --decode)
  fi
}



kubeblocks_installation() {
  if ! kbcli; then
      echo "installing kbcli"
      check_and_install_kbcli
  fi

  if ! kubectl get deployment kubeblocks -n kb-system 2>/dev/null; then
    echo "checking kubeblocks"
    check_and_install_kubeblocks

    status_log $TYPE_INFO "waiting for configs to apply"
    for i in $(kubectl get clusterversion -o name); do 
      kubectl get $i -o yaml | sed "s,infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com,docker.io,g" | kubectl apply -f - >/dev/null 2>&1; 
    done
  else 
    echo "kubeblocks is already installed"
  fi
}



build_cluster_creation_command() {
    local base_command=$1
    local valid_args
    if [[ $TARGET_PLATFORM = $CIVO ]]; then
          valid_args=("${civo_valid_args[@]}")
    fi

    for arg in "${valid_args[@]}"; do
        # Check if a variable named after the argument exists and has a value
        local var_name=${arg//-/_}

        if [[ -n "${!var_name}" ]]; then
            # If the argument has a short flag (single letter), prepend a dash
            if [[ ${#var_name} -eq 1 ]]; then
                base_command+=" -$arg=${!var_name}"
            else
                base_command+=" --$arg=${!var_name}"
            fi
        fi
    done
    
    echo "$base_command"
}
match_case_insensitive() {
    local value1=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    local value2=$(echo "$2" | tr '[:upper:]' '[:lower:]')
    if [ "$value1" == "$value2" ]; then
        return 0
    else
        return 1
    fi
}





get_cluster_external_ip() {


  # Namespace where the LoadBalancer is located
  NAMESPACE=$1

  # Service name to look for
  SERVICE_NAME="traefik"

  # Maximum wait time in seconds
  MAX_WAIT=300
  INTERVAL=5
  WAITED=0

  status_log $TYPE_INFO "Waiting for the external IP of LoadBalancer '$SERVICE_NAME' in namespace '$NAMESPACE'"

  while [ $WAITED -lt $MAX_WAIT ]; do
    EXTERNAL_IP=$(kubectl get svc -n $NAMESPACE | awk -v svc="$SERVICE_NAME" '$1 == svc && $2 == "LoadBalancer" {print $4}')
    
    # Check if EXTERNAL_IP is assigned
    if [[ "$EXTERNAL_IP" != "<none>" && "$EXTERNAL_IP" != "<pending>" && -n "$EXTERNAL_IP" ]]; then
      status_log $TYPE_INFO "\nExternal IP for LoadBalancer '$SERVICE_NAME': $EXTERNAL_IP"
      CLUSTER_IP=$EXTERNAL_IP
      return 0
    fi
    
    # Add a dot to indicate waiting
    echo -n "." >&2
    sleep $INTERVAL
    WAITED=$((WAITED + INTERVAL))
  done

  status_log $TYPE_ERROR "Error: External IP not assigned for service '$SERVICE_NAME' in namespace '$NAMESPACE' within $MAX_WAIT seconds."
  exit 1


}




setup_code_verification_server() {
  
  code=$1
  complete_domain=$2
  cloud=$3

  # Create verification-server namespace if it doesn't exist
  kubectl create namespace verification-server --dry-run=client -o yaml | kubectl apply -f -

  # Copy and modify deployment yaml
  status_log $TYPE_INFO "Deploying code verification server"
  cp "$GRPL_WORKDIR/files/code-verification-server-deployment.yaml" /tmp/code-verification-server-deployment.yaml

  # Export env var for substitution
  export CLUSTER_ADDRESS="verification-server.$complete_domain"

  # Substitute variables using envsubst
  check_and_install_gettext
  envsubst < /tmp/code-verification-server-deployment.yaml > /tmp/code-verification-server-deployment.yaml.tmp && \
  mv /tmp/code-verification-server-deployment.yaml.tmp /tmp/code-verification-server-deployment.yaml

  # Add ingressClassName for AWS
  if [ "$cloud" = "aws" ]; then
    yq eval-all '
      select(kind == "Ingress") |= 
      .spec.ingressClassName = "traefik"
    ' -i /tmp/code-verification-server-deployment.yaml
  fi

  # Apply the deployment
  kubectl apply -f /tmp/code-verification-server-deployment.yaml

  # Wait for deployment to be ready
  status_log $TYPE_INFO "Waiting for code verification server deployment to be ready"
  kubectl wait deployment -n verification-server code-verification-server --for condition=Available=True --timeout=300s

  # Set CODE env var in deployment
  kubectl set env deployment/code-verification-server -n verification-server CODE="${code}"

}


upsert_dns_record() {

  api_url=$1
  complete_domain=$2
  code=$3
  external_ip=$4
  hosted_zone_id=$5
  type=$6


  # update the dns, only if the domain is a valid FQDN
  if host $(extract_domain_name "$complete_domain") 2>&1 > /dev/null; then

    cd="*.$complete_domain"
    status_log $TYPE_INFO "Deploying grpl-dns-route53-upsert"
    kubectl delete po -n default grpl-dns-route53-upsert >/dev/null 2>&1 || true
    cmd="kubectl run -n default grpl-dns-route53-upsert --image=zaialpha/grpl-route53-upsert:latest \
    --env=\"HOSTED_ZONE_ID=${hosted_zone_id}\" \
    --env=\"GRAPPLE_DNS=${cd}\" \
    --env=\"GRPL_TARGET=${external_ip}\" \
    --env=\"TYPE=${type}\" \
    --env=\"CODE=${code}\" \
    --env=\"API_URL=${api_url}\" \
    --restart=Never"
    # status_log $TYPE_INFO "Running command: $cmd"
    eval "$cmd"


    # Wait for pod to complete with timeout
    status_log $TYPE_INFO "Waiting for DNS update pod to complete"
    timeout=90 # 1 minute and 30 seconds timeout
    start_time=$(date +%s)

    while true; do
      current_time=$(date +%s)
      elapsed=$((current_time - start_time))
      
      if [ $elapsed -gt $timeout ]; then
        status_log $TYPE_ERROR "Timeout waiting for DNS update pod"
        exit 1
      fi

      pod_status=$(kubectl get pod -n default grpl-dns-route53-upsert -o jsonpath='{.status.phase}' 2>/dev/null)
      
      if [ "$pod_status" = "Succeeded" ]; then
        status_log $TYPE_SUCCESS "DNS update completed successfully"
        break
      elif [ "$pod_status" = "Failed" ] || [ "$pod_status" = "Error" ]; then
        status_log $TYPE_ERROR "DNS update failed"
        exit 1
      fi

      sleep 2
    done

  fi

}