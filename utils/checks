#!/bin/bash

. "$GRPL_WORKDIR/utils/constants"

is_correct_target_platform_provided() {

    target_platform=$1
    if [[ $target_platform != $Minikube && $target_platform != $CIVO && $target_platform != $Kubernetes ]]; then
        errMsg="Error: Invalid TARGET_PLATFORM provided : $target_platform. Please provide one of the following 1)$Minikube 2)$CIVO 3)$Kubernetes"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}

is_correct_civo_region_provided() {

    output=$(gum spin --title "fetching civo regions" --show-output -- civo region ls -o custom -f code) 
    region=$1


    # Declare an empty array
    regions_array=()
    while IFS= read -r line; do
        regions_array+=("$line")
    done <<< "$output"

    if [[ " ${regions_array[@]} " =~ " $region " ]]; then
        return 0
    else
        errMsg="Error: Invalid CIVO_REGION provided : $region"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}

is_correct_civo_cluster_provided() {

    output=$(gum spin --title "fetching civo clusters"  --show-output -- civo k8s ls -o custom -f name)
    cluster=$1

    # Declare an empty array
    cluster_array=()
    while IFS= read -r line; do
        cluster_array+=("$line")
    done <<< "$output"

    if [[ " ${cluster_array[@]} " =~ " $cluster " ]]; then
        return 0
    else
        errMsg="Error: Invalid CIVO_CLUSTER provided : $cluster"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}

is_correct_grapple_version_provided() {

    selected_version=$1

    if [[ " ${GRAPPLE_AVAILABLE_VERSIONS[@]} " =~ " $selected_version " ]]; then
        return 0
    else
        errMsg="Error: Invalid GRAPPLE_VERSION provided : $selected_version, Please provide one of the following ${GRAPPLE_AVAILABLE_VERSIONS[@]}"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}

is_correct_grapple_applicationsets_provided() {

    templates=($DB_FILE $DB_MYSQL $DB_MYSQL_DISCOVERY_BASED $DB_POSTGRES $DB_POSTGRES_DISCOVERY_BASED)
    selected_template=$1

    if [[ " ${templates[@]} " =~ " $selected_template " ]]; then
        return 0
    else
        errMsg="Error: Invalid GRAS_TEMPLATE provided : $selected_template,  Please correct template name"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}

is_correct_db_type_provided() {

    db_types=($INTERNAL_DB $EXTERNAL_DB)
    selected_db_type=$1

    if [[ " ${db_types[@]} " =~ " $selected_db_type " ]]; then
        return 0
    else
        errMsg="Error: Invalid DB_TYPE provided : $selected_db_type,  Please correct db type"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}

is_value_correct_wrt_regex() {

    local value=$1
    local regex=$2
    local errMsg=$3
    if [[ ! $value =~ $regex ]]; then
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi
}


is_correct_kubectl_context_provided() {

    output=$(kubectl config get-contexts -o name)
    if [ -z "$output" ]; then
        errMsg="Error: kubectl doesn't have any contexts"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

    context=$1
    if [ "${context}" == "" ]; then 
        return 0
    fi

    # Declare an empty array
    context_array=()
    while IFS= read -r line; do
        context_array+=("$line")
    done <<< "$output"

    if [[ " ${context_array[@]} " =~ " $context " ]]; then
        return 0
    else
        errMsg="Error: Invalid KUBECTL_CONTEXT provided : $context"
        echo $errMsg
        status_log $TYPE_ERROR "$errMsg"
        exit 1
    fi

}
